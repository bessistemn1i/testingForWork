!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){e=e||it;var i=e.createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=mt.type(t);return"function"!==i&&!mt.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function s(t,e,i){return mt.isFunction(e)?mt.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?mt.grep(t,function(t){return t===e!==i}):"string"!=typeof e?mt.grep(t,function(t){return at.call(e,t)>-1!==i}):St.test(e)?mt.filter(e,t,i):(e=mt.filter(e,t),mt.grep(t,function(t){return at.call(e,t)>-1!==i&&1===t.nodeType}))}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){var e={};return mt.each(t.match($t)||[],function(t,i){e[i]=!0}),e}function l(t){return t}function c(t){throw t}function u(t,e,i,n){var r;try{t&&mt.isFunction(r=t.promise)?r.call(t).done(e).fail(i):t&&mt.isFunction(r=t.then)?r.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}function d(){it.removeEventListener("DOMContentLoaded",d),t.removeEventListener("load",d),mt.ready()}function h(){this.expando=mt.expando+h.uid++}function p(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:jt.test(t)?JSON.parse(t):t)}function f(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(zt,"-$&").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i=p(i)}catch(r){}It.set(t,e,i)}else i=void 0;return i}function m(t,e,i,n){var r,s=1,o=20,a=n?function(){return n.cur()}:function(){return mt.css(t,e,"")},l=a(),c=i&&i[3]||(mt.cssNumber[e]?"":"px"),u=(mt.cssNumber[e]||"px"!==c&&+l)&&Ht.exec(mt.css(t,e));if(u&&u[3]!==c){c=c||u[3],i=i||[],u=+l||1;do s=s||".5",u/=s,mt.style(t,e,u+c);while(s!==(s=a()/l)&&1!==s&&--o)}return i&&(u=+u||+l||0,r=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=r)),r}function g(t){var e,i=t.ownerDocument,n=t.nodeName,r=Bt[n];return r?r:(e=i.body.appendChild(i.createElement(n)),r=mt.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Bt[n]=r,r)}function v(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)n=t[s],n.style&&(i=n.style.display,e?("none"===i&&(r[s]=Lt.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&Xt(n)&&(r[s]=g(n))):"none"!==i&&(r[s]="none",Lt.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function _(t,e){var i;return i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&r(t,e)?mt.merge([t],i):i}function y(t,e){for(var i=0,n=t.length;i<n;i++)Lt.set(t[i],"globalEval",!e||Lt.get(e[i],"globalEval"))}function w(t,e,i,n,r){for(var s,o,a,l,c,u,d=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if(s=t[p],s||0===s)if("object"===mt.type(s))mt.merge(h,s.nodeType?[s]:s);else if(Qt.test(s)){for(o=o||d.appendChild(e.createElement("div")),a=(Yt.exec(s)||["",""])[1].toLowerCase(),l=Gt[a]||Gt._default,o.innerHTML=l[1]+mt.htmlPrefilter(s)+l[2],u=l[0];u--;)o=o.lastChild;mt.merge(h,o.childNodes),o=d.firstChild,o.textContent=""}else h.push(e.createTextNode(s));for(d.textContent="",p=0;s=h[p++];)if(n&&mt.inArray(s,n)>-1)r&&r.push(s);else if(c=mt.contains(s.ownerDocument,s),o=_(d.appendChild(s),"script"),c&&y(o),i)for(u=0;s=o[u++];)Vt.test(s.type||"")&&i.push(s);return d}function T(){return!0}function x(){return!1}function b(){try{return it.activeElement}catch(t){}}function k(t,e,i,n,r,s){var o,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)k(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=x;else if(!r)return t;return 1===s&&(o=r,r=function(t){return mt().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=mt.guid++)),t.each(function(){mt.event.add(this,e,r,n,i)})}function S(t,e){return r(t,"table")&&r(11!==e.nodeType?e:e.firstChild,"tr")?mt(">tbody",t)[0]||t:t}function C(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function P(t){var e=re.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function A(t,e){var i,n,r,s,o,a,l,c;if(1===e.nodeType){if(Lt.hasData(t)&&(s=Lt.access(t),o=Lt.set(e,s),c=s.events)){delete o.handle,o.events={};for(r in c)for(i=0,n=c[r].length;i<n;i++)mt.event.add(e,r,c[r][i])}It.hasData(t)&&(a=It.access(t),l=mt.extend({},a),It.set(e,l))}}function O(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Ut.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function D(t,e,n,r){e=st.apply([],e);var s,o,a,l,c,u,d=0,h=t.length,p=h-1,f=e[0],m=mt.isFunction(f);if(m||h>1&&"string"==typeof f&&!pt.checkClone&&ne.test(f))return t.each(function(i){var s=t.eq(i);m&&(e[0]=f.call(this,i,s.html())),D(s,e,n,r)});if(h&&(s=w(e,t[0].ownerDocument,!1,t,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=mt.map(_(s,"script"),C),l=a.length;d<h;d++)c=s,d!==p&&(c=mt.clone(c,!0,!0),l&&mt.merge(a,_(c,"script"))),n.call(t[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,mt.map(a,P),d=0;d<l;d++)c=a[d],Vt.test(c.type||"")&&!Lt.access(c,"globalEval")&&mt.contains(u,c)&&(c.src?mt._evalUrl&&mt._evalUrl(c.src):i(c.textContent.replace(se,""),u))}return t}function $(t,e,i){for(var n,r=e?mt.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||mt.cleanData(_(n)),n.parentNode&&(i&&mt.contains(n.ownerDocument,n)&&y(_(n,"script")),n.parentNode.removeChild(n));return t}function R(t,e,i){var n,r,s,o,a=t.style;return i=i||le(t),i&&(o=i.getPropertyValue(e)||i[e],""!==o||mt.contains(t.ownerDocument,t)||(o=mt.style(t,e)),!pt.pixelMarginRight()&&ae.test(o)&&oe.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function E(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function M(t){if(t in fe)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=pe.length;i--;)if(t=pe[i]+e,t in fe)return t}function N(t){var e=mt.cssProps[t];return e||(e=mt.cssProps[t]=M(t)||t),e}function L(t,e,i){var n=Ht.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function I(t,e,i,n,r){var s,o=0;for(s=i===(n?"border":"content")?4:"width"===e?1:0;s<4;s+=2)"margin"===i&&(o+=mt.css(t,i+qt[s],!0,r)),n?("content"===i&&(o-=mt.css(t,"padding"+qt[s],!0,r)),"margin"!==i&&(o-=mt.css(t,"border"+qt[s]+"Width",!0,r))):(o+=mt.css(t,"padding"+qt[s],!0,r),"padding"!==i&&(o+=mt.css(t,"border"+qt[s]+"Width",!0,r)));return o}function j(t,e,i){var n,r=le(t),s=R(t,e,r),o="border-box"===mt.css(t,"boxSizing",!1,r);return ae.test(s)?s:(n=o&&(pt.boxSizingReliable()||s===t.style[e]),"auto"===s&&(s=t["offset"+e[0].toUpperCase()+e.slice(1)]),s=parseFloat(s)||0,s+I(t,e,i||(o?"border":"content"),n,r)+"px")}function z(t,e,i,n,r){return new z.prototype.init(t,e,i,n,r)}function F(){ge&&(it.hidden===!1&&t.requestAnimationFrame?t.requestAnimationFrame(F):t.setTimeout(F,mt.fx.interval),mt.fx.tick())}function H(){return t.setTimeout(function(){me=void 0}),me=mt.now()}function q(t,e){var i,n=0,r={height:t};for(e=e?1:0;n<4;n+=2-e)i=qt[n],r["margin"+i]=r["padding"+i]=t;return e&&(r.opacity=r.width=t),r}function X(t,e,i){for(var n,r=(U.tweeners[e]||[]).concat(U.tweeners["*"]),s=0,o=r.length;s<o;s++)if(n=r[s].call(i,e,t))return n}function W(t,e,i){var n,r,s,o,a,l,c,u,d="width"in e||"height"in e,h=this,p={},f=t.style,m=t.nodeType&&Xt(t),g=Lt.get(t,"fxshow");i.queue||(o=mt._queueHooks(t,"fx"),null==o.unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,h.always(function(){h.always(function(){o.unqueued--,mt.queue(t,"fx").length||o.empty.fire()})}));for(n in e)if(r=e[n],ve.test(r)){if(delete e[n],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[n])continue;m=!0}p[n]=g&&g[n]||mt.style(t,n)}if(l=!mt.isEmptyObject(e),l||!mt.isEmptyObject(p)){d&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],c=g&&g.display,null==c&&(c=Lt.get(t,"display")),u=mt.css(t,"display"),"none"===u&&(c?u=c:(v([t],!0),c=t.style.display||c,u=mt.css(t,"display"),v([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===mt.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(n in p)l||(g?"hidden"in g&&(m=g.hidden):g=Lt.access(t,"fxshow",{display:c}),s&&(g.hidden=!m),m&&v([t],!0),h.done(function(){m||v([t]),Lt.remove(t,"fxshow");for(n in p)mt.style(t,n,p[n])})),l=X(m?g[n]:0,n,h),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}}function B(t,e){var i,n,r,s,o;for(i in t)if(n=mt.camelCase(i),r=e[n],s=t[i],Array.isArray(s)&&(r=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),o=mt.cssHooks[n],o&&"expand"in o){s=o.expand(s),delete t[n];for(i in s)i in t||(t[i]=s[i],e[i]=r)}else e[n]=r}function U(t,e,i){var n,r,s=0,o=U.prefilters.length,a=mt.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=me||H(),i=Math.max(0,c.startTime+c.duration-e),n=i/c.duration||0,s=1-n,o=0,l=c.tweens.length;o<l;o++)c.tweens[o].run(s);return a.notifyWith(t,[c,s,i]),s<1&&l?i:(l||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:mt.extend({},e),opts:mt.extend(!0,{specialEasing:{},easing:mt.easing._default},i),originalProperties:e,originalOptions:i,startTime:me||H(),duration:i.duration,tweens:[],createTween:function(e,i){var n=mt.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(B(u,c.opts.specialEasing);s<o;s++)if(n=U.prefilters[s].call(c,t,u,c.opts))return mt.isFunction(n.stop)&&(mt._queueHooks(c.elem,c.opts.queue).stop=mt.proxy(n.stop,n)),n;return mt.map(u,X,c),mt.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),mt.fx.timer(mt.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}function Y(t){var e=t.match($t)||[];return e.join(" ")}function V(t){return t.getAttribute&&t.getAttribute("class")||""}function G(t,e,i,n){var r;if(Array.isArray(e))mt.each(e,function(e,r){i||Ae.test(t)?n(t,r):G(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==mt.type(e))n(t,e);else for(r in e)G(t+"["+r+"]",e[r],i,n)}function Q(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,r=0,s=e.toLowerCase().match($t)||[];if(mt.isFunction(i))for(;n=s[r++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Z(t,e,i,n){function r(a){var l;return s[a]=!0,mt.each(t[a]||[],function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),l}var s={},o=t===Fe;return r(e.dataTypes[0])||!s["*"]&&r("*")}function J(t,e){var i,n,r=mt.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&mt.extend(!0,t,n),t}function K(t,e,i){for(var n,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)s=l[0];else{for(r in i){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),i[s]}function tt(t,e,i,n){var r,s,o,a,l,c={},u=t.dataTypes.slice();if(u[1])for(o in t.converters)c[o.toLowerCase()]=t.converters[o];for(s=u.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(o=c[l+" "+s]||c["* "+s],!o)for(r in c)if(a=r.split(" "),a[1]===s&&(o=c[l+" "+a[0]]||c["* "+a[0]])){o===!0?o=c[r]:c[r]!==!0&&(s=a[0],u.unshift(a[1]));break}if(o!==!0)if(o&&t["throws"])e=o(e);else try{e=o(e)}catch(d){return{state:"parsererror",error:o?d:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}var et=[],it=t.document,nt=Object.getPrototypeOf,rt=et.slice,st=et.concat,ot=et.push,at=et.indexOf,lt={},ct=lt.toString,ut=lt.hasOwnProperty,dt=ut.toString,ht=dt.call(Object),pt={},ft="3.2.1",mt=function(t,e){return new mt.fn.init(t,e)},gt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,vt=/^-ms-/,_t=/-([a-z])/g,yt=function(t,e){return e.toUpperCase()};mt.fn=mt.prototype={jquery:ft,constructor:mt,length:0,toArray:function(){return rt.call(this)},get:function(t){return null==t?rt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=mt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return mt.each(this,t)},map:function(t){return this.pushStack(mt.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(rt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:ot,sort:et.sort,splice:et.splice},mt.extend=mt.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[a]||{},a++),"object"==typeof o||mt.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],n=t[e],o!==n&&(c&&n&&(mt.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,s=i&&Array.isArray(i)?i:[]):s=i&&mt.isPlainObject(i)?i:{},o[e]=mt.extend(c,s,n)):void 0!==n&&(o[e]=n));return o},mt.extend({expando:"jQuery"+(ft+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===mt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=mt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==ct.call(t))&&(!(e=nt(t))||(i=ut.call(e,"constructor")&&e.constructor,"function"==typeof i&&dt.call(i)===ht))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?lt[ct.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(vt,"ms-").replace(_t,yt)},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(gt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?mt.merge(i,"string"==typeof t?[t]:t):ot.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:at.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n,r=[],s=0,o=t.length,a=!i;s<o;s++)n=!e(t[s],s),n!==a&&r.push(t[s]);return r},map:function(t,e,i){var r,s,o=0,a=[];if(n(t))for(r=t.length;o<r;o++)s=e(t[o],o,i),null!=s&&a.push(s);else for(o in t)s=e(t[o],o,i),null!=s&&a.push(s);return st.apply([],a)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),mt.isFunction(t))return n=rt.call(arguments,2),r=function(){return t.apply(e||this,n.concat(rt.call(arguments)))},r.guid=t.guid=t.guid||mt.guid++,r},now:Date.now,support:pt}),"function"==typeof Symbol&&(mt.fn[Symbol.iterator]=et[Symbol.iterator]),mt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){lt["[object "+e+"]"]=e.toLowerCase()});var wt=function(t){function e(t,e,i,n){var r,s,o,a,l,c,u,h=e&&e.ownerDocument,f=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return i;if(!n&&((e?e.ownerDocument||e:H)!==E&&R(e),e=e||E,N)){if(11!==f&&(l=vt.exec(t)))if(r=l[1]){if(9===f){if(!(o=e.getElementById(r)))return i;if(o.id===r)return i.push(o),i}else if(h&&(o=h.getElementById(r))&&z(e,o)&&o.id===r)return i.push(o),i}else{if(l[2])return J.apply(i,e.getElementsByTagName(t)),i;if((r=l[3])&&x.getElementsByClassName&&e.getElementsByClassName)return J.apply(i,e.getElementsByClassName(r)),i}if(x.qsa&&!U[t+" "]&&(!L||!L.test(t))){if(1!==f)h=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(Tt,xt):e.setAttribute("id",a=F),c=C(t),s=c.length;s--;)c[s]="#"+a+" "+p(c[s]);u=c.join(","),h=_t.test(t)&&d(e.parentNode)||e}if(u)try{return J.apply(i,h.querySelectorAll(u)),i}catch(m){}finally{a===F&&e.removeAttribute("id")}}}return A(t.replace(at,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>b.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[F]=!0,t}function r(t){var e=E.createElement("fieldset");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=i.length;n--;)b.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&kt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return n(function(e){return e=+e,n(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function d(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=X++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var c,u,d,h=[q,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(d=e[F]||(e[F]={}),u=d[e.uniqueID]||(d[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=u[s])&&c[0]===q&&c[1]===a)return h[2]=c[2];if(u[s]=h,h[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var r=0,s=i.length;r<s;r++)e(t,i[r],n);return n}function v(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),c&&e.push(a)));return o}function _(t,e,i,r,s,o){return r&&!r[F]&&(r=_(r)),s&&!s[F]&&(s=_(s,o)),n(function(n,o,a,l){var c,u,d,h=[],p=[],f=o.length,m=n||g(e||"*",a.nodeType?[a]:a,[]),_=!t||!n&&e?m:v(m,h,t,a,l),y=i?s||(n?t:f||r)?[]:o:_;if(i&&i(_,y,a,l),r)for(c=v(y,p),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(y[p[u]]=!(_[p[u]]=d));if(n){if(s||t){if(s){for(c=[],u=y.length;u--;)(d=y[u])&&c.push(_[u]=d);s(null,y=[],c,l)}for(u=y.length;u--;)(d=y[u])&&(c=s?tt(n,d):h[u])>-1&&(n[c]=!(o[c]=d))}}else y=v(y===o?y.splice(f,y.length):y),s?s(null,o,y,l):J.apply(o,y)})}function y(t){for(var e,i,n,r=t.length,s=b.relative[t[0].type],o=s||b.relative[" "],a=s?1:0,l=f(function(t){return t===e},o,!0),c=f(function(t){return tt(e,t)>-1},o,!0),u=[function(t,i,n){var r=!s&&(n||i!==O)||((e=i).nodeType?l(t,i,n):c(t,i,n));return e=null,r}];a<r;a++)if(i=b.relative[t[a].type])u=[f(m(u),i)];else{if(i=b.filter[t[a].type].apply(null,t[a].matches),i[F]){for(n=++a;n<r&&!b.relative[t[n].type];n++);return _(a>1&&m(u),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),i,a<n&&y(t.slice(a,n)),n<r&&y(t=t.slice(n)),n<r&&p(t))}u.push(i)}return m(u)}function w(t,i){var r=i.length>0,s=t.length>0,o=function(n,o,a,l,c){var u,d,h,p=0,f="0",m=n&&[],g=[],_=O,y=n||s&&b.find.TAG("*",c),w=q+=null==_?1:Math.random()||.1,T=y.length;for(c&&(O=o===E||o||c);f!==T&&null!=(u=y[f]);f++){if(s&&u){for(d=0,o||u.ownerDocument===E||(R(u),a=!N);h=t[d++];)if(h(u,o||E,a)){l.push(u);break}c&&(q=w)}r&&((u=!h&&u)&&p--,n&&m.push(u))}if(p+=f,r&&f!==p){for(d=0;h=i[d++];)h(m,g,o,a);if(n){if(p>0)for(;f--;)m[f]||g[f]||(g[f]=Q.call(l));g=v(g)}J.apply(l,g),c&&!n&&g.length>0&&p+i.length>1&&e.uniqueSort(l)}return c&&(q=w,O=_),m};return r?n(o):o}var T,x,b,k,S,C,P,A,O,D,$,R,E,M,N,L,I,j,z,F="sizzle"+1*new Date,H=t.document,q=0,X=0,W=i(),B=i(),U=i(),Y=function(t,e){return t===e&&($=!0),0},V={}.hasOwnProperty,G=[],Q=G.pop,Z=G.push,J=G.push,K=G.slice,tt=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+nt+"))|)"+it+"*\\]",st=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",ot=new RegExp(it+"+","g"),at=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ct=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ut=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),dt=new RegExp(st),ht=new RegExp("^"+nt+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_t=/[+~]/,yt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),wt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},Tt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},bt=function(){R()},kt=f(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{J.apply(G=K.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch(St){J={apply:G.length?function(t,e){Z.apply(t,K.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}x=e.support={},S=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},R=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:H;return n!==E&&9===n.nodeType&&n.documentElement?(E=n,M=E.documentElement,N=!S(E),H!==E&&(i=E.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",bt,!1):i.attachEvent&&i.attachEvent("onunload",bt)),x.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=r(function(t){return t.appendChild(E.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=gt.test(E.getElementsByClassName),x.getById=r(function(t){return M.appendChild(t).id=F,!E.getElementsByName||!E.getElementsByName(F).length}),x.getById?(b.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&N){var i=e.getElementById(t);return i?[i]:[]}}):(b.filter.ID=function(t){var e=t.replace(yt,wt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},b.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&N){var i,n,r,s=e.getElementById(t);if(s){if(i=s.getAttributeNode("id"),i&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===t)return[s]}return[]}}),b.find.TAG=x.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):x.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},b.find.CLASS=x.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&N)return e.getElementsByClassName(t)},I=[],L=[],(x.qsa=gt.test(E.querySelectorAll))&&(r(function(t){M.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+F+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||L.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=E.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+it+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),M.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(x.matchesSelector=gt.test(j=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&r(function(t){x.disconnectedMatch=j.call(t,"*"),j.call(t,"[s!='']:x"),I.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),I=I.length&&new RegExp(I.join("|")),e=gt.test(M.compareDocumentPosition),z=e||gt.test(M.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},Y=e?function(t,e){if(t===e)return $=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!x.sortDetached&&e.compareDocumentPosition(t)===i?t===E||t.ownerDocument===H&&z(H,t)?-1:e===E||e.ownerDocument===H&&z(H,e)?1:D?tt(D,t)-tt(D,e):0:4&i?-1:1)}:function(t,e){if(t===e)return $=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!r||!s)return t===E?-1:e===E?1:r?-1:s?1:D?tt(D,t)-tt(D,e):0;if(r===s)return o(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?o(a[n],l[n]):a[n]===H?-1:l[n]===H?1:0},E):E},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==E&&R(t),i=i.replace(ut,"='$1']"),x.matchesSelector&&N&&!U[i+" "]&&(!I||!I.test(i))&&(!L||!L.test(i)))try{var n=j.call(t,i);if(n||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(r){}return e(i,E,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==E&&R(t),z(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==E&&R(t);var i=b.attrHandle[e.toLowerCase()],n=i&&V.call(b.attrHandle,e.toLowerCase())?i(t,e,!N):void 0;return void 0!==n?n:x.attributes||!N?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(Tt,xt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if($=!x.detectDuplicates,D=!x.sortStable&&t.slice(0),t.sort(Y),$){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return D=null,t},k=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=k(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=k(e);return i},b=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&dt.test(i)&&(e=C(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var s=e.attr(r,t);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(ot," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var c,u,d,h,p,f,m=s!==o?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),_=!l&&!a,y=!1;if(g){if(s){for(;m;){for(h=e;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&_){for(h=g,d=h[F]||(h[F]={}),u=d[h.uniqueID]||(d[h.uniqueID]={}),c=u[t]||[],p=c[0]===q&&c[1],y=p&&c[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(y=p=0)||f.pop();)if(1===h.nodeType&&++y&&h===e){u[t]=[q,p,y];break}}else if(_&&(h=e,d=h[F]||(h[F]={}),u=d[h.uniqueID]||(d[h.uniqueID]={}),c=u[t]||[],p=c[0]===q&&c[1],y=p),y===!1)for(;(h=++p&&h&&h[m]||(y=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++y||(_&&(d=h[F]||(h[F]={}),u=d[h.uniqueID]||(d[h.uniqueID]={}),u[t]=[q,y]),h!==e)););return y-=r,y===n||y%n===0&&y/n>=0}}},PSEUDO:function(t,i){var r,s=b.pseudos[t]||b.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[F]?s(i):s.length>1?(r=[t,t,"",i],b.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=s(t,i),o=r.length;o--;)n=tt(t,r[o]),t[n]=!(e[n]=r[o])}):function(t){return s(t,0,r)}):s}},pseudos:{not:n(function(t){var e=[],i=[],r=P(t.replace(at,"$1"));return r[F]?n(function(t,e,i,n){for(var s,o=r(t,null,n,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,n,s){return e[0]=t,r(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(yt,wt),function(e){return(e.textContent||e.innerText||k(e)).indexOf(t)>-1}}),lang:n(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,wt).toLowerCase(),function(e){var i;do if(i=N?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1;
}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===M},focus:function(t){return t===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,i){return[i<0?i+e:i]}),even:u(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:u(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:u(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:u(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}},b.pseudos.nth=b.pseudos.eq;for(T in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[T]=a(T);for(T in{submit:!0,reset:!0})b.pseudos[T]=l(T);return h.prototype=b.filters=b.pseudos,b.setFilters=new h,C=e.tokenize=function(t,i){var n,r,s,o,a,l,c,u=B[t+" "];if(u)return i?0:u.slice(0);for(a=t,l=[],c=b.preFilter;a;){n&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=ct.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(at," ")}),a=a.slice(n.length));for(o in b.filter)!(r=pt[o].exec(a))||c[o]&&!(r=c[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},P=e.compile=function(t,e){var i,n=[],r=[],s=U[t+" "];if(!s){for(e||(e=C(t)),i=e.length;i--;)s=y(e[i]),s[F]?n.push(s):r.push(s);s=U(t,w(r,n)),s.selector=t}return s},A=e.select=function(t,e,i,n){var r,s,o,a,l,c="function"==typeof t&&t,u=!n&&C(t=c.selector||t);if(i=i||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===e.nodeType&&N&&b.relative[s[1].type]){if(e=(b.find.ID(o.matches[0].replace(yt,wt),e)||[])[0],!e)return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=pt.needsContext.test(t)?0:s.length;r--&&(o=s[r],!b.relative[a=o.type]);)if((l=b.find[a])&&(n=l(o.matches[0].replace(yt,wt),_t.test(s[0].type)&&d(e.parentNode)||e))){if(s.splice(r,1),t=n.length&&p(s),!t)return J.apply(i,n),i;break}}return(c||P(t,u))(n,e,!N,i,!e||_t.test(t)&&d(e.parentNode)||e),i},x.sortStable=F.split("").sort(Y).join("")===F,x.detectDuplicates=!!$,R(),x.sortDetached=r(function(t){return 1&t.compareDocumentPosition(E.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;if(!i)return t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);mt.find=wt,mt.expr=wt.selectors,mt.expr[":"]=mt.expr.pseudos,mt.uniqueSort=mt.unique=wt.uniqueSort,mt.text=wt.getText,mt.isXMLDoc=wt.isXML,mt.contains=wt.contains,mt.escapeSelector=wt.escape;var Tt=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&mt(t).is(i))break;n.push(t)}return n},xt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},bt=mt.expr.match.needsContext,kt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,St=/^.[^:#\[\.,]*$/;mt.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?mt.find.matchesSelector(n,t)?[n]:[]:mt.find.matches(t,mt.grep(e,function(t){return 1===t.nodeType}))},mt.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(mt(t).filter(function(){for(e=0;e<n;e++)if(mt.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)mt.find(t,r[e],i);return n>1?mt.uniqueSort(i):i},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&bt.test(t)?mt(t):t||[],!1).length}});var Ct,Pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,At=mt.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||Ct,"string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Pt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof mt?e[0]:e,mt.merge(this,mt.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:it,!0)),kt.test(n[1])&&mt.isPlainObject(e))for(n in e)mt.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=it.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):mt.isFunction(t)?void 0!==i.ready?i.ready(t):t(mt):mt.makeArray(t,this)};At.prototype=mt.fn,Ct=mt(it);var Ot=/^(?:parents|prev(?:Until|All))/,Dt={children:!0,contents:!0,next:!0,prev:!0};mt.fn.extend({has:function(t){var e=mt(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(mt.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&mt(t);if(!bt.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&mt.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?mt.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?at.call(mt(t),this[0]):at.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(mt.uniqueSort(mt.merge(this.get(),mt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),mt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Tt(t,"parentNode")},parentsUntil:function(t,e,i){return Tt(t,"parentNode",i)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return Tt(t,"nextSibling")},prevAll:function(t){return Tt(t,"previousSibling")},nextUntil:function(t,e,i){return Tt(t,"nextSibling",i)},prevUntil:function(t,e,i){return Tt(t,"previousSibling",i)},siblings:function(t){return xt((t.parentNode||{}).firstChild,t)},children:function(t){return xt(t.firstChild)},contents:function(t){return r(t,"iframe")?t.contentDocument:(r(t,"template")&&(t=t.content||t),mt.merge([],t.childNodes))}},function(t,e){mt.fn[t]=function(i,n){var r=mt.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=mt.filter(n,r)),this.length>1&&(Dt[t]||mt.uniqueSort(r),Ot.test(t)&&r.reverse()),this.pushStack(r)}});var $t=/[^\x20\t\r\n\f]+/g;mt.Callbacks=function(t){t="string"==typeof t?a(t):mt.extend({},t);var e,i,n,r,s=[],o=[],l=-1,c=function(){for(r=r||t.once,n=e=!0;o.length;l=-1)for(i=o.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},u={add:function(){return s&&(i&&!e&&(l=s.length-1,o.push(i)),function n(e){mt.each(e,function(e,i){mt.isFunction(i)?t.unique&&u.has(i)||s.push(i):i&&i.length&&"string"!==mt.type(i)&&n(i)})}(arguments),i&&!e&&c()),this},remove:function(){return mt.each(arguments,function(t,e){for(var i;(i=mt.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?mt.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=i||[],i=[t,i.slice?i.slice():i],o.push(i),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},mt.extend({Deferred:function(e){var i=[["notify","progress",mt.Callbacks("memory"),mt.Callbacks("memory"),2],["resolve","done",mt.Callbacks("once memory"),mt.Callbacks("once memory"),0,"resolved"],["reject","fail",mt.Callbacks("once memory"),mt.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(t){return r.then(null,t)},pipe:function(){var t=arguments;return mt.Deferred(function(e){mt.each(i,function(i,n){var r=mt.isFunction(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&mt.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){function s(e,i,n,r){return function(){var a=this,u=arguments,d=function(){var t,d;if(!(e<o)){if(t=n.apply(a,u),t===i.promise())throw new TypeError("Thenable self-resolution");d=t&&("object"==typeof t||"function"==typeof t)&&t.then,mt.isFunction(d)?r?d.call(t,s(o,i,l,r),s(o,i,c,r)):(o++,d.call(t,s(o,i,l,r),s(o,i,c,r),s(o,i,l,i.notifyWith))):(n!==l&&(a=void 0,u=[t]),(r||i.resolveWith)(a,u))}},h=r?d:function(){try{d()}catch(t){mt.Deferred.exceptionHook&&mt.Deferred.exceptionHook(t,h.stackTrace),e+1>=o&&(n!==c&&(a=void 0,u=[t]),i.rejectWith(a,u))}};e?h():(mt.Deferred.getStackHook&&(h.stackTrace=mt.Deferred.getStackHook()),t.setTimeout(h))}}var o=0;return mt.Deferred(function(t){i[0][3].add(s(0,t,mt.isFunction(r)?r:l,t.notifyWith)),i[1][3].add(s(0,t,mt.isFunction(e)?e:l)),i[2][3].add(s(0,t,mt.isFunction(n)?n:c))}).promise()},promise:function(t){return null!=t?mt.extend(t,r):r}},s={};return mt.each(i,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){n=a},i[3-t][2].disable,i[0][2].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=rt.call(arguments),s=mt.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?rt.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(u(t,s.done(o(i)).resolve,s.reject,!e),"pending"===s.state()||mt.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)u(r[i],o(i),s.reject);return s.promise()}});var Rt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;mt.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&Rt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},mt.readyException=function(e){t.setTimeout(function(){throw e})};var Et=mt.Deferred();mt.fn.ready=function(t){return Et.then(t)["catch"](function(t){mt.readyException(t)}),this},mt.extend({isReady:!1,readyWait:1,ready:function(t){(t===!0?--mt.readyWait:mt.isReady)||(mt.isReady=!0,t!==!0&&--mt.readyWait>0||Et.resolveWith(it,[mt]))}}),mt.ready.then=Et.then,"complete"===it.readyState||"loading"!==it.readyState&&!it.documentElement.doScroll?t.setTimeout(mt.ready):(it.addEventListener("DOMContentLoaded",d),t.addEventListener("load",d));var Mt=function(t,e,i,n,r,s,o){var a=0,l=t.length,c=null==i;if("object"===mt.type(i)){r=!0;for(a in i)Mt(t,e,a,i[a],!0,s,o)}else if(void 0!==n&&(r=!0,mt.isFunction(n)||(o=!0),c&&(o?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(mt(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:c?e.call(t):l?e(t[0],i):s},Nt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};h.uid=1,h.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Nt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[mt.camelCase(e)]=i;else for(n in e)r[mt.camelCase(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][mt.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){Array.isArray(e)?e=e.map(mt.camelCase):(e=mt.camelCase(e),e=e in n?[e]:e.match($t)||[]),i=e.length;for(;i--;)delete n[e[i]]}(void 0===e||mt.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!mt.isEmptyObject(e)}};var Lt=new h,It=new h,jt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,zt=/[A-Z]/g;mt.extend({hasData:function(t){return It.hasData(t)||Lt.hasData(t)},data:function(t,e,i){return It.access(t,e,i)},removeData:function(t,e){It.remove(t,e)},_data:function(t,e,i){return Lt.access(t,e,i)},_removeData:function(t,e){Lt.remove(t,e)}}),mt.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=It.get(s),1===s.nodeType&&!Lt.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=mt.camelCase(n.slice(5)),f(s,n,r[n])));Lt.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){It.set(this,t)}):Mt(this,function(e){var i;if(s&&void 0===e){if(i=It.get(s,t),void 0!==i)return i;if(i=f(s,t),void 0!==i)return i}else this.each(function(){It.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){It.remove(this,t)})}}),mt.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Lt.get(t,e),i&&(!n||Array.isArray(i)?n=Lt.access(t,e,mt.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=mt.queue(t,e),n=i.length,r=i.shift(),s=mt._queueHooks(t,e),o=function(){mt.dequeue(t,e)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,o,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Lt.get(t,i)||Lt.access(t,i,{empty:mt.Callbacks("once memory").add(function(){Lt.remove(t,[e+"queue",i])})})}}),mt.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?mt.queue(this[0],t):void 0===e?this:this.each(function(){var i=mt.queue(this,t,e);mt._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&mt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){mt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=mt.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=Lt.get(s[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var Ft=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ht=new RegExp("^(?:([+-])=|)("+Ft+")([a-z%]*)$","i"),qt=["Top","Right","Bottom","Left"],Xt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&mt.contains(t.ownerDocument,t)&&"none"===mt.css(t,"display")},Wt=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];r=i.apply(t,n||[]);for(s in e)t.style[s]=o[s];return r},Bt={};mt.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Xt(this)?mt(this).show():mt(this).hide()})}});var Ut=/^(?:checkbox|radio)$/i,Yt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Vt=/^$|\/(?:java|ecma)script/i,Gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Gt.optgroup=Gt.option,Gt.tbody=Gt.tfoot=Gt.colgroup=Gt.caption=Gt.thead,Gt.th=Gt.td;var Qt=/<|&#?\w+;/;!function(){var t=it.createDocumentFragment(),e=t.appendChild(it.createElement("div")),i=it.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),pt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Zt=it.documentElement,Jt=/^key/,Kt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,te=/^([^.]*)(?:\.(.+)|)/;mt.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,c,u,d,h,p,f,m,g=Lt.get(t);if(g)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&mt.find.matchesSelector(Zt,r),i.guid||(i.guid=mt.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return"undefined"!=typeof mt&&mt.event.triggered!==e.type?mt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match($t)||[""],c=e.length;c--;)a=te.exec(e[c])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p&&(d=mt.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=mt.event.special[p]||{},u=mt.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&mt.expr.match.needsContext.test(r),namespace:f.join(".")},s),(h=l[p])||(h=l[p]=[],h.delegateCount=0,d.setup&&d.setup.call(t,n,f,o)!==!1||t.addEventListener&&t.addEventListener(p,o)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),r?h.splice(h.delegateCount++,0,u):h.push(u),mt.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,c,u,d,h,p,f,m,g=Lt.hasData(t)&&Lt.get(t);if(g&&(l=g.events)){for(e=(e||"").match($t)||[""],c=e.length;c--;)if(a=te.exec(e[c])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p){for(d=mt.event.special[p]||{},p=(n?d.delegateType:d.bindType)||p,h=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=h.length;s--;)u=h[s],!r&&m!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(h.splice(s,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(t,u));o&&!h.length&&(d.teardown&&d.teardown.call(t,f,g.handle)!==!1||mt.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)mt.event.remove(t,p+e[c],i,n,!0);mt.isEmptyObject(l)&&Lt.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=mt.event.fix(t),l=new Array(arguments.length),c=(Lt.get(this,"events")||{})[a.type]||[],u=mt.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,a)!==!1){for(o=mt.event.handlers.call(this,a,c),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,n=((mt.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||c.disabled!==!0)){for(s=[],o={},i=0;i<l;i++)n=e[i],r=n.selector+" ",void 0===o[r]&&(o[r]=n.needsContext?mt(r,this).index(c)>-1:mt.find(r,this,null,[c]).length),o[r]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(mt.Event.prototype,t,{enumerable:!0,configurable:!0,get:mt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[mt.expando]?t:new mt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(t){return r(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},mt.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},mt.Event=function(t,e){return this instanceof mt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?T:x,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&mt.extend(this,e),this.timeStamp=t&&t.timeStamp||mt.now(),void(this[mt.expando]=!0)):new mt.Event(t,e)},mt.Event.prototype={constructor:mt.Event,isDefaultPrevented:x,isPropagationStopped:x,isImmediatePropagationStopped:x,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=T,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=T,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=T,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},mt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Jt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Kt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},mt.event.addProp),mt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){mt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===n||mt.contains(n,r))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),mt.fn.extend({on:function(t,e,i,n){return k(this,t,e,i,n)},one:function(t,e,i,n){return k(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,mt(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=x),this.each(function(){mt.event.remove(this,t,i,e)})}});var ee=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ie=/<script|<style|<link/i,ne=/checked\s*(?:[^=]|=\s*.checked.)/i,re=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;mt.extend({htmlPrefilter:function(t){return t.replace(ee,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a=t.cloneNode(!0),l=mt.contains(t.ownerDocument,t);if(!(pt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||mt.isXMLDoc(t)))for(o=_(a),s=_(t),n=0,r=s.length;n<r;n++)O(s[n],o[n]);if(e)if(i)for(s=s||_(t),o=o||_(a),n=0,r=s.length;n<r;n++)A(s[n],o[n]);else A(t,a);return o=_(a,"script"),o.length>0&&y(o,!l&&_(t,"script")),a},cleanData:function(t){for(var e,i,n,r=mt.event.special,s=0;void 0!==(i=t[s]);s++)if(Nt(i)){if(e=i[Lt.expando]){if(e.events)for(n in e.events)r[n]?mt.event.remove(i,n):mt.removeEvent(i,n,e.handle);i[Lt.expando]=void 0}i[It.expando]&&(i[It.expando]=void 0)}}}),mt.fn.extend({detach:function(t){return $(this,t,!0)},remove:function(t){return $(this,t)},text:function(t){return Mt(this,function(t){return void 0===t?mt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=S(this,t);e.appendChild(t)}})},prepend:function(){return D(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=S(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return D(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(mt.cleanData(_(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return mt.clone(this,t,e)})},html:function(t){return Mt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ie.test(t)&&!Gt[(Yt.exec(t)||["",""])[1].toLowerCase()]){t=mt.htmlPrefilter(t);try{for(;i<n;i++)e=this[i]||{},1===e.nodeType&&(mt.cleanData(_(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return D(this,arguments,function(e){var i=this.parentNode;mt.inArray(this,t)<0&&(mt.cleanData(_(this)),i&&i.replaceChild(e,this))},t)}}),mt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){mt.fn[t]=function(t){for(var i,n=[],r=mt(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),mt(r[o])[e](i),ot.apply(n,i.get());return this.pushStack(n)}});var oe=/^margin/,ae=new RegExp("^("+Ft+")(?!px)[a-z%]+$","i"),le=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Zt.appendChild(o);var e=t.getComputedStyle(a);i="1%"!==e.top,s="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,Zt.removeChild(o),a=null}}var i,n,r,s,o=it.createElement("div"),a=it.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",pt.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),mt.extend(pt,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();var ce=/^(none|table(?!-c[ea]).+)/,ue=/^--/,de={position:"absolute",visibility:"hidden",display:"block"},he={letterSpacing:"0",fontWeight:"400"},pe=["Webkit","Moz","ms"],fe=it.createElement("div").style;mt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=R(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=mt.camelCase(e),l=ue.test(e),c=t.style;return l||(e=N(a)),o=mt.cssHooks[e]||mt.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:c[e]:(s=typeof i,"string"===s&&(r=Ht.exec(i))&&r[1]&&(i=m(t,e,r),s="number"),null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(mt.cssNumber[a]?"":"px")),pt.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i)),void 0)}},css:function(t,e,i,n){var r,s,o,a=mt.camelCase(e),l=ue.test(e);return l||(e=N(a)),o=mt.cssHooks[e]||mt.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=R(t,e,n)),"normal"===r&&e in he&&(r=he[e]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),mt.each(["height","width"],function(t,e){mt.cssHooks[e]={get:function(t,i,n){if(i)return!ce.test(mt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?j(t,e,n):Wt(t,de,function(){return j(t,e,n)})},set:function(t,i,n){var r,s=n&&le(t),o=n&&I(t,e,n,"border-box"===mt.css(t,"boxSizing",!1,s),s);return o&&(r=Ht.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=mt.css(t,e)),L(t,i,o)}}}),mt.cssHooks.marginLeft=E(pt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(R(t,"marginLeft"))||t.getBoundingClientRect().left-Wt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),mt.each({margin:"",padding:"",border:"Width"},function(t,e){mt.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+qt[n]+e]=s[n]||s[n-2]||s[0];return r}},oe.test(t)||(mt.cssHooks[t+e].set=L)}),mt.fn.extend({css:function(t,e){return Mt(this,function(t,e,i){var n,r,s={},o=0;if(Array.isArray(e)){for(n=le(t),r=e.length;o<r;o++)s[e[o]]=mt.css(t,e[o],!1,n);return s}return void 0!==i?mt.style(t,e,i):mt.css(t,e)},t,e,arguments.length>1)}}),mt.Tween=z,z.prototype={constructor:z,init:function(t,e,i,n,r,s){this.elem=t,this.prop=i,this.easing=r||mt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(mt.cssNumber[i]?"":"px")},cur:function(){var t=z.propHooks[this.prop];return t&&t.get?t.get(this):z.propHooks._default.get(this)},run:function(t){var e,i=z.propHooks[this.prop];return this.options.duration?this.pos=e=mt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):z.propHooks._default.set(this),this}},z.prototype.init.prototype=z.prototype,z.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=mt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){mt.fx.step[t.prop]?mt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[mt.cssProps[t.prop]]&&!mt.cssHooks[t.prop]?t.elem[t.prop]=t.now:mt.style(t.elem,t.prop,t.now+t.unit)}}},z.propHooks.scrollTop=z.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},mt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},mt.fx=z.prototype.init,mt.fx.step={};var me,ge,ve=/^(?:toggle|show|hide)$/,_e=/queueHooks$/;mt.Animation=mt.extend(U,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return m(i.elem,t,Ht.exec(e),i),i}]},tweener:function(t,e){mt.isFunction(t)?(e=t,t=["*"]):t=t.match($t);for(var i,n=0,r=t.length;n<r;n++)i=t[n],U.tweeners[i]=U.tweeners[i]||[],U.tweeners[i].unshift(e)},prefilters:[W],prefilter:function(t,e){e?U.prefilters.unshift(t):U.prefilters.push(t)}}),mt.speed=function(t,e,i){var n=t&&"object"==typeof t?mt.extend({},t):{complete:i||!i&&e||mt.isFunction(t)&&t,duration:t,easing:i&&e||e&&!mt.isFunction(e)&&e};return mt.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in mt.fx.speeds?n.duration=mt.fx.speeds[n.duration]:n.duration=mt.fx.speeds._default),null!=n.queue&&n.queue!==!0||(n.queue="fx"),n.old=n.complete,n.complete=function(){mt.isFunction(n.old)&&n.old.call(this),n.queue&&mt.dequeue(this,n.queue)},n},mt.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Xt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var r=mt.isEmptyObject(t),s=mt.speed(e,i,n),o=function(){var e=U(this,mt.extend({},t),s);(r||Lt.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",s=mt.timers,o=Lt.get(this);if(r)o[r]&&o[r].stop&&n(o[r]);else for(r in o)o[r]&&o[r].stop&&_e.test(r)&&n(o[r]);
for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(i),e=!1,s.splice(r,1));!e&&i||mt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=Lt.get(this),n=i[t+"queue"],r=i[t+"queueHooks"],s=mt.timers,o=n?n.length:0;for(i.finish=!0,mt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),mt.each(["toggle","show","hide"],function(t,e){var i=mt.fn[e];mt.fn[e]=function(t,n,r){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(q(e,!0),t,n,r)}}),mt.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){mt.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),mt.timers=[],mt.fx.tick=function(){var t,e=0,i=mt.timers;for(me=mt.now();e<i.length;e++)t=i[e],t()||i[e]!==t||i.splice(e--,1);i.length||mt.fx.stop(),me=void 0},mt.fx.timer=function(t){mt.timers.push(t),mt.fx.start()},mt.fx.interval=13,mt.fx.start=function(){ge||(ge=!0,F())},mt.fx.stop=function(){ge=null},mt.fx.speeds={slow:600,fast:200,_default:400},mt.fn.delay=function(e,i){return e=mt.fx?mt.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t=it.createElement("input"),e=it.createElement("select"),i=e.appendChild(it.createElement("option"));t.type="checkbox",pt.checkOn=""!==t.value,pt.optSelected=i.selected,t=it.createElement("input"),t.value="t",t.type="radio",pt.radioValue="t"===t.value}();var ye,we=mt.expr.attrHandle;mt.fn.extend({attr:function(t,e){return Mt(this,mt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){mt.removeAttr(this,t)})}}),mt.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?mt.prop(t,e,i):(1===s&&mt.isXMLDoc(t)||(r=mt.attrHooks[e.toLowerCase()]||(mt.expr.match.bool.test(e)?ye:void 0)),void 0!==i?null===i?void mt.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:(n=mt.find.attr(t,e),null==n?void 0:n))},attrHooks:{type:{set:function(t,e){if(!pt.radioValue&&"radio"===e&&r(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match($t);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),ye={set:function(t,e,i){return e===!1?mt.removeAttr(t,i):t.setAttribute(i,i),i}},mt.each(mt.expr.match.bool.source.match(/\w+/g),function(t,e){var i=we[e]||mt.find.attr;we[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=we[o],we[o]=r,r=null!=i(t,e,n)?o:null,we[o]=s),r}});var Te=/^(?:input|select|textarea|button)$/i,xe=/^(?:a|area)$/i;mt.fn.extend({prop:function(t,e){return Mt(this,mt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[mt.propFix[t]||t]})}}),mt.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&mt.isXMLDoc(t)||(e=mt.propFix[e]||e,r=mt.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=mt.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||xe.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),pt.optSelected||(mt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),mt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){mt.propFix[this.toLowerCase()]=this}),mt.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(mt.isFunction(t))return this.each(function(e){mt(this).addClass(t.call(this,e,V(this)))});if("string"==typeof t&&t)for(e=t.match($t)||[];i=this[l++];)if(r=V(i),n=1===i.nodeType&&" "+Y(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");a=Y(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(mt.isFunction(t))return this.each(function(e){mt(this).removeClass(t.call(this,e,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match($t)||[];i=this[l++];)if(r=V(i),n=1===i.nodeType&&" "+Y(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");a=Y(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):mt.isFunction(t)?this.each(function(i){mt(this).toggleClass(t.call(this,i,V(this),e),e)}):this.each(function(){var e,n,r,s;if("string"===i)for(n=0,r=mt(this),s=t.match($t)||[];e=s[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||(e=V(this),e&&Lt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Lt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+Y(V(i))+" ").indexOf(e)>-1)return!0;return!1}});var be=/\r/g;mt.fn.extend({val:function(t){var e,i,n,r=this[0];{if(arguments.length)return n=mt.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(r=n?t.call(this,i,mt(this).val()):t,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=mt.map(r,function(t){return null==t?"":t+""})),e=mt.valHooks[this.type]||mt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=mt.valHooks[r.type]||mt.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(be,""):null==i?"":i)}}}),mt.extend({valHooks:{option:{get:function(t){var e=mt.find.attr(t,"value");return null!=e?e:Y(mt.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,a="select-one"===t.type,l=a?null:[],c=a?o+1:s.length;for(n=o<0?c:a?o:0;n<c;n++)if(i=s[n],(i.selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!r(i.parentNode,"optgroup"))){if(e=mt(i).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var i,n,r=t.options,s=mt.makeArray(e),o=r.length;o--;)n=r[o],(n.selected=mt.inArray(mt.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),mt.each(["radio","checkbox"],function(){mt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=mt.inArray(mt(t).val(),e)>-1}},pt.checkOn||(mt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ke=/^(?:focusinfocus|focusoutblur)$/;mt.extend(mt.event,{trigger:function(e,i,n,r){var s,o,a,l,c,u,d,h=[n||it],p=ut.call(e,"type")?e.type:e,f=ut.call(e,"namespace")?e.namespace.split("."):[];if(o=a=n=n||it,3!==n.nodeType&&8!==n.nodeType&&!ke.test(p+mt.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),c=p.indexOf(":")<0&&"on"+p,e=e[mt.expando]?e:new mt.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:mt.makeArray(i,[e]),d=mt.event.special[p]||{},r||!d.trigger||d.trigger.apply(n,i)!==!1)){if(!r&&!d.noBubble&&!mt.isWindow(n)){for(l=d.delegateType||p,ke.test(l+p)||(o=o.parentNode);o;o=o.parentNode)h.push(o),a=o;a===(n.ownerDocument||it)&&h.push(a.defaultView||a.parentWindow||t)}for(s=0;(o=h[s++])&&!e.isPropagationStopped();)e.type=s>1?l:d.bindType||p,u=(Lt.get(o,"events")||{})[e.type]&&Lt.get(o,"handle"),u&&u.apply(o,i),u=c&&o[c],u&&u.apply&&Nt(o)&&(e.result=u.apply(o,i),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||d._default&&d._default.apply(h.pop(),i)!==!1||!Nt(n)||c&&mt.isFunction(n[p])&&!mt.isWindow(n)&&(a=n[c],a&&(n[c]=null),mt.event.triggered=p,n[p](),mt.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(t,e,i){var n=mt.extend(new mt.Event,i,{type:t,isSimulated:!0});mt.event.trigger(n,null,e)}}),mt.fn.extend({trigger:function(t,e){return this.each(function(){mt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return mt.event.trigger(t,e,i,!0)}}),mt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){mt.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),mt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),pt.focusin="onfocusin"in t,pt.focusin||mt.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){mt.event.simulate(e,t.target,mt.event.fix(t))};mt.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=Lt.access(n,e);r||n.addEventListener(t,i,!0),Lt.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=Lt.access(n,e)-1;r?Lt.access(n,e,r):(n.removeEventListener(t,i,!0),Lt.remove(n,e))}}});var Se=t.location,Ce=mt.now(),Pe=/\?/;mt.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(n){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||mt.error("Invalid XML: "+e),i};var Ae=/\[\]$/,Oe=/\r?\n/g,De=/^(?:submit|button|image|reset|file)$/i,$e=/^(?:input|select|textarea|keygen)/i;mt.param=function(t,e){var i,n=[],r=function(t,e){var i=mt.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(t)||t.jquery&&!mt.isPlainObject(t))mt.each(t,function(){r(this.name,this.value)});else for(i in t)G(i,t[i],e,r);return n.join("&")},mt.fn.extend({serialize:function(){return mt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=mt.prop(this,"elements");return t?mt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!mt(this).is(":disabled")&&$e.test(this.nodeName)&&!De.test(t)&&(this.checked||!Ut.test(t))}).map(function(t,e){var i=mt(this).val();return null==i?null:Array.isArray(i)?mt.map(i,function(t){return{name:e.name,value:t.replace(Oe,"\r\n")}}):{name:e.name,value:i.replace(Oe,"\r\n")}}).get()}});var Re=/%20/g,Ee=/#.*$/,Me=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ie=/^(?:GET|HEAD)$/,je=/^\/\//,ze={},Fe={},He="*/".concat("*"),qe=it.createElement("a");qe.href=Se.href,mt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:Le.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":He,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":mt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?J(J(t,mt.ajaxSettings),e):J(mt.ajaxSettings,t)},ajaxPrefilter:Q(ze),ajaxTransport:Q(Fe),ajax:function(e,i){function n(e,i,n,a){var c,h,p,w,T,x=i;u||(u=!0,l&&t.clearTimeout(l),r=void 0,o=a||"",b.readyState=e>0?4:0,c=e>=200&&e<300||304===e,n&&(w=K(f,b,n)),w=tt(f,w,b,c),c?(f.ifModified&&(T=b.getResponseHeader("Last-Modified"),T&&(mt.lastModified[s]=T),T=b.getResponseHeader("etag"),T&&(mt.etag[s]=T)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=w.state,h=w.data,p=w.error,c=!p)):(p=x,!e&&x||(x="error",e<0&&(e=0))),b.status=e,b.statusText=(i||x)+"",c?v.resolveWith(m,[h,x,b]):v.rejectWith(m,[b,x,p]),b.statusCode(y),y=void 0,d&&g.trigger(c?"ajaxSuccess":"ajaxError",[b,f,c?h:p]),_.fireWith(m,[b,x]),d&&(g.trigger("ajaxComplete",[b,f]),--mt.active||mt.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var r,s,o,a,l,c,u,d,h,p,f=mt.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?mt(m):mt.event,v=mt.Deferred(),_=mt.Callbacks("once memory"),y=f.statusCode||{},w={},T={},x="canceled",b={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Ne.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=T[t.toLowerCase()]=T[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==u&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)b.always(t[b.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||x;return r&&r.abort(e),n(0,e),this}};if(v.promise(b),f.url=((e||f.url||Se.href)+"").replace(je,Se.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match($t)||[""],null==f.crossDomain){c=it.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=qe.protocol+"//"+qe.host!=c.protocol+"//"+c.host}catch(k){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=mt.param(f.data,f.traditional)),Z(ze,f,i,b),u)return b;d=mt.event&&f.global,d&&0===mt.active++&&mt.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ie.test(f.type),s=f.url.replace(Ee,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Re,"+")):(p=f.url.slice(s.length),f.data&&(s+=(Pe.test(s)?"&":"?")+f.data,delete f.data),f.cache===!1&&(s=s.replace(Me,"$1"),p=(Pe.test(s)?"&":"?")+"_="+Ce++ +p),f.url=s+p),f.ifModified&&(mt.lastModified[s]&&b.setRequestHeader("If-Modified-Since",mt.lastModified[s]),mt.etag[s]&&b.setRequestHeader("If-None-Match",mt.etag[s])),(f.data&&f.hasContent&&f.contentType!==!1||i.contentType)&&b.setRequestHeader("Content-Type",f.contentType),b.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+He+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)b.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(f.beforeSend.call(m,b,f)===!1||u))return b.abort();if(x="abort",_.add(f.complete),b.done(f.success),b.fail(f.error),r=Z(Fe,f,i,b)){if(b.readyState=1,d&&g.trigger("ajaxSend",[b,f]),u)return b;f.async&&f.timeout>0&&(l=t.setTimeout(function(){b.abort("timeout")},f.timeout));try{u=!1,r.send(w,n)}catch(k){if(u)throw k;n(-1,k)}}else n(-1,"No Transport");return b},getJSON:function(t,e,i){return mt.get(t,e,i,"json")},getScript:function(t,e){return mt.get(t,void 0,e,"script")}}),mt.each(["get","post"],function(t,e){mt[e]=function(t,i,n,r){return mt.isFunction(i)&&(r=r||n,n=i,i=void 0),mt.ajax(mt.extend({url:t,type:e,dataType:r,data:i,success:n},mt.isPlainObject(t)&&t))}}),mt._evalUrl=function(t){return mt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},mt.fn.extend({wrapAll:function(t){var e;return this[0]&&(mt.isFunction(t)&&(t=t.call(this[0])),e=mt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return mt.isFunction(t)?this.each(function(e){mt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=mt(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=mt.isFunction(t);return this.each(function(i){mt(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){mt(this).replaceWith(this.childNodes)}),this}}),mt.expr.pseudos.hidden=function(t){return!mt.expr.pseudos.visible(t)},mt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},mt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Xe={0:200,1223:204},We=mt.ajaxSettings.xhr();pt.cors=!!We&&"withCredentials"in We,pt.ajax=We=!!We,mt.ajaxTransport(function(e){var i,n;if(pt.cors||We&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)a.setRequestHeader(o,r[o]);i=function(t){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Xe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(l){if(i)throw l}},abort:function(){i&&i()}}}),mt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),mt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return mt.globalEval(t),t}}}),mt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),mt.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(n,r){e=mt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&r("error"===t.type?404:200,t.type)}),it.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Be=[],Ue=/(=)\?(?=&|$)|\?\?/;mt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Be.pop()||mt.expando+"_"+Ce++;return this[t]=!0,t}}),mt.ajaxPrefilter("json jsonp",function(e,i,n){var r,s,o,a=e.jsonp!==!1&&(Ue.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ue.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=mt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ue,"$1"+r):e.jsonp!==!1&&(e.url+=(Pe.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||mt.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=t[r],t[r]=function(){o=arguments},n.always(function(){void 0===s?mt(t).removeProp(r):t[r]=s,e[r]&&(e.jsonpCallback=i.jsonpCallback,Be.push(r)),o&&mt.isFunction(s)&&s(o[0]),o=s=void 0}),"script"}),pt.createHTMLDocument=function(){var t=it.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),mt.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,r,s;return e||(pt.createHTMLDocument?(e=it.implementation.createHTMLDocument(""),n=e.createElement("base"),n.href=it.location.href,e.head.appendChild(n)):e=it),r=kt.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=w([t],e,s),s&&s.length&&mt(s).remove(),mt.merge([],r.childNodes))},mt.fn.load=function(t,e,i){var n,r,s,o=this,a=t.indexOf(" ");return a>-1&&(n=Y(t.slice(a)),t=t.slice(0,a)),mt.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&mt.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(n?mt("<div>").append(mt.parseHTML(t)).find(n):t)}).always(i&&function(t,e){o.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},mt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){mt.fn[e]=function(t){return this.on(e,t)}}),mt.expr.pseudos.animated=function(t){return mt.grep(mt.timers,function(e){return t===e.elem}).length},mt.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,c,u=mt.css(t,"position"),d=mt(t),h={};"static"===u&&(t.style.position="relative"),a=d.offset(),s=mt.css(t,"top"),l=mt.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1,c?(n=d.position(),o=n.top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),mt.isFunction(e)&&(e=e.call(t,i,mt.extend({},a))),null!=e.top&&(h.top=e.top-a.top+o),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):d.css(h)}},mt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){mt.offset.setOffset(this,t,e)});var e,i,n,r,s=this[0];if(s)return s.getClientRects().length?(n=s.getBoundingClientRect(),e=s.ownerDocument,i=e.documentElement,r=e.defaultView,{top:n.top+r.pageYOffset-i.clientTop,left:n.left+r.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===mt.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),r(t[0],"html")||(n=t.offset()),n={top:n.top+mt.css(t[0],"borderTopWidth",!0),left:n.left+mt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-mt.css(i,"marginTop",!0),left:e.left-n.left-mt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===mt.css(t,"position");)t=t.offsetParent;return t||Zt})}}),mt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;mt.fn[t]=function(n){return Mt(this,function(t,n,r){var s;return mt.isWindow(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r?s?s[e]:t[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r)},t,n,arguments.length)}}),mt.each(["top","left"],function(t,e){mt.cssHooks[e]=E(pt.pixelPosition,function(t,i){if(i)return i=R(t,e),ae.test(i)?mt(t).position()[e]+"px":i})}),mt.each({Height:"height",Width:"width"},function(t,e){mt.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){mt.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||s===!0?"margin":"border");return Mt(this,function(e,i,r){var s;return mt.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?mt.css(e,i,a):mt.style(e,i,r,a)},e,o?r:void 0,o)}})}),mt.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),mt.holdReady=function(t){t?mt.readyWait++:mt.ready(!0)},mt.isArray=Array.isArray,mt.parseJSON=JSON.parse,mt.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return mt});var Ye=t.jQuery,Ve=t.$;return mt.noConflict=function(e){return t.$===mt&&(t.$=Ve),e&&t.jQuery===mt&&(t.jQuery=Ye),mt},e||(t.jQuery=t.$=mt),mt}),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};e=function(){function e(e,n){var r,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(e),appendDots:t(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />')},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=t(e),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,r=t(e).data("slick")||{},s.options=t.extend({},s.defaults,n,r),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,"undefined"!=typeof document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=t.proxy(s.autoPlay,s),s.autoPlayClear=t.proxy(s.autoPlayClear,s),s.autoPlayIterator=t.proxy(s.autoPlayIterator,s),s.changeSlide=t.proxy(s.changeSlide,s),s.clickHandler=t.proxy(s.clickHandler,s),s.selectHandler=t.proxy(s.selectHandler,s),s.setPosition=t.proxy(s.setPosition,s),s.swipeHandler=t.proxy(s.swipeHandler,s),s.dragHandler=t.proxy(s.dragHandler,s),s.keyHandler=t.proxy(s.keyHandler,s),s.instanceUid=i++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}var i=0;return e}(),e.prototype.activateADA=function(){var t=this;t.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,n){var r=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=r.slideCount)return!1;r.unload(),"number"==typeof i?0===i&&0===r.$slides.length?t(e).appendTo(r.$slideTrack):n?t(e).insertBefore(r.$slides.eq(i)):t(e).insertAfter(r.$slides.eq(i)):n===!0?t(e).prependTo(r.$slideTrack):t(e).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),r.$slidesCache=r.$slides,r.reinit()},e.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&t.options.adaptiveHeight===!0&&t.options.vertical===!1){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},e.prototype.animateSlide=function(e,i){var n={},r=this;r.animateHeight(),r.options.rtl===!0&&r.options.vertical===!1&&(e=-e),r.transformsEnabled===!1?r.options.vertical===!1?r.$slideTrack.animate({left:e},r.options.speed,r.options.easing,i):r.$slideTrack.animate({top:e},r.options.speed,r.options.easing,i):r.cssTransitions===!1?(r.options.rtl===!0&&(r.currentLeft=-r.currentLeft),t({animStart:r.currentLeft}).animate({animStart:e},{duration:r.options.speed,easing:r.options.easing,step:function(t){t=Math.ceil(t),r.options.vertical===!1?(n[r.animType]="translate("+t+"px, 0px)",r.$slideTrack.css(n)):(n[r.animType]="translate(0px,"+t+"px)",r.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(r.applyTransition(),e=Math.ceil(e),r.options.vertical===!1?n[r.animType]="translate3d("+e+"px, 0px, 0px)":n[r.animType]="translate3d(0px,"+e+"px, 0px)",r.$slideTrack.css(n),i&&setTimeout(function(){r.disableTransition(),i.call()},r.options.speed))},e.prototype.getNavTarget=function(){var e=this,i=e.options.asNavFor;return i&&null!==i&&(i=t(i).not(e.$slider)),i},e.prototype.asNavFor=function(e){var i=this,n=i.getNavTarget();null!==n&&"object"==typeof n&&n.each(function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},e.prototype.applyTransition=function(t){var e=this,i={};e.options.fade===!1?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,e.options.fade===!1?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){var t=this;t.autoPlayTimer&&clearInterval(t.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(t.options.infinite===!1&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1===0&&(t.direction=1))),t.slideHandler(e))},e.prototype.buildArrows=function(){var e=this;e.options.arrows===!0&&(e.$prevArrow=t(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=t(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),e.options.infinite!==!0&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i,n=this;if(n.options.dots===!0&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(n.options.dotsClass),e=0;e<=n.getDotCount();e+=1)i.append(t("<li />").append(n.options.customPaging.call(this,n,e)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?t('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),e.options.centerMode!==!0&&e.options.swipeToSlide!==!0||(e.options.slidesToScroll=1),t("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.options.draggable===!0&&e.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,n,r,s,o,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),a.options.rows>0){for(o=a.options.slidesPerRow*a.options.rows,r=Math.ceil(s.length/o),t=0;t<r;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=t*o+(e*a.options.slidesPerRow+i);s.get(u)&&c.appendChild(s.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var n,r,s,o=this,a=!1,l=o.$slider.width(),c=window.innerWidth||t(window).width();if("window"===o.respondTo?s=c:"slider"===o.respondTo?s=l:"min"===o.respondTo&&(s=Math.min(c,l)),o.options.responsive&&o.options.responsive.length&&null!==o.options.responsive){r=null;for(n in o.breakpoints)o.breakpoints.hasOwnProperty(n)&&(o.originalSettings.mobileFirst===!1?s<o.breakpoints[n]&&(r=o.breakpoints[n]):s>o.breakpoints[n]&&(r=o.breakpoints[n]));
null!==r?null!==o.activeBreakpoint?(r!==o.activeBreakpoint||i)&&(o.activeBreakpoint=r,"unslick"===o.breakpointSettings[r]?o.unslick(r):(o.options=t.extend({},o.originalSettings,o.breakpointSettings[r]),e===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(e)),a=r):(o.activeBreakpoint=r,"unslick"===o.breakpointSettings[r]?o.unslick(r):(o.options=t.extend({},o.originalSettings,o.breakpointSettings[r]),e===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(e)),a=r):null!==o.activeBreakpoint&&(o.activeBreakpoint=null,o.options=o.originalSettings,e===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(e),a=r),e||a===!1||o.$slider.trigger("breakpoint",[o,a])}},e.prototype.changeSlide=function(e,i){var n,r,s,o=this,a=t(e.currentTarget);switch(a.is("a")&&e.preventDefault(),a.is("li")||(a=a.closest("li")),s=o.slideCount%o.options.slidesToScroll!==0,n=s?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":r=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-r,!1,i);break;case"next":r=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+r,!1,i);break;case"index":var l=0===e.data.index?0:e.data.index||a.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(l),!1,i),a.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i,n=this;if(e=n.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var r in e){if(t<e[r]){t=i;break}i=e[r]}return t},e.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(t("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",t.proxy(e.interrupt,e,!0)).off("mouseleave.slick",t.proxy(e.interrupt,e,!1)),e.options.accessibility===!0&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),e.options.accessibility===!0&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),t(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),e.options.accessibility===!0&&e.$list.off("keydown.slick",e.keyHandler),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().off("click.slick",e.selectHandler),t(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),t(window).off("resize.slick.slick-"+e.instanceUid,e.resize),t("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),t(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},e.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.cleanUpRows=function(){var t,e=this;e.options.rows>0&&(t=e.$slides.children().children(),t.removeAttr("style"),e.$slider.empty().append(t))},e.prototype.clickHandler=function(t){var e=this;e.shouldClick===!1&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),t(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){t(this).attr("style",t(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,e||i.$slider.trigger("destroy",[i])},e.prototype.disableTransition=function(t){var e=this,i={};i[e.transitionType]="",e.options.fade===!1?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.fadeSlide=function(t,e){var i=this;i.cssTransitions===!1?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.fadeSlideOut=function(t){var e=this;e.cssTransitions===!1?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var n=t(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=n.is(":focus"),e.autoPlay())},0)})},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){var t=this;return t.currentSlide},e.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(t.options.infinite===!0)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(t.options.centerMode===!0)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},e.prototype.getLeft=function(t){var e,i,n,r,s=this,o=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),s.options.infinite===!0?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,r=-1,s.options.vertical===!0&&s.options.centerMode===!0&&(2===s.options.slidesToShow?r=-1.5:1===s.options.slidesToShow&&(r=-2)),o=i*s.options.slidesToShow*r),s.slideCount%s.options.slidesToScroll!==0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,o=(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,o=s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,o=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,o=0),s.options.centerMode===!0&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:s.options.centerMode===!0&&s.options.infinite===!0?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:s.options.centerMode===!0&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=s.options.vertical===!1?t*s.slideWidth*-1+s.slideOffset:t*i*-1+o,s.options.variableWidth===!0&&(n=s.slideCount<=s.options.slidesToShow||s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=s.options.rtl===!0?n[0]?(s.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,s.options.centerMode===!0&&(n=s.slideCount<=s.options.slidesToShow||s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=s.options.rtl===!0?n[0]?(s.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,e+=(s.$list.width()-n.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){var e=this;return e.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,r=[];for(e.options.infinite===!1?t=e.slideCount:(i=e.options.slidesToScroll*-1,n=e.options.slidesToScroll*-1,t=2*e.slideCount);i<t;)r.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return r},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,n,r=this;return n=r.options.centerMode===!0?r.slideWidth*Math.floor(r.options.slidesToShow/2):0,r.options.swipeToSlide===!0?(r.$slideTrack.find(".slick-slide").each(function(e,s){if(s.offsetLeft-n+t(s).outerWidth()/2>r.swipeLeft*-1)return i=s,!1}),e=Math.abs(t(i).attr("data-slick-index")-r.currentSlide)||1):r.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){var i=this;i.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){var i=this;t(i.$slider).hasClass("slick-initialized")||(t(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),e&&i.$slider.trigger("init",[i]),i.options.accessibility===!0&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),n=e.getNavigableIndexes().filter(function(t){return t>=0&&t<e.slideCount});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(i){var r=n.indexOf(i);if(t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),r!==-1){var s="slick-slide-control"+e.instanceUid+r;t("#"+s).length&&t(this).attr({"aria-describedby":s})}}),e.$dots.attr("role","tablist").find("li").each(function(r){var s=n[r];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+r,"aria-controls":"slick-slide"+e.instanceUid+s,"aria-label":r+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=e.currentSlide,s=r+e.options.slidesToShow;r<s;r++)e.options.focusOnChange?e.$slides.eq(r).attr({tabindex:"0"}):e.$slides.eq(r).removeAttr("tabindex");e.activateADA()},e.prototype.initArrowEvents=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),t.options.accessibility===!0&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},e.prototype.initDotEvents=function(){var e=this;e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&(t("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),e.options.accessibility===!0&&e.$dots.on("keydown.slick",e.keyHandler)),e.options.dots===!0&&e.options.pauseOnDotsHover===!0&&e.slideCount>e.options.slidesToShow&&t("li",e.$dots).on("mouseenter.slick",t.proxy(e.interrupt,e,!0)).on("mouseleave.slick",t.proxy(e.interrupt,e,!1))},e.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",t.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",t.proxy(e.interrupt,e,!1)))},e.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),t(document).on(e.visibilityChange,t.proxy(e.visibility,e)),e.options.accessibility===!0&&e.$list.on("keydown.slick",e.keyHandler),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),t(window).on("orientationchange.slick.slick-"+e.instanceUid,t.proxy(e.orientationChange,e)),t(window).on("resize.slick.slick-"+e.instanceUid,t.proxy(e.resize,e)),t("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),t(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),t(e.setPosition)},e.prototype.initUI=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},e.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&e.options.accessibility===!0?e.changeSlide({data:{message:e.options.rtl===!0?"next":"previous"}}):39===t.keyCode&&e.options.accessibility===!0&&e.changeSlide({data:{message:e.options.rtl===!0?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),n=t(this).attr("data-srcset"),r=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),r&&e.attr("sizes",r)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,i])})},s.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},s.src=i})}var i,n,r,s,o=this;if(o.options.centerMode===!0?o.options.infinite===!0?(r=o.currentSlide+(o.options.slidesToShow/2+1),s=r+o.options.slidesToShow+2):(r=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),s=2+(o.options.slidesToShow/2+1)+o.currentSlide):(r=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,s=Math.ceil(r+o.options.slidesToShow),o.options.fade===!0&&(r>0&&r--,s<=o.slideCount&&s++)),i=o.$slider.find(".slick-slide").slice(r,s),"anticipated"===o.options.lazyLoad)for(var a=r-1,l=s,c=o.$slider.find(".slick-slide"),u=0;u<o.options.slidesToScroll;u++)a<0&&(a=o.slideCount-1),i=i.add(c.eq(a)),i=i.add(c.eq(l)),a--,l++;e(i),o.slideCount<=o.options.slidesToShow?(n=o.$slider.find(".slick-slide"),e(n)):o.currentSlide>=o.slideCount-o.options.slidesToShow?(n=o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow),e(n)):0===o.currentSlide&&(n=o.$slider.find(".slick-cloned").slice(o.options.slidesToShow*-1),e(n))},e.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){var t=this;t.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){var t=this;t.checkResponsive(),t.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){var t=this;t.autoPlayClear(),t.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},e.prototype.postSlide=function(e){var i=this;if(!i.unslicked&&(i.$slider.trigger("afterChange",[i,e]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),i.options.accessibility===!0&&(i.initADA(),i.options.focusOnChange))){var n=t(i.$slides.get(i.currentSlide));n.attr("tabindex",0).focus()}},e.prototype.prev=e.prototype.slickPrev=function(){var t=this;t.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,n,r,s,o,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),r=i.attr("data-srcset"),s=i.attr("data-sizes")||a.$slider.attr("data-sizes"),o=document.createElement("img"),o.onload=function(){r&&(i.attr("srcset",r),s&&i.attr("sizes",s)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),a.options.adaptiveHeight===!0&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},o.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},o.src=n):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,n,r=this;n=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>n&&(r.currentSlide=n),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),i=r.currentSlide,r.destroy(!0),t.extend(r,r.initials,{currentSlide:i}),r.init(),e||r.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,n,r=this,s=r.options.responsive||null;if("array"===t.type(s)&&s.length){r.respondTo=r.options.respondTo||"window";for(e in s)if(n=r.breakpoints.length-1,s.hasOwnProperty(e)){for(i=s[e].breakpoint;n>=0;)r.breakpoints[n]&&r.breakpoints[n]===i&&r.breakpoints.splice(n,1),n--;r.breakpoints.push(i),r.breakpointSettings[i]=s[e].settings}r.breakpoints.sort(function(t,e){return r.options.mobileFirst?t-e:e-t})}},e.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){var n=this;return"boolean"==typeof t?(e=t,t=e===!0?0:n.slideCount-1):t=e===!0?--t:t,!(n.slideCount<1||t<0||t>n.slideCount-1)&&(n.unload(),i===!0?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,void n.reinit())},e.prototype.setCSS=function(t){var e,i,n=this,r={};n.options.rtl===!0&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",r[n.positionProp]=t,n.transformsEnabled===!1?n.$slideTrack.css(r):(r={},n.cssTransitions===!1?(r[n.animType]="translate("+e+", "+i+")",n.$slideTrack.css(r)):(r[n.animType]="translate3d("+e+", "+i+", 0px)",n.$slideTrack.css(r)))},e.prototype.setDimensions=function(){var t=this;t.options.vertical===!1?t.options.centerMode===!0&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),t.options.centerMode===!0&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),t.options.vertical===!1&&t.options.variableWidth===!1?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):t.options.variableWidth===!0?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();t.options.variableWidth===!1&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(n,r){e=i.slideWidth*n*-1,i.options.rtl===!0?t(r).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(r).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&t.options.adaptiveHeight===!0&&t.options.vertical===!1){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,n,r,s,o=this,a=!1;if("object"===t.type(arguments[0])?(n=arguments[0],a=arguments[1],s="multiple"):"string"===t.type(arguments[0])&&(n=arguments[0],r=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?s="responsive":"undefined"!=typeof arguments[1]&&(s="single")),"single"===s)o.options[n]=r;else if("multiple"===s)t.each(n,function(t,e){o.options[t]=e});else if("responsive"===s)for(i in r)if("array"!==t.type(o.options.responsive))o.options.responsive=[r[i]];else{for(e=o.options.responsive.length-1;e>=0;)o.options.responsive[e].breakpoint===r[i].breakpoint&&o.options.responsive.splice(e,1),e--;o.options.responsive.push(r[i])}a&&(o.unload(),o.reinit())},e.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),t.options.fade===!1?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},e.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=t.options.vertical===!0?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||t.options.useCSS===!0&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&t.animType!==!1&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&t.animType!==!1},e.prototype.setSlideClasses=function(t){var e,i,n,r,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(t).addClass("slick-current"),s.options.centerMode===!0){var o=s.options.slidesToShow%2===0?1:0;e=Math.floor(s.options.slidesToShow/2),s.options.infinite===!0&&(t>=e&&t<=s.slideCount-1-e?s.$slides.slice(t-e+o,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+t,i.slice(n-e+1+o,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):t===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=s.slideCount-s.options.slidesToShow?s.$slides.slice(t,t+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(r=s.slideCount%s.options.slidesToShow,n=s.options.infinite===!0?s.options.slidesToShow+t:t,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-t<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-r),n+r).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,n,r=this;if(r.options.fade===!0&&(r.options.centerMode=!1),r.options.infinite===!0&&r.options.fade===!1&&(i=null,r.slideCount>r.options.slidesToShow)){for(n=r.options.centerMode===!0?r.options.slidesToShow+1:r.options.slidesToShow,e=r.slideCount;e>r.slideCount-n;e-=1)i=e-1,t(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");for(e=0;e<n+r.slideCount;e+=1)i=e,t(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.interrupt=function(t){var e=this;t||e.autoPlay(),e.interrupted=t},e.prototype.selectHandler=function(e){var i=this,n=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),r=parseInt(n.attr("data-slick-index"));return r||(r=0),i.slideCount<=i.options.slidesToShow?void i.slideHandler(r,!1,!0):void i.slideHandler(r)},e.prototype.slideHandler=function(t,e,i){var n,r,s,o,a,l=null,c=this;if(e=e||!1,!(c.animating===!0&&c.options.waitForAnimate===!0||c.options.fade===!0&&c.currentSlide===t))return e===!1&&c.asNavFor(t),n=t,l=c.getLeft(n),o=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?o:c.swipeLeft,c.options.infinite===!1&&c.options.centerMode===!1&&(t<0||t>c.getDotCount()*c.options.slidesToScroll)?void(c.options.fade===!1&&(n=c.currentSlide,i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(o,function(){c.postSlide(n)}):c.postSlide(n))):c.options.infinite===!1&&c.options.centerMode===!0&&(t<0||t>c.slideCount-c.options.slidesToScroll)?void(c.options.fade===!1&&(n=c.currentSlide,i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(o,function(){c.postSlide(n)}):c.postSlide(n))):(c.options.autoplay&&clearInterval(c.autoPlayTimer),r=n<0?c.slideCount%c.options.slidesToScroll!==0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!==0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,r]),s=c.currentSlide,c.currentSlide=r,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=c.getNavTarget(),a=a.slick("getSlick"),a.slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide)),c.updateDots(),c.updateArrows(),c.options.fade===!0?(i!==!0?(c.fadeSlideOut(s),c.fadeSlide(r,function(){c.postSlide(r)})):c.postSlide(r),void c.animateHeight()):void(i!==!0&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(r)}):c.postSlide(r)))},e.prototype.startLoad=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,n,r=this;return t=r.touchObject.startX-r.touchObject.curX,e=r.touchObject.startY-r.touchObject.curY,i=Math.atan2(e,t),n=Math.round(180*i/Math.PI),n<0&&(n=360-Math.abs(n)),n<=45&&n>=0?r.options.rtl===!1?"left":"right":n<=360&&n>=315?r.options.rtl===!1?"left":"right":n>=135&&n<=225?r.options.rtl===!1?"right":"left":r.options.verticalSwiping===!0?n>=35&&n<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(n.touchObject.edgeHit===!0&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},e.prototype.swipeHandler=function(t){var e=this;if(!(e.options.swipe===!1||"ontouchend"in document&&e.options.swipe===!1||e.options.draggable===!1&&t.type.indexOf("mouse")!==-1))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,e.options.verticalSwiping===!0&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,n,r,s,o,a=this;return s=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:t.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),o=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&o>4?(a.scrolling=!0,!1):(a.options.verticalSwiping===!0&&(a.touchObject.swipeLength=o),i=a.swipeDirection(),void 0!==t.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,t.preventDefault()),r=(a.options.rtl===!1?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),a.options.verticalSwiping===!0&&(r=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,a.options.infinite===!1&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),a.options.vertical===!1?a.swipeLeft=e+n*r:a.swipeLeft=e+n*(a.$list.height()/a.listWidth)*r,a.options.verticalSwiping===!0&&(a.swipeLeft=e+n*r),a.options.fade!==!0&&a.options.touchMove!==!1&&(a.animating===!0?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},e.prototype.swipeStart=function(t){var e,i=this;return i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow?(i.touchObject={},!1):(void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,
void(i.dragging=!0))},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},e.prototype.unload=function(){var e=this;t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){var e=this;e.$slider.trigger("unslick",[e,t]),e.destroy()},e.prototype.updateArrows=function(){var t,e=this;t=Math.floor(e.options.slidesToShow/2),e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&e.options.centerMode===!1?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&e.options.centerMode===!0&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){var t=this;t.options.autoplay&&(document[t.hidden]?t.interrupted=!0:t.interrupted=!1)},t.fn.slick=function(){var t,i,n=this,r=arguments[0],s=Array.prototype.slice.call(arguments,1),o=n.length;for(t=0;t<o;t++)if("object"==typeof r||"undefined"==typeof r?n[t].slick=new e(n[t],r):i=n[t].slick[r].apply(n[t].slick,s),"undefined"!=typeof i)return i;return n}}),function(t){"use strict";t.fn.waterwheelCarousel=function(e){function i(){y={itemsContainer:t(v),totalItems:t(v).children().length,containerWidth:t(v).width(),containerHeight:t(v).height(),currentCenterItem:null,previousCenterItem:null,items:[],calculations:[],carouselRotationsLeft:0,currentlyMoving:!1,itemsAnimating:0,currentSpeed:_.speed,intervalTimer:null,currentDirection:"forward",leftItemsCount:0,rightItemsCount:0,performingSetup:!0},y.itemsContainer.children().removeClass(_.activeClassName)}function n(t){clearTimeout(y.autoPlayTimer),t||0===_.autoPlay||(y.autoPlayTimer=setTimeout(function(){g(_.autoPlay>0?"forward":"backward")},Math.abs(_.autoPlay)))}function r(e){var i=y.itemsContainer.find("img"),n=i.length,r=0;return _.preloadImages===!1||0===i.length?void e():void i.each(function(){t(this).bind("load",function(){if(r+=1,r===n)return void e()}),t(this).attr("src",t(this).attr("src")),this.complete&&t(this).trigger("load")})}function s(){y.itemsContainer.children().each(function(){(void 0==t(this).data("original_width")||_.forcedImageWidth>0)&&t(this).data("original_width",t(this).width()),(void 0==t(this).data("original_height")||_.forcedImageHeight>0)&&t(this).data("original_height",t(this).height())})}function o(){_.forcedImageWidth&&_.forcedImageHeight&&y.itemsContainer.children().each(function(){t(this).width(_.forcedImageWidth),t(this).height(_.forcedImageHeight)})}function a(){y.itemsContainer.children().eq(0);y.calculations[0]={distance:0,offset:0,opacity:1};for(var t=_.horizonOffset,e=_.separation,i=1;i<=_.flankingItems+2;i++)i>1&&(t*=_.horizonOffsetMultiplier,e*=_.separationMultiplier),y.calculations[i]={distance:y.calculations[i-1].distance+e,offset:y.calculations[i-1].offset+t,opacity:y.calculations[i-1].opacity*_.opacityMultiplier};_.edgeFadeEnabled?y.calculations[_.flankingItems+1].opacity=0:y.calculations[_.flankingItems+1]={distance:0,offset:0,opacity:0}}function l(){y.items=y.itemsContainer.children();for(var e=0;e<y.totalItems;e++)y.items[e]=t(y.items[e]);0===_.horizon&&("horizontal"===_.orientation?_.horizon=y.containerHeight/2:_.horizon=y.containerWidth/2),y.itemsContainer.css("position","relative").children().each(function(){var e,i;"horizontal"===_.orientation?(e=y.containerWidth/2-t(this).data("original_width")/2,i=_.horizon-t(this).data("original_height")/2):(e=_.horizon-t(this).data("original_width")/2,i=y.containerHeight/2-t(this).data("original_height")/2),t(this).css({left:e,top:i,visibility:"visible",position:"absolute","z-index":0,opacity:0}).data({top:i,left:e,oldPosition:0,currentPosition:0,depth:0,opacity:0}).show()})}function c(){_.startingItem=0===_.startingItem?Math.round(y.totalItems/2):_.startingItem,y.rightItemsCount=Math.ceil((y.totalItems-1)/2),y.leftItemsCount=Math.floor((y.totalItems-1)/2),y.carouselRotationsLeft=1,d(y.items[_.startingItem-1],0),y.items[_.startingItem-1].css("opacity",1);for(var t=_.startingItem-1,e=1;e<=y.rightItemsCount;e++)t<y.totalItems-1?t+=1:t=0,y.items[t].css("opacity",1),d(y.items[t],e);for(var t=_.startingItem-1,e=-1;e>=y.leftItemsCount*-1;e--)t>0?t-=1:t=y.totalItems-1,y.items[t].css("opacity",1),d(y.items[t],e)}function u(t,e){var i=Math.abs(e);if(i<_.flankingItems+1)var n=y.calculations[i];else var n=y.calculations[_.flankingItems+1];var r=Math.pow(_.sizeMultiplier,i),s=r*t.data("original_width"),o=r*t.data("original_height"),a=Math.abs(t.width()-s),l=Math.abs(t.height()-o),c=n.offset,u=n.distance;if(e<0&&(u*=-1),"horizontal"==_.orientation)var d=y.containerWidth/2,h=d+u-s/2,p=_.horizon-c-o/2;else var d=y.containerHeight/2,h=_.horizon-c-s/2,p=d+u-o/2;p-=l/2,h-=a/2;var f;f=0===e?1:n.opacity;var m=_.flankingItems+2-i;t.data("width",s),t.data("height",o),t.data("top",p),t.data("left",h),t.data("oldPosition",t.data("currentPosition")),t.data("depth",m),t.data("opacity",f),t.data("distanceFactor",r)}function d(t,e){Math.abs(e)<=_.flankingItems+1?(u(t,e),y.itemsAnimating++,t.css("z-index",t.data().depth).animate({left:t.data().left,top:t.data().top,opacity:t.data().opacity},y.currentSpeed,_.animationEasing,function(){h(t,e)}),TweenMax.to(t,y.currentSpeed/1e3,{scaleX:t.data("distanceFactor"),scaleY:t.data("distanceFactor"),ease:_.animationEasing})):(t.data("currentPosition",e),0===t.data("oldPosition")&&(t.css({left:t.data().left,top:t.data().top,opacity:t.data().opacity,"z-index":t.data().depth}),TweenMax.to(t,0,{scaleX:t.data("distanceFactor"),scaleY:t.data("distanceFactor")})))}function h(t,e){y.itemsAnimating--,t.data("currentPosition",e),0===e&&(y.currentCenterItem=t),0===y.itemsAnimating&&(y.carouselRotationsLeft-=1,y.currentlyMoving=!1,y.carouselRotationsLeft>0?p(0):(y.currentSpeed=_.speed,y.currentCenterItem.addClass(_.activeClassName),y.performingSetup===!1&&(_.movedToCenter(y.currentCenterItem),_.movedFromCenter(y.previousCenterItem)),y.performingSetup=!1,n()))}function p(e){if(y.currentlyMoving===!1){y.currentCenterItem.removeClass(_.activeClassName),y.currentlyMoving=!0,y.itemsAnimating=0,y.carouselRotationsLeft+=e,_.quickerForFurther===!0&&(e>1&&(y.currentSpeed=_.speed/e),y.currentSpeed=y.currentSpeed<100?100:y.currentSpeed);for(var i=0;i<y.totalItems;i++){var n,r=t(y.items[i]),s=r.data("currentPosition");n="forward"==y.currentDirection?s-1:s+1;var o=n>0?y.rightItemsCount:y.leftItemsCount;Math.abs(n)>o&&(n=s*-1,y.totalItems%2==0&&(n+=1)),d(r,n)}}}function f(){var t=y.currentCenterItem.next();return t.length<=0&&(t=y.currentCenterItem.parent().children().first()),t}function m(){var t=y.currentCenterItem.prev();return t.length<=0&&(t=y.currentCenterItem.parent().children().last()),t}function g(t){y.currentlyMoving===!1&&(y.previousCenterItem=y.currentCenterItem,_.movingFromCenter(y.currentCenterItem),"backward"==t?(_.movingToCenter(m()),y.currentDirection="backward"):"forward"==t&&(_.movingToCenter(f()),y.currentDirection="forward")),p(1)}if(this.length>1)return this.each(function(){t(this).waterwheelCarousel(e)}),this;var v=this,_={},y={};return t(this).children().bind("click",function(){var e=t(this).data().currentPosition;if(0!=_.imageNav&&!(Math.abs(e)>=_.flankingItems+1||y.currentlyMoving)){y.previousCenterItem=y.currentCenterItem,n(!0),_.autoPlay=0;var i=Math.abs(e);0==e?_.clickedCenter(t(this)):(_.movingFromCenter(y.currentCenterItem),_.movingToCenter(t(this)),e<0?(y.currentDirection="backward",p(i)):e>0&&(y.currentDirection="forward",p(i)))}}),t(document).keydown(function(t){if(_.keyboardNav&&(37===t.which&&"horizontal"==_.orientation||38===t.which&&"vertical"==_.orientation?(n(!0),_.autoPlay=0,g("backward")):(39===t.which&&"horizontal"==_.orientation||40===t.which&&"vertical"==_.orientation)&&(n(!0),_.autoPlay=0,g("forward")),_.keyboardNavOverride&&("horizontal"==_.orientation&&(37===t.which||39===t.which)||"vertical"==_.orientation&&(38===t.which||40===t.which))))return t.preventDefault(),!1}),this.reload=function(e){if("object"==typeof e);else;_=t.extend({},t.fn.waterwheelCarousel.defaults,e),i(),y.itemsContainer.children().hide(),o(),r(function(){s(),a(),l(),c()})},this.next=function(){n(!0),_.autoPlay=0,g("forward")},this.prev=function(){n(!0),_.autoPlay=0,g("backward")},this.reload(e),this},t.fn.waterwheelCarousel.defaults={startingItem:1,separation:175,separationMultiplier:.6,horizonOffset:0,horizonOffsetMultiplier:1,sizeMultiplier:.7,opacityMultiplier:.8,horizon:0,flankingItems:3,speed:300,animationEasing:"linear",quickerForFurther:!0,edgeFadeEnabled:!1,linkHandling:2,autoPlay:0,orientation:"horizontal",activeClassName:"carousel-center",keyboardNav:!1,keyboardNavOverride:!0,imageNav:!0,preloadImages:!0,forcedImageWidth:0,forcedImageHeight:0,movingToCenter:t.noop,movedToCenter:t.noop,clickedCenter:t.noop,movingFromCenter:t.noop,movedFromCenter:t.noop}}(jQuery);var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=r.prototype.render},s=1e-10,o=i._internals,a=o.isSelector,l=o.isArray,c=r.prototype=i.to({},.1,{}),u=[];r.version="1.15.1",c.constructor=r,c.kill()._gc=!1,r.killTweensOf=r.killDelayedCallsTo=i.killTweensOf,r.getTweensOf=i.getTweensOf,r.lagSmoothing=i.lagSmoothing,r.ticker=i.ticker,r.render=i.render,c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},c.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._time;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._time>0||s){this._initted=!1,this._init();for(var a,l=1/(1-r),c=this._firstPT;c;)a=c.s+c.c,c.c*=l,c.s=a-c.c,c=c._next}return this},c.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,a,l,c,d,h,p,f=this._dirty?this.totalDuration():this._totalDuration,m=this._time,g=this._totalTime,v=this._cycle,_=this._duration,y=this._rawPrevTime;if(t>=f?(this._totalTime=f,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=_,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete"),0===_&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(0===t||0>y||y===s)&&y!==t&&(i=!0,y>s&&(r="onReverseComplete")),this._rawPrevTime=p=!e||t||y===t?t:s)):1e-7>t?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==g||0===_&&y>0&&y!==s)&&(r="onReverseComplete",n=this._reversed),0>t&&(this._active=!1,0===_&&(this._initted||!this.vars.lazy||i)&&(y>=0&&(i=!0),this._rawPrevTime=p=!e||t||y===t?t:s)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=_+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?this._time=_:0>this._time&&(this._time=0)),this._easeType?(c=this._time/_,d=this._easeType,h=this._easePower,(1===d||3===d&&c>=.5)&&(c=1-c),3===d&&(c*=2),1===h?c*=c:2===h?c*=c*c:3===h?c*=c*c*c:4===h&&(c*=c*c*c*c),this.ratio=1===d?1-c:2===d?c:.5>this._time/_?c/2:1-c/2):this.ratio=this._ease.getRatio(this._time/_)),m===this._time&&!i&&v===this._cycle)return void(g!==this._totalTime&&this._onUpdate&&(e||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||u)));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=m,this._totalTime=g,this._rawPrevTime=y,this._cycle=v,o.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/_):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==m&&t>=0&&(this._active=!0),0===g&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0!==this._totalTime||0===_)&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||u))),a=this._firstPT;a;)a.f?a.t[a.p](a.c*this.ratio+a.s):a.t[a.p]=a.c*this.ratio+a.s,a=a._next;this._onUpdate&&(0>t&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==g||n)&&this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||u)),this._cycle!==v&&(e||this._gc||this.vars.onRepeat&&this.vars.onRepeat.apply(this.vars.onRepeatScope||this,this.vars.onRepeatParams||u)),r&&(!this._gc||i)&&(0>t&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this.vars[r].apply(this.vars[r+"Scope"]||this,this.vars[r+"Params"]||u),0===_&&this._rawPrevTime===s&&p!==s&&(this._rawPrevTime=0))},r.to=function(t,e,i){return new r(t,e,i)},r.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new r(t,e,i)},r.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new r(t,e,n)},r.staggerTo=r.allTo=function(t,e,s,o,c,d,h){o=o||0;var p,f,m,g,v=s.delay||0,_=[],y=function(){s.onComplete&&s.onComplete.apply(s.onCompleteScope||this,arguments),c.apply(h||this,d||u)};for(l(t)||("string"==typeof t&&(t=i.selector(t)||t),a(t)&&(t=n(t))),t=t||[],0>o&&(t=n(t),t.reverse(),o*=-1),p=t.length-1,m=0;p>=m;m++){f={};for(g in s)f[g]=s[g];f.delay=v,m===p&&c&&(f.onComplete=y),_[m]=new r(t[m],e,f),v+=o}return _},r.staggerFrom=r.allFrom=function(t,e,i,n,s,o,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,r.staggerTo(t,e,i,n,s,o,a)},r.staggerFromTo=r.allFromTo=function(t,e,i,n,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,r.staggerTo(t,e,n,s,o,a,l)},r.delayedCall=function(t,e,i,n,s){return new r(e,0,{delay:t,onComplete:e,onCompleteParams:i,onCompleteScope:n,onReverseComplete:e,onReverseCompleteParams:i,onReverseCompleteScope:n,immediateRender:!1,useFrames:s,overwrite:0})},r.set=function(t,e){return new r(t,0,e)},r.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var d=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(d(s,e)),r=n.length),s=s._next;return n},h=r.getAllTweens=function(e){return d(t._rootTimeline,e).concat(d(t._rootFramesTimeline,e))};r.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,o,a,l=h(0!=r),c=l.length,u=i&&n&&r;for(a=0;c>a;a++)o=l[a],(u||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},r.killChildTweensOf=function(t,e){if(null!=t){var s,c,u,d,h,p=o.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),a(t)&&(t=n(t)),l(t))for(d=t.length;--d>-1;)r.killChildTweensOf(t[d],e);else{s=[];for(u in p)for(c=p[u].target.parentNode;c;)c===t&&(s=s.concat(p[u].tweens)),c=c.parentNode;for(h=s.length,d=0;h>d;d++)e&&s[d].totalTime(s[d].totalDuration()),s[d]._enabled(!1,!1)}}};var p=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,o,a=h(r),l=i&&n&&r,c=a.length;--c>-1;)o=a[c],(l||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&o.paused(t)};return r.pauseAll=function(t,e,i){p(!0,t,e,i)},r.resumeAll=function(t,e,i){p(!1,t,e,i)},r.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||s,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},c.progress=function(t){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),!1):this._time/this.duration()},c.totalProgress=function(t){return arguments.length?this.totalTime(this.totalDuration()*t,!1):this._totalTime/this.totalDuration()},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},c.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},r},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],l(i)&&-1!==i.join("").indexOf("{self}")&&(r[n]=this._swapSelfInParams(i));l(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},r=1e-10,s=i._internals,o=n._internals={},a=s.isSelector,l=s.isArray,c=s.lazyTweens,u=s.lazyRender,d=[],h=_gsScope._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},f=o.pauseCallback=function(t,e,i,n){var r=t._timeline,s=r._totalTime;!e&&this._forcingPlayhead||r._rawPrevTime===t._startTime||(r.pause(t._startTime),e&&e.apply(n||r,i||d),this._forcingPlayhead&&r.seek(s))},m=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},g=n.prototype=new e;return n.version="1.15.1",g.constructor=n,g.kill()._gc=g._forcingPlayhead=!1,g.to=function(t,e,n,r){var s=n.repeat&&h.TweenMax||i;return e?this.add(new s(t,e,n),r):this.set(t,n,r)},g.from=function(t,e,n,r){return this.add((n.repeat&&h.TweenMax||i).from(t,e,n),r)},g.fromTo=function(t,e,n,r,s){var o=r.repeat&&h.TweenMax||i;return e?this.add(o.fromTo(t,e,n,r),s):this.set(t,r,s)},g.staggerTo=function(t,e,r,s,o,l,c,u){var d,h=new n({onComplete:l,onCompleteParams:c,onCompleteScope:u,smoothChildTiming:this.smoothChildTiming});for("string"==typeof t&&(t=i.selector(t)||t),t=t||[],a(t)&&(t=m(t)),s=s||0,0>s&&(t=m(t),t.reverse(),s*=-1),d=0;t.length>d;d++)r.startAt&&(r.startAt=p(r.startAt)),h.to(t[d],e,p(r),d*s);return this.add(h,o)},g.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},g.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},g.call=function(t,e,n,r){return this.add(i.delayedCall(0,t,e,n),r)},g.set=function(t,e,n){return n=this._parseTimeOrLabel(n,0,!0),null==e.immediateRender&&(e.immediateRender=n===this._time&&!this._paused),this.add(new i(t,0,e),n)},n.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var r,s,o=new n(t),a=o._timeline;for(null==e&&(e=!0),a._remove(o,!0),o._startTime=0,o._rawPrevTime=o._time=o._totalTime=a._time,r=a._first;r;)s=r._next,e&&r instanceof i&&r.target===r.vars.onComplete||o.add(r,r._startTime-r._delay),r=s;return a.add(o,0),o},g.add=function(r,s,o,a){var c,u,d,h,p,f;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,r)),!(r instanceof t)){if(r instanceof Array||r&&r.push&&l(r)){for(o=o||"normal",a=a||0,c=s,u=r.length,d=0;u>d;d++)l(h=r[d])&&(h=new n({tweens:h})),this.add(h,c),"string"!=typeof h&&"function"!=typeof h&&("sequence"===o?c=h._startTime+h.totalDuration()/h._timeScale:"start"===o&&(h._startTime-=h.delay())),c+=a;return this._uncache(!0)}if("string"==typeof r)return this.addLabel(r,s);if("function"!=typeof r)throw"Cannot add "+r+" into the timeline; it is not a tween, timeline, function, or string.";r=i.delayedCall(0,r)}if(e.prototype.add.call(this,r,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,f=p.rawTime()>r._startTime;p._timeline;)f&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},g.remove=function(e){if(e instanceof t)return this._remove(e,!1);if(e instanceof Array||e&&e.push&&l(e)){for(var i=e.length;--i>-1;)this.remove(e[i]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},g._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},g.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},g.insert=g.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},g.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},g.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},g.addPause=function(t,e,n,r){var s=i.delayedCall(0,f,["{self}",e,n,r],this);return s.data="isPause",this.add(s,t)},g.removeLabel=function(t){return delete this._labels[t],this},g.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},g._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&l(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),-1===s)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},g.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},g.stop=function(){return this.paused(!0)},g.gotoAndPlay=function(t,e){return this.play(t,e)},g.gotoAndStop=function(t,e){return this.pause(t,e)},g.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,s,o,a,l,h=this._dirty?this.totalDuration():this._totalDuration,p=this._time,f=this._startTime,m=this._timeScale,g=this._paused;if(t>=h?(this._totalTime=this._time=h,this._reversed||this._hasPausedChild()||(s=!0,a="onComplete",0===this._duration&&(0===t||0>this._rawPrevTime||this._rawPrevTime===r)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>r&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:r,t=h+1e-4):1e-7>t?(this._totalTime=this._time=0,(0!==p||0===this._duration&&this._rawPrevTime!==r&&(this._rawPrevTime>0||0>t&&this._rawPrevTime>=0))&&(a="onReverseComplete",s=this._reversed),0>t?(this._active=!1,this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t):(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:r,t=0,this._initted||(l=!0))):this._totalTime=this._time=this._rawPrevTime=t,this._time!==p&&this._first||i||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==p&&t>0&&(this._active=!0),0===p&&this.vars.onStart&&0!==this._time&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||d)),this._time>=p)for(n=this._first;n&&(o=n._next,!this._paused||g);)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,!this._paused||g);)(n._active||p>=n._startTime&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;this._onUpdate&&(e||(c.length&&u(),this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||d))),a&&(this._gc||(f===this._startTime||m!==this._timeScale)&&(0===this._time||h>=this.totalDuration())&&(s&&(c.length&&u(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this.vars[a].apply(this.vars[a+"Scope"]||this,this.vars[a+"Params"]||d)))}},g._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof n&&t._hasPausedChild())return!0;t=t._next}return!1},g.getChildren=function(t,e,n,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)r>o._startTime||(o instanceof i?e!==!1&&(s[a++]=o):(n!==!1&&(s[a++]=o),t!==!1&&(s=s.concat(o.getChildren(!0,e,n)),a=s.length))),o=o._next;return s},g.getTweensOf=function(t,e){var n,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),n=i.getTweensOf(t),r=n.length;--r>-1;)(n[r].timeline===this||e&&this._contains(n[r]))&&(o[a++]=n[r]);return s&&this._enabled(!1,!0),o},g.recent=function(){return this._recent},g._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},g.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},g._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},g.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},g.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},g._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},g.totalTime=function(){this._forcingPlayhead=!0;var e=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,e},g.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},g.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,0>r._startTime&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return 0!==this.totalDuration()&&0!==t&&this.timeScale(this._totalDuration/t),this},g.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},g.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},n},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,i){var n=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},r=1e-10,s=[],o=e._internals,a=o.lazyTweens,l=o.lazyRender,c=new i(null,null,1,0),u=n.prototype=new t;return u.constructor=n,u.kill()._gc=!1,n.version="1.15.1",u.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},u.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},u.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},u.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},u.tweenTo=function(t,i){i=i||{};var n,r,o,a={ease:c,useFrames:this.usesFrames(),immediateRender:!1};for(r in i)a[r]=i[r];return a.time=this._parseTimeOrLabel(t),n=Math.abs(Number(a.time)-this._time)/this._timeScale||.001,o=new e(this,n,a),a.onStart=function(){o.target.paused(!0),o.vars.time!==o.target.time()&&n===o.duration()&&o.duration(Math.abs(o.vars.time-o.target.time())/o.target._timeScale),i.onStart&&i.onStart.apply(i.onStartScope||o,i.onStartParams||s)},o},u.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],onCompleteScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},u.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,o,c,u,d,h,p=this._dirty?this.totalDuration():this._totalDuration,f=this._duration,m=this._time,g=this._totalTime,v=this._startTime,_=this._timeScale,y=this._rawPrevTime,w=this._paused,T=this._cycle;if(t>=p?(this._locked||(this._totalTime=p,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(o=!0,u="onComplete",0===this._duration&&(0===t||0>y||y===r)&&y!==t&&this._first&&(d=!0,y>r&&(u="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:r,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=f,t=f+1e-4)):1e-7>t?(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==m||0===f&&y!==r&&(y>0||0>t&&y>=0)&&!this._locked)&&(u="onReverseComplete",o=this._reversed),0>t?(this._active=!1,y>=0&&this._first&&(d=!0),this._rawPrevTime=t):(this._rawPrevTime=f||!e||t||this._rawPrevTime===t?t:r,
t=0,this._initted||(d=!0))):(0===f&&0>y&&(d=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(h=f+this._repeatDelay,this._cycle=this._totalTime/h>>0,0!==this._cycle&&this._cycle===this._totalTime/h&&this._cycle--,this._time=this._totalTime-this._cycle*h,this._yoyo&&0!==(1&this._cycle)&&(this._time=f-this._time),this._time>f?(this._time=f,t=f+1e-4):0>this._time?this._time=t=0:t=this._time))),this._cycle!==T&&!this._locked){var x=this._yoyo&&0!==(1&T),b=x===(this._yoyo&&0!==(1&this._cycle)),k=this._totalTime,S=this._cycle,C=this._rawPrevTime,P=this._time;if(this._totalTime=T*f,T>this._cycle?x=!x:this._totalTime+=f,this._time=m,this._rawPrevTime=0===f?y-1e-4:y,this._cycle=T,this._locked=!0,m=x?0:f,this.render(m,e,0===f),e||this._gc||this.vars.onRepeat&&this.vars.onRepeat.apply(this.vars.onRepeatScope||this,this.vars.onRepeatParams||s),b&&(m=x?f+1e-4:-1e-4,this.render(m,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=P,this._totalTime=k,this._cycle=S,this._rawPrevTime=C}if(!(this._time!==m&&this._first||i||d))return void(g!==this._totalTime&&this._onUpdate&&(e||this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||s)));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==g&&t>0&&(this._active=!0),0===g&&this.vars.onStart&&0!==this._totalTime&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||s)),this._time>=m)for(n=this._first;n&&(c=n._next,!this._paused||w);)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=c;else for(n=this._last;n&&(c=n._prev,!this._paused||w);)(n._active||m>=n._startTime&&!n._paused&&!n._gc)&&(n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=c;this._onUpdate&&(e||(a.length&&l(),this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||s))),u&&(this._locked||this._gc||(v===this._startTime||_!==this._timeScale)&&(0===this._time||p>=this.totalDuration())&&(o&&(a.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[u]&&this.vars[u].apply(this.vars[u+"Scope"]||this,this.vars[u+"Params"]||s)))},u.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;l>n;n++)r=o[n],r.isActive()&&(s[a++]=r);return s},u.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;n>e;e++)if(i[e].time>t)return i[e].name;return null},u.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(t>e[i].time)return e[i].name;return null},u.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.totalDuration=function(e){return arguments.length?-1===this._repeat?this:this.duration((e-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},u.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},n},!0),function(){var t=180/Math.PI,e=[],i=[],n=[],r={},s=_gsScope._gsDefine.globals,o=function(t,e,i,n){this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},a=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",l=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,c=(e+i)/2,u=(i+n)/2,d=(l+c)/2,h=(c+u)/2,p=(h-d)/8;return r.b=l+(t-l)/4,s.b=d+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(d+h)/2,o.b=h-p,a.b=u+(n-u)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},c=function(t,r,s,o,a){var c,u,d,h,p,f,m,g,v,_,y,w,T,x=t.length-1,b=0,k=t[0].a;for(c=0;x>c;c++)p=t[b],u=p.a,d=p.d,h=t[b+1].d,a?(y=e[c],w=i[c],T=.25*(w+y)*r/(o?.5:n[c]||.5),f=d-(d-u)*(o?.5*r:0!==y?T/y:0),m=d+(h-d)*(o?.5*r:0!==w?T/w:0),g=d-(f+((m-f)*(3*y/(y+w)+.5)/4||0))):(f=d-.5*(d-u)*r,m=d+.5*(h-d)*r,g=d-(f+m)/2),f+=g,m+=g,p.c=v=f,p.b=0!==c?k:k=p.a+.6*(p.c-p.a),p.da=d-u,p.ca=v-u,p.ba=k-u,s?(_=l(u,k,v,d),t.splice(b,1,_[0],_[1],_[2],_[3]),b+=4):b++,k=m;p=t[b],p.b=k,p.c=k+.4*(p.d-k),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=k-p.a,s&&(_=l(p.a,k,p.c,p.d),t.splice(b,1,_[0],_[1],_[2],_[3]))},u=function(t,n,r,s){var a,l,c,u,d,h,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(h=t[l][n])&&"="===h.charAt(1)&&(t[l][n]=s[n]+Number(h.charAt(0)+h.substr(2)));if(a=t.length-2,0>a)return p[0]=new o(t[0][n],0,0,t[-1>a?0:1][n]),p;for(l=0;a>l;l++)c=t[l][n],u=t[l+1][n],p[l]=new o(c,0,0,u),r&&(d=t[l+2][n],e[l]=(e[l]||0)+(u-c)*(u-c),i[l]=(i[l]||0)+(d-u)*(d-u));return p[l]=new o(t[l][n],0,0,t[l+1][n]),p},d=function(t,s,o,l,d,h){var p,f,m,g,v,_,y,w,T={},x=[],b=h||t[0];d="string"==typeof d?","+d+",":a,null==s&&(s=1);for(f in t[0])x.push(f);if(t.length>1){for(w=t[t.length-1],y=!0,p=x.length;--p>-1;)if(f=x[p],Math.abs(b[f]-w[f])>.05){y=!1;break}y&&(t=t.concat(),h&&t.unshift(h),t.push(t[1]),h=t[t.length-3])}for(e.length=i.length=n.length=0,p=x.length;--p>-1;)f=x[p],r[f]=-1!==d.indexOf(","+f+","),T[f]=u(t,f,r[f],h);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),i[p]=Math.sqrt(i[p]);if(!l){for(p=x.length;--p>-1;)if(r[f])for(m=T[x[p]],_=m.length-1,g=0;_>g;g++)v=m[g+1].da/i[g]+m[g].da/e[g],n[g]=(n[g]||0)+v*v;for(p=n.length;--p>-1;)n[p]=Math.sqrt(n[p])}for(p=x.length,g=o?4:1;--p>-1;)f=x[p],m=T[f],c(m,s,o,l,r[f]),y&&(m.splice(0,g),m.splice(m.length-g,g));return T},h=function(t,e,i){e=e||"soft";var n,r,s,a,l,c,u,d,h,p,f,m={},g="cubic"===e?3:2,v="soft"===e,_=[];if(v&&i&&(t=[i].concat(t)),null==t||g+1>t.length)throw"invalid Bezier data";for(h in t[0])_.push(h);for(c=_.length;--c>-1;){for(h=_[c],m[h]=l=[],p=0,d=t.length,u=0;d>u;u++)n=null==i?t[u][h]:"string"==typeof(f=t[u][h])&&"="===f.charAt(1)?i[h]+Number(f.charAt(0)+f.substr(2)):Number(f),v&&u>1&&d-1>u&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(d=p-g+1,p=0,u=0;d>u;u+=g)n=l[u],r=l[u+1],s=l[u+2],a=2===g?0:l[u+3],l[p++]=f=3===g?new o(n,r,s,a):new o(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return m},p=function(t,e,i){for(var n,r,s,o,a,l,c,u,d,h,p,f=1/i,m=t.length;--m>-1;)for(h=t[m],s=h.a,o=h.d-s,a=h.c-s,l=h.b-s,n=r=0,u=1;i>=u;u++)c=f*u,d=1-c,n=r-(r=(c*c*o+3*d*(c*a+d*l))*c),p=m*i+u-1,e[p]=(e[p]||0)+n*n},f=function(t,e){e=e>>0||6;var i,n,r,s,o=[],a=[],l=0,c=0,u=e-1,d=[],h=[];for(i in t)p(t[i],o,e);for(r=o.length,n=0;r>n;n++)l+=Math.sqrt(o[n]),s=n%e,h[s]=l,s===u&&(c+=l,s=n/e>>0,d[s]=h,a[s]=c,l=0,h=[]);return{length:c,lengths:a,segments:d}},m=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.4",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._round={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],c={},u=l[0],p=e.autoRotate||i.vars.orientToBezier;this._autoRotate=p?p instanceof Array?p:[["x","y","rotation",p===!0?0:Number(p)||0]]:null;for(n in u)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],c[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||c[n]!==l[0][n]&&(a=c);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?d(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):h(l,e.type,c),this._segCount=this._beziers[n].length,this._timeRes){var m=f(this._beziers,this._timeRes);this._length=m.length,this._lengths=m.lengths,this._segments=m.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(p=this._autoRotate)for(this._initialRotations=[],p[0]instanceof Array||(this._autoRotate=p=[p]),s=p.length;--s>-1;){for(o=0;3>o;o++)n=p[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=p[s][2],this._initialRotations[s]=this._func[n]?this._func[n].call(this._target):this._target[n]}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,o,a,l,c,u,d,h=this._segCount,p=this._func,f=this._target,m=e!==this._startRatio;if(this._timeRes){if(u=this._lengths,d=this._curSeg,e*=this._length,r=this._li,e>this._l2&&h-1>r){for(c=h-1;c>r&&e>=(this._l2=u[++r]););this._l1=u[r-1],this._li=r,this._curSeg=d=this._segments[r],this._s2=d[this._s1=this._si=0]}else if(this._l1>e&&r>0){for(;r>0&&(this._l1=u[--r])>=e;);0===r&&this._l1>e?this._l1=0:r++,this._l2=u[r],this._li=r,this._curSeg=d=this._segments[r],this._s1=d[(this._si=d.length-1)-1]||0,this._s2=d[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&d.length-1>r){for(c=d.length-1;c>r&&e>=(this._s2=d[++r]););this._s1=d[r-1],this._si=r}else if(this._s1>e&&r>0){for(;r>0&&(this._s1=d[--r])>=e;);0===r&&this._s1>e?this._s1=0:r++,this._s2=d[r],this._si=r}a=(r+(e-this._s1)/(this._s2-this._s1))*this._prec}else i=0>e?0:e>=1?h-1:h*e>>0,a=(e-i*(1/h))*h;for(n=1-a,r=this._props.length;--r>-1;)s=this._props[r],o=this._beziers[s][i],l=(a*a*o.da+3*n*(a*o.ca+n*o.ba))*a+o.a,this._round[s]&&(l=Math.round(l)),p[s]?f[s](l):f[s]=l;if(this._autoRotate){var g,v,_,y,w,T,x,b=this._autoRotate;for(r=b.length;--r>-1;)s=b[r][2],T=b[r][3]||0,x=b[r][4]===!0?1:t,o=this._beziers[b[r][0]],g=this._beziers[b[r][1]],o&&g&&(o=o[i],g=g[i],v=o.a+(o.b-o.a)*a,y=o.b+(o.c-o.b)*a,v+=(y-v)*a,y+=(o.c+(o.d-o.c)*a-y)*a,_=g.a+(g.b-g.a)*a,w=g.b+(g.c-g.b)*a,_+=(w-_)*a,w+=(g.c+(g.d-g.c)*a-w)*a,l=m?Math.atan2(w-_,y-v)*x+T:this._initialRotations[r],p[s]?f[s](l):f[s]=l)}}}),g=m.prototype;m.bezierThrough=d,m.cubicToQuadratic=l,m._autoCSS=!0,m.quadraticToCubic=function(t,e,i){return new o(t,(2*e+t)/3,(2*e+i)/3,i)},m._cssRegister=function(){var t=s.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new m;var c,u,d,h=e.values,p=h.length-1,f=[],g={};if(0>p)return a;for(c=0;p>=c;c++)d=i(t,h[c],o,a,l,p!==c),f[c]=d.end;for(u in e)g[u]=e[u];return g.values=f,a=new r(t,"bezier",0,0,d.pt,2),a.data=d,a.plugin=l,a.setRatio=n,0===g.autoRotate&&(g.autoRotate=!0),!g.autoRotate||g.autoRotate instanceof Array||(c=g.autoRotate===!0?0:Number(g.autoRotate),g.autoRotate=null!=d.end.left?[["left","top","rotation",c,!1]]:null!=d.end.x&&[["x","y","rotation",c,!1]]),g.autoRotate&&(o._transform||o._enableTransforms(!1),d.autoRotate=o._target._gsTransform),l._onInitTween(d.proxy,g,o._tween),a}})}},g._roundProps=function(t,e){for(var i=this._overwriteProps,n=i.length;--n>-1;)(t[i[n]]||t.bezier||t.bezierThrough)&&(this._round[i[n]]=e)},g._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);return this._super._kill.call(this,t)}}(),_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,n,r,s,o=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=o.prototype.setRatio},a=_gsScope._gsDefine.globals,l={},c=o.prototype=new t("css");c.constructor=o,o.version="1.15.1",o.API=2,o.defaultTransformPerspective=0,o.defaultSkewType="compensated",c="px",o.suffixMap={top:c,right:c,bottom:c,left:c,width:c,height:c,fontSize:c,padding:c,margin:c,perspective:c,lineHeight:""};var u,d,h,p,f,m,g=/(?:\d|\-\d|\.\d|\-\.\d)+/g,v=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,_=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,y=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,w=/(?:\d|\-|\+|=|#|\.)*/g,T=/opacity *= *([^)]*)/i,x=/opacity:([^;]*)/i,b=/alpha\(opacity *=.+?\)/i,k=/^(rgb|hsl)/,S=/([A-Z])/g,C=/-([a-z])/gi,P=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,A=function(t,e){return e.toUpperCase()},O=/(?:Left|Right|Width)/i,D=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,$=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,R=/,(?=[^\)]*(?:\(|$))/gi,E=Math.PI/180,M=180/Math.PI,N={},L=document,I=function(t){return L.createElementNS?L.createElementNS("http://www.w3.org/1999/xhtml",t):L.createElement(t)},j=I("div"),z=I("img"),F=o._internals={_specialProps:l},H=navigator.userAgent,q=function(){var t=H.indexOf("Android"),e=I("a");return h=-1!==H.indexOf("Safari")&&-1===H.indexOf("Chrome")&&(-1===t||Number(H.substr(t+8,1))>3),f=h&&6>Number(H.substr(H.indexOf("Version/")+8,1)),p=-1!==H.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(H)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(H))&&(m=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),X=function(t){return T.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},W=function(t){window.console&&console.log(t)},B="",U="",Y=function(t,e){e=e||j;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(U=3===n?"ms":i[n],B="-"+U.toLowerCase()+"-",U+t):null},V=L.defaultView?L.defaultView.getComputedStyle:function(){},G=o.getStyle=function(t,e,i,n,r){var s;return q||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||V(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(S,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):X(t)},Q=F.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var a,l,c,u=O.test(i),d=t,h=j.style,p=0>n;if(p&&(n=-n),"%"===r&&-1!==i.indexOf("border"))a=n/100*(u?t.clientWidth:t.clientHeight);else{if(h.cssText="border:0 solid red;position:"+G(t,"position")+";line-height:0;","%"!==r&&d.appendChild)h[u?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(d=t.parentNode||L.body,l=d._gsCache,c=e.ticker.frame,l&&u&&l.time===c)return l.width*n/100;h[u?"width":"height"]=n+r}d.appendChild(j),a=parseFloat(j[u?"offsetWidth":"offsetHeight"]),d.removeChild(j),u&&"%"===r&&o.cacheWidths!==!1&&(l=d._gsCache=d._gsCache||{},l.time=c,l.width=100*(a/n)),0!==a||s||(a=Q(t,i,n,r,!0))}return p?-a:a},Z=F.calculateOffset=function(t,e,i){if("absolute"!==G(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=G(t,"margin"+n,i);return t["offset"+n]-(Q(t,e,parseFloat(r),r.replace(w,""))||0)},J=function(t,e){var i,n,r={};if(e=e||V(t,null))for(i in e)(-1===i.indexOf("Transform")||xt===i)&&(r[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===r[i]&&(r[i.replace(C,A)]=e[i]);return q||(r.opacity=X(t)),n=Rt(t,e,!1),r.rotation=n.rotation,r.skewX=n.skewX,r.scaleX=n.scaleX,r.scaleY=n.scaleY,r.x=n.x,r.y=n.y,St&&(r.z=n.z,r.rotationX=n.rotationX,r.rotationY=n.rotationY,r.scaleZ=n.scaleZ),r.filters&&delete r.filters,r},K=function(t,e,i,n,r){var s,o,a,l={},c=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&-1===o.indexOf("Origin")&&("number"==typeof s||"string"==typeof s)&&(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(y,"")?s:0:Z(t,o),void 0!==c[o]&&(a=new pt(c,o,c[o],a)));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},tt={width:["Left","Right"],height:["Top","Bottom"]},et=["marginLeft","marginRight","marginTop","marginBottom"],it=function(t,e,i){var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=tt[e],s=r.length;for(i=i||V(t,null);--s>-1;)n-=parseFloat(G(t,"padding"+r[s],i,!0))||0,n-=parseFloat(G(t,"border"+r[s]+"Width",i,!0))||0;return n},nt=function(t,e){(null==t||""===t||"auto"===t||"auto auto"===t)&&(t="0 0");var i=t.split(" "),n=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":i[0],r=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":i[1];return null==r?r="center"===n?"50%":"0":"center"===r&&(r="50%"),("center"===n||isNaN(parseFloat(n))&&-1===(n+"").indexOf("="))&&(n="50%"),e&&(e.oxp=-1!==n.indexOf("%"),e.oyp=-1!==r.indexOf("%"),e.oxr="="===n.charAt(1),e.oyr="="===r.charAt(1),e.ox=parseFloat(n.replace(y,"")),e.oy=parseFloat(r.replace(y,""))),n+" "+r+(i.length>2?" "+i[2]:"")},rt=function(t,e){return"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)},st=function(t,e){return null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)},ot=function(t,e,i,n){var r,s,o,a,l,c=1e-6;return null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(-1===t.indexOf("rad")?1:M)-(l?0:e),s.length&&(n&&(n[i]=e+o),-1!==t.indexOf("short")&&(o%=r,o!==o%(r/2)&&(o=0>o?o+r:o-r)),-1!==t.indexOf("_cw")&&0>o?o=(o+9999999999*r)%r-(0|o/r)*r:-1!==t.indexOf("ccw")&&o>0&&(o=(o-9999999999*r)%r-(0|o/r)*r)),a=e+o),c>a&&a>-c&&(a=0),a},at={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},lt=function(t,e,i){return t=0>t?t+1:t>1?t-1:t,0|255*(1>6*t?e+6*(i-e)*t:.5>t?i:2>3*t?e+6*(i-e)*(2/3-t):e)+.5},ct=o.parseColor=function(t){var e,i,n,r,s,o;return t&&""!==t?"number"==typeof t?[t>>16,255&t>>8,255&t]:(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),at[t]?at[t]:"#"===t.charAt(0)?(4===t.length&&(e=t.charAt(1),i=t.charAt(2),n=t.charAt(3),t="#"+e+e+i+i+n+n),t=parseInt(t.substr(1),16),[t>>16,255&t>>8,255&t]):"hsl"===t.substr(0,3)?(t=t.match(g),r=Number(t[0])%360/360,s=Number(t[1])/100,o=Number(t[2])/100,i=.5>=o?o*(s+1):o+s-o*s,e=2*o-i,t.length>3&&(t[3]=Number(t[3])),t[0]=lt(r+1/3,e,i),t[1]=lt(r,e,i),t[2]=lt(r-1/3,e,i),t):(t=t.match(g)||at.transparent,t[0]=Number(t[0]),t[1]=Number(t[1]),t[2]=Number(t[2]),t.length>3&&(t[3]=Number(t[3])),t)):at.black},ut="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#.+?\\b";for(c in at)ut+="|"+c+"\\b";ut=RegExp(ut+")","gi");var dt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(ut)||[""])[0]:"",o=t.split(s).join("").match(_)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",c=-1!==t.indexOf(" ")?" ":",",u=o.length,d=u>0?o[0].replace(g,""):"";return u?r=e?function(t){var e,h,p,f;if("number"==typeof t)t+=d;else if(n&&R.test(t)){for(f=t.replace(R,"|").split("|"),p=0;f.length>p;p++)f[p]=r(f[p]);return f.join(",")}if(e=(t.match(ut)||[s])[0],h=t.split(e).join("").match(_)||[],p=h.length,u>p--)for(;u>++p;)h[p]=i?h[0|(p-1)/2]:o[p];return a+h.join(c)+c+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,s,h;if("number"==typeof t)t+=d;else if(n&&R.test(t)){for(s=t.replace(R,"|").split("|"),h=0;s.length>h;h++)s[h]=r(s[h]);return s.join(",")}if(e=t.match(_)||[],h=e.length,u>h--)for(;u>++h;)e[h]=i?e[0|(h-1)/2]:o[h];return a+e.join(c)+l}:function(t){return t}},ht=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,c=(i+"").split(" ");for(a={},l=0;4>l;l++)a[t[l]]=c[l]=c[l]||c[(l-1)/2>>0];return r.parse(e,a,s,o)}},pt=(F._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s=this.data,o=s.proxy,a=s.firstMPT,l=1e-6;a;)e=o[a.v],a.r?e=Math.round(e):l>e&&e>-l&&(e=0),a.t[a.p]=e,a=a._next;if(s.autoRotate&&(s.autoRotate.rotation=o.rotation),1===t)for(a=s.firstMPT;a;){if(i=a.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;i.l>n;n++)r+=i["xn"+n]+i["xs"+(n+1)];i.e=r}}else i.e=i.s+i.xs0;a=a._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),ft=(F._parseToProxy=function(t,e,i,n,r,s){var o,a,l,c,u,d=n,h={},p={},f=i._transform,m=N;for(i._transform=null,N=e,n=u=i.parse(t,e,n,r),N=m,s&&(i._transform=f,d&&(d._prev=null,d._prev&&(d._prev._next=null)));n&&n!==d;){if(1>=n.type&&(a=n.p,p[a]=n.s+n.c,h[a]=n.s,s||(c=new pt(n,"s",a,c,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],h[a]=n[l],s||(c=new pt(n,l,a,c,n.rxp[l]));n=n._next}return{proxy:h,end:p,firstMPT:c,pt:u}},F.CSSPropTween=function(t,e,n,r,o,a,l,c,u,d,h){this.t=t,this.p=e,this.s=n,this.c=r,this.n=l||e,t instanceof ft||s.push(this.n),this.r=c,this.type=a||0,u&&(this.pr=u,i=!0),this.b=void 0===d?n:d,this.e=void 0===h?n+r:h,o&&(this._next=o,o._prev=this)}),mt=o.parseComplex=function(t,e,i,n,r,s,o,a,l,c){i=i||s||"",o=new ft(t,e,0,0,o,c?2:1,null,(!1),a,i,n),n+="";var d,h,p,f,m,_,y,w,T,x,b,S,C=i.split(", ").join(",").split(" "),P=n.split(", ").join(",").split(" "),A=C.length,O=u!==!1;for((-1!==n.indexOf(",")||-1!==i.indexOf(","))&&(C=C.join(" ").replace(R,", ").split(" "),P=P.join(" ").replace(R,", ").split(" "),A=C.length),A!==P.length&&(C=(s||"").split(" "),A=C.length),o.plugin=l,o.setRatio=c,d=0;A>d;d++)if(f=C[d],m=P[d],w=parseFloat(f),w||0===w)o.appendXtra("",w,rt(m,w),m.replace(v,""),O&&-1!==m.indexOf("px"),!0);else if(r&&("#"===f.charAt(0)||at[f]||k.test(f)))S=","===m.charAt(m.length-1)?"),":")",f=ct(f),m=ct(m),T=f.length+m.length>6,T&&!q&&0===m[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(P[d]).join("transparent")):(q||(T=!1),o.appendXtra(T?"rgba(":"rgb(",f[0],m[0]-f[0],",",!0,!0).appendXtra("",f[1],m[1]-f[1],",",!0).appendXtra("",f[2],m[2]-f[2],T?",":S,!0),T&&(f=4>f.length?1:f[3],o.appendXtra("",f,(4>m.length?1:m[3])-f,S,!1)));else if(_=f.match(g)){if(y=m.match(v),!y||y.length!==_.length)return o;for(p=0,h=0;_.length>h;h++)b=_[h],x=f.indexOf(b,p),o.appendXtra(f.substr(p,x-p),Number(b),rt(y[h],b),"",O&&"px"===f.substr(x+b.length,2),0===h),p=x+b.length;o["xs"+o.l]+=f.substr(p)}else o["xs"+o.l]+=o.l?" "+f:f;if(-1!==n.indexOf("=")&&o.data){for(S=o.xs0+o.data.s,d=1;o.l>d;d++)S+=o["xs"+d]+o.data["xn"+d];o.e=S+o["xs"+d]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},gt=9;for(c=ft.prototype,c.l=c.pr=0;--gt>0;)c["xn"+gt]=0,c["xs"+gt]="";c.xs0="",c._next=c._prev=c.xfirst=c.data=c.plugin=c.setRatio=c.rxp=null,c.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&a?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new ft(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var vt=function(t,e){e=e||{},this.p=e.prefix?Y(t)||t:t,l[t]=l[this.p]=this,this.format=e.formatter||dt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},_t=F._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;s.length>n;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new vt(s[n],e)},yt=function(t){if(!l[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";_t(t,{parser:function(t,i,n,r,s,o,c){var u=a.com.greensock.plugins[e];return u?(u._cssRegister(),l[n].parse(t,i,n,r,s,o,c)):(W("Error: "+e+" js file not loaded."),s)}})}};c=vt.prototype,c.parseComplex=function(t,e,i,n,r,s){var o,a,l,c,u,d,h=this.keyword;if(this.multi&&(R.test(i)||R.test(e)?(a=e.replace(R,"|").split("|"),l=i.replace(R,"|").split("|")):h&&(a=[e],l=[i])),l){for(c=l.length>a.length?l.length:a.length,o=0;c>o;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,h&&(u=e.indexOf(h),d=i.indexOf(h),u!==d&&(i=-1===d?l:a,i[o]+=" "+h));e=a.join(", "),i=l.join(", ")}return mt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},c.parse=function(t,e,i,n,s,o){return this.parseComplex(t.style,this.format(G(t,this.p,r,!1,this.dflt)),this.format(e),s,o)},o.registerSpecialProp=function(t,e,i){_t(t,{parser:function(t,n,r,s,o,a){var l=new ft(t,r,0,0,o,2,r,(!1),i);return l.plugin=a,l.setRatio=e(t,n,s._tween,r),l},priority:i})};var wt,Tt="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),xt=Y("transform"),bt=B+"transform",kt=Y("transformOrigin"),St=null!==Y("perspective"),Ct=F.Transform=function(){this.perspective=parseFloat(o.defaultTransformPerspective)||0,this.force3D=!(o.defaultForce3D===!1||!St)&&(o.defaultForce3D||"auto")},Pt=window.SVGElement,At=function(t,e,i){var n,r=L.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Ot=document.documentElement,Dt=function(){var t,e,i,n=m||/Android/i.test(H)&&!window.chrome;return L.createElementNS&&!n&&(t=At("svg",Ot),e=At("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[kt]="50% 50%",e.style[xt]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(p&&St),Ot.removeChild(t)),n}(),$t=function(t,e,i){var n=t.getBBox();e=nt(e).split(" "),i.xOrigin=(-1!==e[0].indexOf("%")?parseFloat(e[0])/100*n.width:parseFloat(e[0]))+n.x,i.yOrigin=(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*n.height:parseFloat(e[1]))+n.y},Rt=F.getTransform=function(t,e,i,n){if(t._gsTransform&&i&&!n)return t._gsTransform;var s,a,l,c,u,d,h,p,f,m,g=i?t._gsTransform||new Ct:new Ct,v=0>g.scaleX,_=2e-5,y=1e5,w=St?parseFloat(G(t,kt,e,!1,"0 0 0").split(" ")[2])||g.zOrigin||0:0,T=parseFloat(o.defaultTransformPerspective)||0;if(xt?a=G(t,bt,e,!0):t.currentStyle&&(a=t.currentStyle.filter.match(D),a=a&&4===a.length?[a[0].substr(4),Number(a[2].substr(4)),Number(a[1].substr(4)),a[3].substr(4),g.x||0,g.y||0].join(","):""),s=!a||"none"===a||"matrix(1, 0, 0, 1, 0, 0)"===a,g.svg=!!(Pt&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM)),g.svg&&($t(t,G(t,kt,r,!1,"50% 50%")+"",g),wt=o.useSVGTransformAttr||Dt,l=t.getAttribute("transform"),s&&l&&-1!==l.indexOf("matrix")&&(a=l,s=0)),!s){for(l=(a||"").match(/(?:\-|\b)[\d\-\.e]+\b/gi)||[],c=l.length;--c>-1;)u=Number(l[c]),l[c]=(d=u-(u|=0))?(0|d*y+(0>d?-.5:.5))/y+u:u;if(16===l.length){var x,b,k,S,C,P=l[0],A=l[1],O=l[2],$=l[3],R=l[4],E=l[5],N=l[6],L=l[7],I=l[8],j=l[9],z=l[10],F=l[12],H=l[13],q=l[14],X=l[11],W=Math.atan2(N,z);g.zOrigin&&(q=-g.zOrigin,F=I*q-l[12],H=j*q-l[13],q=z*q+g.zOrigin-l[14]),g.rotationX=W*M,W&&(S=Math.cos(-W),C=Math.sin(-W),x=R*S+I*C,b=E*S+j*C,k=N*S+z*C,I=R*-C+I*S,j=E*-C+j*S,z=N*-C+z*S,X=L*-C+X*S,R=x,E=b,N=k),W=Math.atan2(I,z),g.rotationY=W*M,W&&(S=Math.cos(-W),C=Math.sin(-W),x=P*S-I*C,b=A*S-j*C,k=O*S-z*C,j=A*C+j*S,z=O*C+z*S,X=$*C+X*S,P=x,A=b,O=k),W=Math.atan2(A,P),g.rotation=W*M,W&&(S=Math.cos(-W),C=Math.sin(-W),P=P*S+R*C,b=A*S+E*C,E=A*-C+E*S,N=O*-C+N*S,A=b),g.rotationX&&Math.abs(g.rotationX)+Math.abs(g.rotation)>359.9&&(g.rotationX=g.rotation=0,g.rotationY+=180),g.scaleX=(0|Math.sqrt(P*P+A*A)*y+.5)/y,g.scaleY=(0|Math.sqrt(E*E+j*j)*y+.5)/y,g.scaleZ=(0|Math.sqrt(N*N+z*z)*y+.5)/y,g.skewX=0,g.perspective=X?1/(0>X?-X:X):0,g.x=F,g.y=H,g.z=q}else if(!(St&&!n&&l.length&&g.x===l[4]&&g.y===l[5]&&(g.rotationX||g.rotationY)||void 0!==g.x&&"none"===G(t,"display",e))){var B=l.length>=6,U=B?l[0]:1,Y=l[1]||0,V=l[2]||0,Q=B?l[3]:1;g.x=l[4]||0,g.y=l[5]||0,h=Math.sqrt(U*U+Y*Y),p=Math.sqrt(Q*Q+V*V),f=U||Y?Math.atan2(Y,U)*M:g.rotation||0,m=V||Q?Math.atan2(V,Q)*M+f:g.skewX||0,Math.abs(m)>90&&270>Math.abs(m)&&(v?(h*=-1,m+=0>=f?180:-180,f+=0>=f?180:-180):(p*=-1,m+=0>=m?180:-180)),g.scaleX=h,g.scaleY=p,g.rotation=f,g.skewX=m,St&&(g.rotationX=g.rotationY=g.z=0,g.perspective=T,g.scaleZ=1)}g.zOrigin=w;for(c in g)_>g[c]&&g[c]>-_&&(g[c]=0)}return i&&(t._gsTransform=g),g},Et=function(t){var e,i,n=this.data,r=-n.rotation*E,s=r+n.skewX*E,o=1e5,a=(0|Math.cos(r)*n.scaleX*o)/o,l=(0|Math.sin(r)*n.scaleX*o)/o,c=(0|Math.sin(s)*-n.scaleY*o)/o,u=(0|Math.cos(s)*n.scaleY*o)/o,d=this.t.style,h=this.t.currentStyle;if(h){i=l,l=-c,c=-i,e=h.filter,d.filter="";var p,f,g=this.t.offsetWidth,v=this.t.offsetHeight,_="absolute"!==h.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+c+", M22="+u,x=n.x+g*n.xPercent/100,b=n.y+v*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?.01*g*n.ox:n.ox)-g/2,f=(n.oyp?.01*v*n.oy:n.oy)-v/2,x+=p-(p*a+f*l),b+=f-(p*c+f*u)),_?(p=g/2,f=v/2,y+=", Dx="+(p-(p*a+f*l)+x)+", Dy="+(f-(p*c+f*u)+b)+")"):y+=", sizingMethod='auto expand')",d.filter=-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?e.replace($,y):y+" "+e,(0===t||1===t)&&1===a&&0===l&&0===c&&1===u&&(_&&-1===y.indexOf("Dx=0, Dy=0")||T.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&d.removeAttribute("filter")),!_){var k,S,C,P=8>m?1:-1;for(p=n.ieOffsetX||0,f=n.ieOffsetY||0,n.ieOffsetX=Math.round((g-((0>a?-a:a)*g+(0>l?-l:l)*v))/2+x),n.ieOffsetY=Math.round((v-((0>u?-u:u)*v+(0>c?-c:c)*g))/2+b),gt=0;4>gt;gt++)S=et[gt],k=h[S],i=-1!==k.indexOf("px")?parseFloat(k):Q(this.t,S,parseFloat(k),k.replace(w,""))||0,C=i!==n[S]?2>gt?-n.ieOffsetX:-n.ieOffsetY:2>gt?p-n.ieOffsetX:f-n.ieOffsetY,d[S]=(n[S]=Math.round(i-C*(0===gt||2===gt?1:P)))+"px"}}},Mt=F.set3DTransformRatio=function(t){var e,i,n,r,s,o,a,l,c,u,d,h,f,m,g,v,_,y,w,T,x,b=this.data,k=this.t.style,S=b.rotation*E,C=b.scaleX,P=b.scaleY,A=b.scaleZ,O=b.x,D=b.y,$=b.z,R=b.perspective;if(!(1!==t&&0!==t&&b.force3D||b.force3D===!0||b.rotationY||b.rotationX||1!==A||R||$))return void Nt.call(this,t);if(p&&(m=1e-4,m>C&&C>-m&&(C=A=2e-5),m>P&&P>-m&&(P=A=2e-5),!R||b.z||b.rotationX||b.rotationY||(R=0)),S||b.skewX)g=e=Math.cos(S),v=r=Math.sin(S),b.skewX&&(S-=b.skewX*E,g=Math.cos(S),v=Math.sin(S),"simple"===b.skewType&&(_=Math.tan(b.skewX*E),_=Math.sqrt(1+_*_),g*=_,v*=_)),i=-v,s=g;else{if(!(b.rotationY||b.rotationX||1!==A||R||b.svg))return void(k[xt]=(b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) translate3d(":"translate3d(")+O+"px,"+D+"px,"+$+"px)"+(1!==C||1!==P?" scale("+C+","+P+")":""));e=s=1,i=r=0}c=1,n=o=a=l=u=d=0,h=R?-1/R:0,f=b.zOrigin,m=1e-6,T=",",x="0",S=b.rotationY*E,S&&(g=Math.cos(S),v=Math.sin(S),a=-v,u=h*-v,n=e*v,o=r*v,c=g,h*=g,e*=g,r*=g),S=b.rotationX*E,S&&(g=Math.cos(S),v=Math.sin(S),_=i*g+n*v,y=s*g+o*v,l=c*v,d=h*v,n=i*-v+n*g,o=s*-v+o*g,c*=g,h*=g,i=_,s=y),1!==A&&(n*=A,o*=A,c*=A,h*=A),1!==P&&(i*=P,s*=P,l*=P,d*=P),1!==C&&(e*=C,r*=C,a*=C,u*=C),(f||b.svg)&&(f&&(O+=n*-f,D+=o*-f,$+=c*-f+f),b.svg&&(O+=b.xOrigin-(b.xOrigin*e+b.yOrigin*i),D+=b.yOrigin-(b.xOrigin*r+b.yOrigin*s)),m>O&&O>-m&&(O=x),m>D&&D>-m&&(D=x),m>$&&$>-m&&($=0)),w=b.xPercent||b.yPercent?"translate("+b.xPercent+"%,"+b.yPercent+"%) matrix3d(":"matrix3d(",w+=(m>e&&e>-m?x:e)+T+(m>r&&r>-m?x:r)+T+(m>a&&a>-m?x:a),w+=T+(m>u&&u>-m?x:u)+T+(m>i&&i>-m?x:i)+T+(m>s&&s>-m?x:s),b.rotationX||b.rotationY?(w+=T+(m>l&&l>-m?x:l)+T+(m>d&&d>-m?x:d)+T+(m>n&&n>-m?x:n),w+=T+(m>o&&o>-m?x:o)+T+(m>c&&c>-m?x:c)+T+(m>h&&h>-m?x:h)+T):w+=",0,0,0,0,1,0,",w+=O+T+D+T+$+T+(R?1+-$/R:1)+")",k[xt]=w},Nt=F.set2DTransformRatio=function(t){var e,i,n,r,s,o,a,l,c,u,d,h=this.data,p=this.t,f=p.style,m=h.x,g=h.y;return!(h.rotationX||h.rotationY||h.z||h.force3D===!0||"auto"===h.force3D&&1!==t&&0!==t)||h.svg&&wt||!St?(r=h.scaleX,
s=h.scaleY,void(h.rotation||h.skewX||h.svg?(e=h.rotation*E,i=e-h.skewX*E,n=1e5,o=Math.cos(e)*r,a=Math.sin(e)*r,l=Math.sin(i)*-s,c=Math.cos(i)*s,h.svg&&(m+=h.xOrigin-(h.xOrigin*o+h.yOrigin*l),g+=h.yOrigin-(h.xOrigin*a+h.yOrigin*c),d=1e-6,d>m&&m>-d&&(m=0),d>g&&g>-d&&(g=0)),u=(0|o*n)/n+","+(0|a*n)/n+","+(0|l*n)/n+","+(0|c*n)/n+","+m+","+g+")",h.svg&&wt?p.setAttribute("transform","matrix("+u):f[xt]=(h.xPercent||h.yPercent?"translate("+h.xPercent+"%,"+h.yPercent+"%) matrix(":"matrix(")+u):f[xt]=(h.xPercent||h.yPercent?"translate("+h.xPercent+"%,"+h.yPercent+"%) matrix(":"matrix(")+r+",0,0,"+s+","+m+","+g+")")):(this.setRatio=Mt,void Mt.call(this,t))};c=Ct.prototype,c.x=c.y=c.z=c.skewX=c.skewY=c.rotation=c.rotationX=c.rotationY=c.zOrigin=c.xPercent=c.yPercent=0,c.scaleX=c.scaleY=c.scaleZ=1,_t("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent",{parser:function(t,e,i,n,s,a,l){if(n._lastParsedTransform===l)return s;n._lastParsedTransform=l;var c,u,d,h,p,f,m,g=n._transform=Rt(t,r,!0,l.parseTransform),v=t.style,_=1e-6,y=Tt.length,w=l,T={};if("string"==typeof w.transform&&xt)d=j.style,d[xt]=w.transform,d.display="block",d.position="absolute",L.body.appendChild(j),c=Rt(j,null,!1),L.body.removeChild(j);else if("object"==typeof w){if(c={scaleX:st(null!=w.scaleX?w.scaleX:w.scale,g.scaleX),scaleY:st(null!=w.scaleY?w.scaleY:w.scale,g.scaleY),scaleZ:st(w.scaleZ,g.scaleZ),x:st(w.x,g.x),y:st(w.y,g.y),z:st(w.z,g.z),xPercent:st(w.xPercent,g.xPercent),yPercent:st(w.yPercent,g.yPercent),perspective:st(w.transformPerspective,g.perspective)},m=w.directionalRotation,null!=m)if("object"==typeof m)for(d in m)w[d]=m[d];else w.rotation=m;"string"==typeof w.x&&-1!==w.x.indexOf("%")&&(c.x=0,c.xPercent=st(w.x,g.xPercent)),"string"==typeof w.y&&-1!==w.y.indexOf("%")&&(c.y=0,c.yPercent=st(w.y,g.yPercent)),c.rotation=ot("rotation"in w?w.rotation:"shortRotation"in w?w.shortRotation+"_short":"rotationZ"in w?w.rotationZ:g.rotation,g.rotation,"rotation",T),St&&(c.rotationX=ot("rotationX"in w?w.rotationX:"shortRotationX"in w?w.shortRotationX+"_short":g.rotationX||0,g.rotationX,"rotationX",T),c.rotationY=ot("rotationY"in w?w.rotationY:"shortRotationY"in w?w.shortRotationY+"_short":g.rotationY||0,g.rotationY,"rotationY",T)),c.skewX=null==w.skewX?g.skewX:ot(w.skewX,g.skewX),c.skewY=null==w.skewY?g.skewY:ot(w.skewY,g.skewY),(u=c.skewY-g.skewY)&&(c.skewX+=u,c.rotation+=u)}for(St&&null!=w.force3D&&(g.force3D=w.force3D,f=!0),g.skewType=w.skewType||g.skewType||o.defaultSkewType,p=g.force3D||g.z||g.rotationX||g.rotationY||c.z||c.rotationX||c.rotationY||c.perspective,p||null==w.scale||(c.scaleZ=1);--y>-1;)i=Tt[y],h=c[i]-g[i],(h>_||-_>h||null!=w[i]||null!=N[i])&&(f=!0,s=new ft(g,i,g[i],h,s),i in T&&(s.e=T[i]),s.xs0=0,s.plugin=a,n._overwriteProps.push(s.n));return h=w.transformOrigin,h&&g.svg&&($t(t,nt(h),c),s=new ft(g,"xOrigin",g.xOrigin,c.xOrigin-g.xOrigin,s,(-1),"transformOrigin"),s.b=g.xOrigin,s.e=s.xs0=c.xOrigin,s=new ft(g,"yOrigin",g.yOrigin,c.yOrigin-g.yOrigin,s,(-1),"transformOrigin"),s.b=g.yOrigin,s.e=s.xs0=c.yOrigin,h="0px 0px"),(h||St&&p&&g.zOrigin)&&(xt?(f=!0,i=kt,h=(h||G(t,i,r,!1,"50% 50%"))+"",s=new ft(v,i,0,0,s,(-1),"transformOrigin"),s.b=v[i],s.plugin=a,St?(d=g.zOrigin,h=h.split(" "),g.zOrigin=(h.length>2&&(0===d||"0px"!==h[2])?parseFloat(h[2]):d)||0,s.xs0=s.e=h[0]+" "+(h[1]||"50%")+" 0px",s=new ft(g,"zOrigin",0,0,s,(-1),s.n),s.b=d,s.xs0=s.e=g.zOrigin):s.xs0=s.e=h):nt(h+"",g)),f&&(n._transformType=g.svg&&wt||!p&&3!==this._transformType?2:3),s},prefix:!0}),_t("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),_t("borderRadius",{defaultValue:"0px",parser:function(t,e,i,s,o){e=this.format(e);var a,l,c,u,d,h,p,f,m,g,v,_,y,w,T,x,b=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(m=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),a=e.split(" "),l=0;b.length>l;l++)this.p.indexOf("border")&&(b[l]=Y(b[l])),d=u=G(t,b[l],r,!1,"0px"),-1!==d.indexOf(" ")&&(u=d.split(" "),d=u[0],u=u[1]),h=c=a[l],p=parseFloat(d),_=d.substr((p+"").length),y="="===h.charAt(1),y?(f=parseInt(h.charAt(0)+"1",10),h=h.substr(2),f*=parseFloat(h),v=h.substr((f+"").length-(0>f?1:0))||""):(f=parseFloat(h),v=h.substr((f+"").length)),""===v&&(v=n[i]||_),v!==_&&(w=Q(t,"borderLeft",p,_),T=Q(t,"borderTop",p,_),"%"===v?(d=100*(w/m)+"%",u=100*(T/g)+"%"):"em"===v?(x=Q(t,"borderLeft",1,"em"),d=w/x+"em",u=T/x+"em"):(d=w+"px",u=T+"px"),y&&(h=parseFloat(d)+f+v,c=parseFloat(u)+f+v)),o=mt(k,b[l],d+" "+u,h+" "+c,!1,"0px",o);return o},prefix:!0,formatter:dt("0px 0px 0px 0px",!1,!0)}),_t("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,s,o){var a,l,c,u,d,h,p="background-position",f=r||V(t,null),g=this.format((f?m?f.getPropertyValue(p+"-x")+" "+f.getPropertyValue(p+"-y"):f.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),v=this.format(e);if(-1!==g.indexOf("%")!=(-1!==v.indexOf("%"))&&(h=G(t,"backgroundImage").replace(P,""),h&&"none"!==h)){for(a=g.split(" "),l=v.split(" "),z.setAttribute("src",h),c=2;--c>-1;)g=a[c],u=-1!==g.indexOf("%"),u!==(-1!==l[c].indexOf("%"))&&(d=0===c?t.offsetWidth-z.width:t.offsetHeight-z.height,a[c]=u?parseFloat(g)/100*d+"px":100*(parseFloat(g)/d)+"%");g=a.join(" ")}return this.parseComplex(t.style,g,v,s,o)},formatter:nt}),_t("backgroundSize",{defaultValue:"0 0",formatter:nt}),_t("perspective",{defaultValue:"0px",prefix:!0}),_t("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),_t("transformStyle",{prefix:!0}),_t("backfaceVisibility",{prefix:!0}),_t("userSelect",{prefix:!0}),_t("margin",{parser:ht("marginTop,marginRight,marginBottom,marginLeft")}),_t("padding",{parser:ht("paddingTop,paddingRight,paddingBottom,paddingLeft")}),_t("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,s,o){var a,l,c;return 9>m?(l=t.currentStyle,c=8>m?" ":",",a="rect("+l.clipTop+c+l.clipRight+c+l.clipBottom+c+l.clipLeft+")",e=this.format(e).split(",").join(c)):(a=this.format(G(t,this.p,r,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,s,o)}}),_t("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),_t("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),_t("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,s,o){return this.parseComplex(t.style,this.format(G(t,"borderTopWidth",r,!1,"0px")+" "+G(t,"borderTopStyle",r,!1,"solid")+" "+G(t,"borderTopColor",r,!1,"#000")),this.format(e),s,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(ut)||["#000"])[0]}}),_t("borderWidth",{parser:ht("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),_t("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r){var s=t.style,o="cssFloat"in s?"cssFloat":"styleFloat";return new ft(s,o,0,0,r,(-1),i,(!1),0,s[o],e)}});var Lt=function(t){var e,i=this.t,n=i.filter||G(this.data,"filter")||"",r=0|this.s+this.c*t;100===r&&(-1===n.indexOf("atrix(")&&-1===n.indexOf("radient(")&&-1===n.indexOf("oader(")?(i.removeAttribute("filter"),e=!G(this.data,"filter")):(i.filter=n.replace(b,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),-1===n.indexOf("pacity")?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(T,"opacity="+r))};_t("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,s,o){var a=parseFloat(G(t,"opacity",r,!1,"1")),l=t.style,c="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),c&&1===a&&"hidden"===G(t,"visibility",r)&&0!==e&&(a=0),q?s=new ft(l,"opacity",a,e-a,s):(s=new ft(l,"opacity",100*a,100*(e-a),s),s.xn1=c?1:0,l.zoom=1,s.type=2,s.b="alpha(opacity="+s.s+")",s.e="alpha(opacity="+(s.s+s.c)+")",s.data=t,s.plugin=o,s.setRatio=Lt),c&&(s=new ft(l,"visibility",0,0,s,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),s.xs0="inherit",n._overwriteProps.push(s.n),n._overwriteProps.push(i)),s}});var It=function(t,e){e&&(t.removeProperty?("ms"===e.substr(0,2)&&(e="M"+e.substr(1)),t.removeProperty(e.replace(S,"-$1").toLowerCase())):t.removeAttribute(e))},jt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:It(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};_t("className",{parser:function(t,e,n,s,o,a,l){var c,u,d,h,p,f=t.getAttribute("class")||"",m=t.style.cssText;if(o=s._classNamePT=new ft(t,n,0,0,o,2),o.setRatio=jt,o.pr=-11,i=!0,o.b=f,u=J(t,r),d=t._gsClassPT){for(h={},p=d.data;p;)h[p.p]=1,p=p._next;d.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:f.replace(RegExp("\\s*\\b"+e.substr(2)+"\\b"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),s._tween._duration&&(t.setAttribute("class",o.e),c=K(t,u,J(t),l,h),t.setAttribute("class",f),o.data=c.firstMPT,t.style.cssText=m,o=o.xfirst=s.parse(t,c.difs,o,a)),o}});var zt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s=this.t.style,o=l.transform.parse;if("all"===this.e)s.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],l[i]&&(l[i].parse===o?r=!0:i="transformOrigin"===i?kt:l[i].p),It(s,i);r&&(It(s,xt),this.t._gsTransform&&delete this.t._gsTransform)}};for(_t("clearProps",{parser:function(t,e,n,r,s){return s=new ft(t,n,0,0,s,2),s.setRatio=zt,s.e=e,s.pr=-10,s.data=r._tween,i=!0,s}}),c="bezier,throwProps,physicsProps,physics2D".split(","),gt=c.length;gt--;)yt(c[gt]);c=o.prototype,c._firstPT=c._lastParsedTransform=c._transform=null,c._onInitTween=function(t,e,a){if(!t.nodeType)return!1;this._target=t,this._tween=a,this._vars=e,u=e.autoRound,i=!1,n=e.suffixMap||o.suffixMap,r=V(t,""),s=this._overwriteProps;var l,c,p,m,g,v,_,y,w,T=t.style;if(d&&""===T.zIndex&&(l=G(t,"zIndex",r),("auto"===l||""===l)&&this._addLazySet(T,"zIndex",0)),"string"==typeof e&&(m=T.cssText,l=J(t,r),T.cssText=m+";"+e,l=K(t,l,J(t)).difs,!q&&x.test(e)&&(l.opacity=parseFloat(RegExp.$1)),e=l,T.cssText=m),this._firstPT=c=this.parse(t,e,null),this._transformType){for(w=3===this._transformType,xt?h&&(d=!0,""===T.zIndex&&(_=G(t,"zIndex",r),("auto"===_||""===_)&&this._addLazySet(T,"zIndex",0)),f&&this._addLazySet(T,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(w?"visible":"hidden"))):T.zoom=1,p=c;p&&p._next;)p=p._next;y=new ft(t,"transform",0,0,null,2),this._linkCSSP(y,null,p),y.setRatio=w&&St?Mt:xt?Nt:Et,y.data=this._transform||Rt(t,r,!0),s.pop()}if(i){for(;c;){for(v=c._next,p=m;p&&p.pr>c.pr;)p=p._next;(c._prev=p?p._prev:g)?c._prev._next=c:m=c,(c._next=p)?p._prev=c:g=c,c=v}this._firstPT=m}return!0},c.parse=function(t,e,i,s){var o,a,c,d,h,p,f,m,g,v,_=t.style;for(o in e)p=e[o],a=l[o],a?i=a.parse(t,p,o,this,i,s,e):(h=G(t,o,r)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||-1!==o.indexOf("Color")||g&&k.test(p)?(g||(p=ct(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=mt(_,o,h,p,!0,"transparent",i,0,s)):!g||-1===p.indexOf(" ")&&-1===p.indexOf(",")?(c=parseFloat(h),f=c||0===c?h.substr((c+"").length):"",(""===h||"auto"===h)&&("width"===o||"height"===o?(c=it(t,o,r),f="px"):"left"===o||"top"===o?(c=Z(t,o,r),f="px"):(c="opacity"!==o?0:1,f="")),v=g&&"="===p.charAt(1),v?(d=parseInt(p.charAt(0)+"1",10),p=p.substr(2),d*=parseFloat(p),m=p.replace(w,"")):(d=parseFloat(p),m=g?p.replace(w,""):""),""===m&&(m=o in n?n[o]:f),p=d||0===d?(v?d+c:d)+m:e[o],f!==m&&""!==m&&(d||0===d)&&c&&(c=Q(t,o,c,f),"%"===m?(c/=Q(t,o,100,"%")/100,e.strictUnits!==!0&&(h=c+"%")):"em"===m?c/=Q(t,o,1,"em"):"px"!==m&&(d=Q(t,o,d,m),m="px"),v&&(d||0===d)&&(p=d+c+m)),v&&(d+=c),!c&&0!==c||!d&&0!==d?void 0!==_[o]&&(p||"NaN"!=p+""&&null!=p)?(i=new ft(_,o,d||c||0,0,i,(-1),o,(!1),0,h,p),i.xs0="none"!==p||"display"!==o&&-1===o.indexOf("Style")?p:h):W("invalid "+o+" tween value: "+e[o]):(i=new ft(_,o,c,d-c,i,0,o,u!==!1&&("px"===m||"zIndex"===o),0,h,p),i.xs0=m)):i=mt(_,o,h,p,!0,null,i,0,s)),s&&i&&!i.plugin&&(i.plugin=s);return i},c.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):s>e&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;r.l>n;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;)2!==r.type?r.t[r.p]=r.e:r.setRatio(t),r=r._next},c._enableTransforms=function(t){this._transform=this._transform||Rt(this._target,r,!0),this._transformType=this._transform.svg&&wt||!t&&3!==this._transformType?2:3};var Ft=function(){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};c._addLazySet=function(t,e,i){var n=this._firstPT=new ft(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Ft,n.data=this},c._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},c._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}return e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),t.prototype._kill.call(this,s)};var Ht=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Ht(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(J(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Ht(s,e,i)};return o.cascadeTo=function(t,i,n){var r,s,o,a=e.to(t,i,n),l=[a],c=[],u=[],d=[],h=e._internals.reservedProps;for(t=a._targets||a.target,Ht(t,c,d),a.render(i,!0),Ht(t,u),a.render(0,!0),a._enabled(!0),r=d.length;--r>-1;)if(s=K(d[r],c[r],u[r]),s.firstMPT){s=s.difs;for(o in n)h[o]&&(s[o]=n[o]);l.push(e.to(d[r],i,s))}return l},t.activate([o]),o},!0),function(){var t=_gsScope._gsDefine.plugin({propName:"roundProps",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=t.prototype;e._onInitAllProps=function(){for(var t,e,i,n=this._tween,r=n.vars.roundProps instanceof Array?n.vars.roundProps:n.vars.roundProps.split(","),s=r.length,o={},a=n._propLookup.roundProps;--s>-1;)o[r[s]]=1;for(s=r.length;--s>-1;)for(t=r[s],e=n._firstPT;e;)i=e._next,e.pg?e.t._roundProps(o,!0):e.n===t&&(this._add(e.t,t,e.s,e.c),i&&(i._prev=e._prev),e._prev?e._prev._next=i:n._firstPT===e&&(n._firstPT=i),e._next=e._prev=null,n._propLookup[t]=a),e=i;return!1},e._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,!0),this._overwriteProps.push(e)}}(),_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.3.3",init:function(t,e){var i,n,r;if("function"!=typeof t.setAttribute)return!1;this._target=t,this._proxy={},this._start={},this._end={};for(i in e)this._start[i]=this._proxy[i]=n=t.getAttribute(i),r=this._addTween(this._proxy,i,parseFloat(n),e[i],i),this._end[i]=r?r.s+r.c:e[i],this._overwriteProps.push(i);return!0},set:function(t){this._super.setRatio.call(this,t);for(var e,i=this._overwriteProps,n=i.length,r=1===t?this._end:t?this._proxy:this._start;--n>-1;)e=i[n],this._target.setAttribute(e,r[e]+"")}}),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.2.1",API:2,init:function(t,e){"object"!=typeof e&&(e={rotation:e}),this.finals={};var i,n,r,s,o,a,l=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(i in e)"useRadians"!==i&&(a=(e[i]+"").split("_"),n=a[0],r=parseFloat("function"!=typeof t[i]?t[i]:t[i.indexOf("set")||"function"!=typeof t["get"+i.substr(3)]?i:"get"+i.substr(3)]()),s=this.finals[i]="string"==typeof n&&"="===n.charAt(1)?r+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0,o=s-r,a.length&&(n=a.join("_"),-1!==n.indexOf("short")&&(o%=l,o!==o%(l/2)&&(o=0>o?o+l:o-l)),-1!==n.indexOf("_cw")&&0>o?o=(o+9999999999*l)%l-(0|o/l)*l:-1!==n.indexOf("ccw")&&o>0&&(o=(o-9999999999*l)%l-(0|o/l)*l)),(o>c||-c>o)&&(this._addTween(t,i,r,r+o,i),this._overwriteProps.push(i)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,i,n,r=_gsScope.GreenSockGlobals||_gsScope,s=r.com.greensock,o=2*Math.PI,a=Math.PI/2,l=s._class,c=function(e,i){var n=l("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},u=t.register||function(){},d=function(t,e,i,n){var r=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return u(r,t),r},h=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},p=function(e,i){var n=l("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},f=d("Back",p("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),p("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),p("BackInOut",function(t){return 1>(t*=2)?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),g=m.prototype=new t;return g.constructor=m,g.getRatio=function(t){var e=t+(.5-t)*this._p;return this._p1>t?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),g.config=m.config=function(t,e,i){return new m(t,e,i)},e=l("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),g=e.prototype=new t,g.constructor=e,g.getRatio=function(t){return 0>t?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},g.config=e.config=function(t){return new e(t)},i=l("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,o,a,l=e.taper||"none",c=[],u=0,d=0|(e.points||20),p=d,f=e.randomize!==!1,m=e.clamp===!0,g=e.template instanceof t?e.template:null,v="number"==typeof e.strength?.4*e.strength:.4;--p>-1;)i=f?Math.random():1/d*p,n=g?g.getRatio(i):i,"none"===l?r=v:"out"===l?(s=1-i,r=s*s*v):"in"===l?r=i*i*v:.5>i?(s=2*i,r=.5*s*s*v):(s=2*(1-i),r=.5*s*s*v),f?n+=Math.random()*r-.5*r:p%2?n+=.5*r:n-=.5*r,m&&(n>1?n=1:0>n&&(n=0)),c[u++]={x:i,y:n};for(c.sort(function(t,e){return t.x-e.x}),a=new h(1,1,null),p=d;--p>-1;)o=c[p],a=new h(o.x,o.y,a);this._prev=new h(0,0,0!==a.t?a:a.next)},!0),g=i.prototype=new t,g.constructor=i,g.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&e.t>=t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},g.config=function(t){return new i(t)},i.ease=new i,d("Bounce",c("BounceOut",function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),c("BounceIn",function(t){return 1/2.75>(t=1-t)?1-7.5625*t*t:2/2.75>t?1-(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),c("BounceInOut",function(t){var e=.5>t;return t=e?1-2*t:2*t-1,t=1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),d("Circ",c("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),c("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),c("CircInOut",function(t){return 1>(t*=2)?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),n=function(e,i,n){var r=l("easing."+e,function(t,e){this._p1=t||1,this._p2=e||n,this._p3=this._p2/o*(Math.asin(1/this._p1)||0)},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},d("Elastic",n("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*o/this._p2)+1},.3),n("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*o/this._p2))},.3),n("ElasticInOut",function(t){return 1>(t*=2)?-.5*this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*o/this._p2):.5*this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*o/this._p2)+1},.45)),d("Expo",c("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),c("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),c("ExpoInOut",function(t){return 1>(t*=2)?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),d("Sine",c("SineOut",function(t){return Math.sin(t*a)}),c("SineIn",function(t){return-Math.cos(t*a)+1}),c("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),u(r.SlowMo,"SlowMo","ease,"),u(i,"RoughEase","ease,"),u(e,"SteppedEase","ease,"),f},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t,e){"use strict";var i=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!i.TweenLite){var n,r,s,o,a,l=function(t){var e,n=t.split("."),r=i;for(e=0;n.length>e;e++)r[n[e]]=r=r[n[e]]||{};return r},c=l("com.greensock"),u=1e-10,d=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},h=function(){},p=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),f={},m=function(n,r,s,o){this.sc=f[n]?f[n].sc:[],f[n]=this,this.gsClass=null,this.func=s;var a=[];this.check=function(c){for(var u,d,h,p,g=r.length,v=g;--g>-1;)(u=f[r[g]]||new m(r[g],[])).gsClass?(a[g]=u.gsClass,v--):c&&u.sc.push(this);if(0===v&&s)for(d=("com.greensock."+n).split("."),h=d.pop(),p=l(d.join("."))[h]=this.gsClass=s.apply(s,a),o&&(i[h]=p,"function"==typeof define&&define.amd?define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+n.split(".").pop(),[],function(){return p}):n===e&&"undefined"!=typeof module&&module.exports&&(module.exports=p)),g=0;this.sc.length>g;g++)this.sc[g].check()},this.check(!0)},g=t._gsDefine=function(t,e,i,n){return new m(t,e,i,n)},v=c._class=function(t,e,i){return e=e||function(){},g(t,[],function(){return e},i),e};g.globals=i;var _=[0,0,1,1],y=[],w=v("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?_.concat(e):_},!0),T=w.map={},x=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),u=l.length,d=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(s=l[u],r=n?v("easing."+s,null,!0):c.easing[s]||{},o=d.length;--o>-1;)a=d[o],T[s+"."+a]=T[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(s=w.prototype,s._calcEnd=!1,s.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:.5>t?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:.5>t?n/2:1-n/2},n=["Linear","Quad","Cubic","Quart","Quint,Strong"],r=n.length;--r>-1;)s=n[r]+",Power"+r,x(new w(null,null,1,r),s,"easeOut",!0),x(new w(null,null,2,r),s,"easeIn"+(0===r?",easeNone":"")),x(new w(null,null,3,r),s,"easeInOut");T.linear=c.easing.Linear.easeIn,T.swing=c.easing.Quad.easeInOut;var b=v("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});s=b.prototype,s.addEventListener=function(t,e,i,n,r){r=r||0;var s,l,c=this._listeners[t],u=0;for(null==c&&(this._listeners[t]=c=[]),l=c.length;--l>-1;)s=c[l],s.c===e&&s.s===i?c.splice(l,1):0===u&&r>s.pr&&(u=l+1);c.splice(u,0,{c:e,s:i,up:n,pr:r}),this!==o||a||o.wake()},s.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},s.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},P=C();for(n=["ms","moz","webkit","o"],r=n.length;--r>-1&&!k;)k=t[n[r]+"RequestAnimationFrame"],S=t[n[r]+"CancelAnimationFrame"]||t[n[r]+"CancelRequestAnimationFrame"];v("Ticker",function(t,e){var i,n,r,s,l,c=this,d=C(),p=e!==!1&&k,f=500,m=33,g="tick",v=function(t){var e,o,a=C()-P;a>f&&(d+=a-m),P+=a,c.time=(P-d)/1e3,e=c.time-l,(!i||e>0||t===!0)&&(c.frame++,l+=e+(e>=s?.004:s-e),o=!0),t!==!0&&(r=n(v)),o&&c.dispatchEvent(g)};b.call(c),c.time=c.frame=0,c.tick=function(){v(!0)},c.lagSmoothing=function(t,e){f=t||1/u,m=Math.min(e,f,0)},c.sleep=function(){null!=r&&(p&&S?S(r):clearTimeout(r),n=h,r=null,c===o&&(a=!1))},c.wake=function(){null!==r?c.sleep():c.frame>10&&(P=C()-f+5),n=0===i?h:p&&k?k:function(t){return setTimeout(t,0|1e3*(l-c.time)+1)},c===o&&(a=!0),v(2)},c.fps=function(t){return arguments.length?(i=t,s=1/(i||60),l=this.time+s,void c.wake()):i},c.useRAF=function(t){return arguments.length?(c.sleep(),p=t,void c.fps(i)):p},c.fps(t),setTimeout(function(){p&&(!r||5>c.frame)&&c.useRAF(!1)},1500)}),s=c.Ticker.prototype=new c.events.EventDispatcher,s.constructor=c.Ticker;var A=v("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,X){a||o.wake();var i=this.vars.useFrames?q:X;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});o=A.ticker=new c.Ticker,s=A.prototype,s._dirty=s._gc=s._initted=s._paused=!1,s._totalTime=s._time=0,s._rawPrevTime=-1,s._next=s._last=s._onUpdate=s._timeline=s.timeline=null,s._paused=!1;var O=function(){a&&C()-P>2e3&&o.wake(),setTimeout(O,2e3)};O(),s.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},s.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},s.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},s.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},s.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},s.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},s.render=function(){},s.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},s.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&i+this.totalDuration()/this._timeScale>t},s._enabled=function(t,e){return a||o.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},s._kill=function(){return this._enabled(!1,!1)},s.kill=function(t,e){return this._kill(t,e),this},s._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},s._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},s.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=p(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},s.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},s.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},s.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},s.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},s.totalTime=function(t,e,i){if(a||o.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>t&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==t||0===this._duration)&&(this.render(t,e,!1),M.length&&W())}return this},s.progress=s.totalProgress=function(t,e){return arguments.length?this.totalTime(this.duration()*t,e):this._time/this.duration()},s.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},s.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},s.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||u,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},s.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},s.paused=function(t){if(!arguments.length)return this._paused;if(t!=this._paused&&this._timeline){a||t||o.wake();var e=this._timeline,i=e.rawTime(),n=i-this._pauseTime;!t&&e.smoothChildTiming&&(this._startTime+=n,this._uncache(!1)),this._pauseTime=t?i:null,this._paused=t,this._active=this.isActive(),!t&&0!==n&&this._initted&&this.duration()&&this.render(e.smoothChildTiming?this._totalTime:(i-this._startTime)/this._timeScale,!0,!0)}return this._gc&&!t&&this._enabled(!0,!1),this};var D=v("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});s=D.prototype=new A,s.constructor=D,s.kill()._gc=!1,s._first=s._last=s._recent=null,s._sortChildren=!1,s.add=s.insert=function(t,e){var i,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),i=this._last,this._sortChildren)for(n=t._startTime;i&&i._startTime>n;)i=i._prev;return i?(t._next=i._next,i._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=i,this._recent=t,this._timeline&&this._uncache(!0),this},s._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},s.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),
r=n},s.rawTime=function(){return a||o.wake(),this._totalTime};var $=v("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=$.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:$.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[$.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&p(e))&&"number"!=typeof e[0])for(this._targets=o=d(e),this._propLookup=[],this._siblings=[],r=0;o.length>r;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(d(s))):(this._siblings[r]=B(s,this,!1),1===l&&this._siblings[r].length>1&&Y(s,this,null,1,this._siblings[r])):(s=o[r--]=$.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=B(e,this,!1),1===l&&this._siblings.length>1&&Y(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-u,this.render(-this._delay))},!0),R=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)F[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!I[i]||I[i]&&I[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};s=$.prototype=new A,s.constructor=$,s.kill()._gc=!1,s.ratio=0,s._firstPT=s._targets=s._overwrittenProps=s._startAt=null,s._notifyPluginsOfEnabled=s._lazy=!1,$.version="1.15.1",$.defaultEase=s._ease=new w(null,null,1,1),$.defaultOverwrite="auto",$.ticker=o,$.autoSleep=!0,$.lagSmoothing=function(t,e){o.lagSmoothing(t,e)},$.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?($.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var M=[],N={},L=$._internals={isArray:p,isSelector:R,lazyTweens:M},I=$._plugins={},j=L.tweenLookup={},z=0,F=L.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},q=A._rootFramesTimeline=new D,X=A._rootTimeline=new D,W=L.lazyRender=function(){var t,e=M.length;for(N={};--e>-1;)t=M[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);M.length=0};X._startTime=o.time,q._startTime=o.frame,X._active=q._active=!0,setTimeout(W,1),A._updateRoot=$.render=function(){var t,e,i;if(M.length&&W(),X.render((o.time-X._startTime)*X._timeScale,!1,!1),q.render((o.frame-q._startTime)*q._timeScale,!1,!1),M.length&&W(),!(o.frame%120)){for(i in j){for(e=j[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete j[i]}if(i=X._first,(!i||i._paused)&&$.autoSleep&&!q._first&&1===o._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||o.sleep()}}},o.addEventListener("tick",A._updateRoot);var B=function(t,e,i){var n,r,s=t._gsTweenID;if(j[s||(t._gsTweenID=s="t"+z++)]||(j[s]={target:t,tweens:[]}),e&&(n=j[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return j[s].tweens},U=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=$.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},Y=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;l>s;s++)if((a=r[s])!==e)a._gc||U(a,e)&&a._enabled(!1,!1)&&(o=!0);else if(5===n)break;return o}var c,d=e._startTime+u,h=[],p=0,f=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(c=c||V(e,0,f),0===V(a,c,f)&&(h[p++]=a)):d>=a._startTime&&a._startTime+a.totalDuration()/a._timeScale>d&&((f||!a._initted)&&2e-10>=d-a._startTime||(h[p++]=a)));for(s=p;--s>-1;)if(a=h[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!U(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},V=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&2*u>s-e?u:(s+=t.totalDuration()/t._timeScale/r)>e+u?0:s-e-u};s._init=function(){var t,e,i,n,r,s=this.vars,o=this._overwrittenProps,a=this._duration,l=!!s.immediateRender,c=s.ease;if(s.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in s.startAt)r[n]=s.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=l&&s.lazy!==!1,r.startAt=r.delay=null,this._startAt=$.to(this.target,0,r),l)if(this._time>0)this._startAt=null;else if(0!==a)return}else if(s.runBackwards&&0!==a)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(l=!1),i={};for(n in s)F[n]&&"autoCSS"!==n||(i[n]=s[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=l&&s.lazy!==!1,i.immediateRender=l,this._startAt=$.to(this.target,0,i),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=c=c?c instanceof w?c:"function"==typeof c?new w(c,s.easeParams):T[c]||$.defaultEase:$.defaultEase,s.easeParams instanceof Array&&c.config&&(this._ease=c.config.apply(c,s.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(t=this._targets.length;--t>-1;)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o);if(e&&$._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),s.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=s.onUpdate,this._initted=!0},s._initProps=function(e,i,n,r){var s,o,a,l,c,u;if(null==e)return!1;N[e._gsTweenID]&&W(),this.vars.css||e.style&&e!==t&&e.nodeType&&I.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(s in this.vars){if(u=this.vars[s],F[s])u&&(u instanceof Array||u.push&&p(u))&&-1!==u.join("").indexOf("{self}")&&(this.vars[s]=u=this._swapSelfInParams(u,this));else if(I[s]&&(l=new I[s])._onInitTween(e,this.vars[s],this)){for(this._firstPT=c={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:!0,n:s,pg:!0,pr:l._priority},o=l._overwriteProps.length;--o>-1;)i[l._overwriteProps[o]]=this._firstPT;(l._priority||l._onInitAllProps)&&(a=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0)}else this._firstPT=i[s]=c={_next:this._firstPT,t:e,p:s,f:"function"==typeof e[s],n:s,pg:!1,pr:0},c.s=c.f?e[s.indexOf("set")||"function"!=typeof e["get"+s.substr(3)]?s:"get"+s.substr(3)]():parseFloat(e[s]),c.c="string"==typeof u&&"="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*Number(u.substr(2)):Number(u)-c.s||0;c&&c._next&&(c._next._prev=c)}return r&&this._kill(r,e)?this._initProps(e,i,n,r):this._overwrite>1&&this._firstPT&&n.length>1&&Y(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(N[e._gsTweenID]=!0),a)},s.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,c=this._rawPrevTime;if(t>=l)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete"),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(0===t||0>c||c===u&&"isPause"!==this.data)&&c!==t&&(i=!0,c>u&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||c===t?t:u);else if(1e-7>t)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&c>0&&c!==u)&&(r="onReverseComplete",n=this._reversed),0>t&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(c>=0&&(c!==u||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||c===t?t:u)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var d=t/l,h=this._easeType,p=this._easePower;(1===h||3===h&&d>=.5)&&(d=1-d),3===h&&(d*=2),1===p?d*=d:2===p?d*=d*d:3===p?d*=d*d*d:4===p&&(d*=d*d*d*d),this.ratio=1===h?1-d:2===h?d:.5>t/l?d/2:1-d/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=c,M.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0!==this._time||0===l)&&(e||this.vars.onStart.apply(this.vars.onStartScope||this,this.vars.onStartParams||y))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(0>t&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n)&&this._onUpdate.apply(this.vars.onUpdateScope||this,this.vars.onUpdateParams||y)),r&&(!this._gc||i)&&(0>t&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this.vars[r].apply(this.vars[r+"Scope"]||this,this.vars[r+"Params"]||y),0===l&&this._rawPrevTime===u&&o!==u&&(this._rawPrevTime=0))}},s._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:$.selector(e)||e;var n,r,s,o,a,l,c,u,d;if((p(e)||R(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n])&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(c=t||a,u=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&($.onOverwrite||this.vars.onOverwrite)){for(s in c)a[s]&&(d||(d=[]),d.push(s));if(!U(this,i,e,d))return!1}for(s in c)(o=a[s])&&(o.pg&&o.t._kill(c)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},s.invalidate=function(){return this._notifyPluginsOfEnabled&&$._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-u,this.render(-this._delay)),this},s._enabled=function(t,e){if(a||o.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=B(n[i],this,!0);else this._siblings=B(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&$._onPluginEvent(t?"_onEnable":"_onDisable",this)},$.to=function(t,e,i){return new $(t,e,i)},$.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new $(t,e,i)},$.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new $(t,e,n)},$.delayedCall=function(t,e,i,n,r){return new $(e,0,{delay:t,onComplete:e,onCompleteParams:i,onCompleteScope:n,onReverseComplete:e,onReverseCompleteParams:i,onReverseCompleteScope:n,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},$.set=function(t,e){return new $(t,0,e)},$.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:$.selector(t)||t;var i,n,r,s;if((p(t)||R(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat($.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=B(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},$.killTweensOf=$.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=$.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var G=v("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=G.prototype},!0);if(s=G.prototype,G.version="1.10.1",G.API=2,s._firstPT=null,s._addTween=function(t,e,i,n,r,s){var o,a;return null!=n&&(o="number"==typeof n||"="!==n.charAt(1)?Number(n)-i:parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)))?(this._firstPT=a={_next:this._firstPT,t:t,p:e,s:i,c:o,f:"function"==typeof t[e],n:r||e,r:s},a._next&&(a._next._prev=a),a):void 0},s.setRatio=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.c*t+i.s,i.r?e=Math.round(e):n>e&&e>-n&&(e=0),i.f?i.t[i.p](e):i.t[i.p]=e,i=i._next},s._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},s._roundProps=function(t,e){for(var i=this._firstPT;i;)(t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&(i.r=e),i=i._next},$._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},G.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===G.API&&(I[(new t[e])._propName]=t[e]);return!0},g.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},o=v("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){G.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new G(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,G.activate([o]),o},n=t._gsQueue){for(r=0;n.length>r;r++)n[r]();for(s in f)f[s].func||t.console.log("GSAP encountered missing dependency: com.greensock."+s)}a=!1}}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenMax"),$(document).ready(function(){$(".nav-icon").click(function(){$(this).toggleClass("open"),$("#menu").fadeToggle("opened-menu")}),$("#carousel").waterwheelCarousel({}),$(".slider").slick({arrows:!1,dots:!0,mobileFirst:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
