!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function i(e,t){t=t||ie;var i=t.createElement("script");i.text=e,t.head.appendChild(i).parentNode.removeChild(i)}function n(e){var t=!!e&&"length"in e&&e.length,i=ve.type(e);return"function"!==i&&!ve.isWindow(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function s(e,t,i){return ve.isFunction(t)?ve.grep(e,function(e,n){return!!t.call(e,n,e)!==i}):t.nodeType?ve.grep(e,function(e){return e===t!==i}):"string"!=typeof t?ve.grep(e,function(e){return ae.call(t,e)>-1!==i}):ke.test(t)?ve.filter(t,e,i):(t=ve.filter(t,e),ve.grep(e,function(e){return ae.call(t,e)>-1!==i&&1===e.nodeType}))}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return ve.each(e.match(ze)||[],function(e,i){t[i]=!0}),t}function l(e){return e}function d(e){throw e}function c(e,t,i,n){var r;try{e&&ve.isFunction(r=e.promise)?r.call(e).done(t).fail(i):e&&ve.isFunction(r=e.then)?r.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}function u(){ie.removeEventListener("DOMContentLoaded",u),e.removeEventListener("load",u),ve.ready()}function p(){this.expando=ve.expando+p.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:je.test(e)?JSON.parse(e):e)}function h(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(_e,"-$&").toLowerCase(),i=e.getAttribute(n),"string"==typeof i){try{i=f(i)}catch(r){}Ne.set(e,t,i)}else i=void 0;return i}function v(e,t,i,n){var r,s=1,o=20,a=n?function(){return n.cur()}:function(){return ve.css(e,t,"")},l=a(),d=i&&i[3]||(ve.cssNumber[t]?"":"px"),c=(ve.cssNumber[t]||"px"!==d&&+l)&&qe.exec(ve.css(e,t));if(c&&c[3]!==d){d=d||c[3],i=i||[],c=+l||1;do s=s||".5",c/=s,ve.style(e,t,c+d);while(s!==(s=a()/l)&&1!==s&&--o)}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=d,n.start=c,n.end=r)),r}function m(e){var t,i=e.ownerDocument,n=e.nodeName,r=Xe[n];return r?r:(t=i.body.appendChild(i.createElement(n)),r=ve.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Xe[n]=r,r)}function g(e,t){for(var i,n,r=[],s=0,o=e.length;s<o;s++)n=e[s],n.style&&(i=n.style.display,t?("none"===i&&(r[s]=He.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&Re(n)&&(r[s]=m(n))):"none"!==i&&(r[s]="none",He.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}function y(e,t){var i;return i="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?ve.merge([e],i):i}function w(e,t){for(var i=0,n=e.length;i<n;i++)He.set(e[i],"globalEval",!t||He.get(t[i],"globalEval"))}function b(e,t,i,n,r){for(var s,o,a,l,d,c,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if(s=e[f],s||0===s)if("object"===ve.type(s))ve.merge(p,s.nodeType?[s]:s);else if(Ke.test(s)){for(o=o||u.appendChild(t.createElement("div")),a=(Ge.exec(s)||["",""])[1].toLowerCase(),l=Ue[a]||Ue._default,o.innerHTML=l[1]+ve.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;ve.merge(p,o.childNodes),o=u.firstChild,o.textContent=""}else p.push(t.createTextNode(s));for(u.textContent="",f=0;s=p[f++];)if(n&&ve.inArray(s,n)>-1)r&&r.push(s);else if(d=ve.contains(s.ownerDocument,s),o=y(u.appendChild(s),"script"),d&&w(o),i)for(c=0;s=o[c++];)Ve.test(s.type||"")&&i.push(s);return u}function x(){return!0}function T(){return!1}function S(){try{return ie.activeElement}catch(e){}}function C(e,t,i,n,r,s){var o,a;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=void 0);for(a in t)C(e,a,i,n,t[a],s);return e}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=T;else if(!r)return e;return 1===s&&(o=r,r=function(e){return ve().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=ve.guid++)),e.each(function(){ve.event.add(this,t,r,n,i)})}function k(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?ve(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $(e){var t=rt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function M(e,t){var i,n,r,s,o,a,l,d;if(1===t.nodeType){if(He.hasData(e)&&(s=He.access(e),o=He.set(t,s),d=s.events)){delete o.handle,o.events={};for(r in d)for(i=0,n=d[r].length;i<n;i++)ve.event.add(t,r,d[r][i])}Ne.hasData(e)&&(a=Ne.access(e),l=ve.extend({},a),Ne.set(t,l))}}function P(e,t){var i=t.nodeName.toLowerCase();"input"===i&&Ye.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function A(e,t,n,r){t=se.apply([],t);var s,o,a,l,d,c,u=0,p=e.length,f=p-1,h=t[0],v=ve.isFunction(h);if(v||p>1&&"string"==typeof h&&!fe.checkClone&&nt.test(h))return e.each(function(i){var s=e.eq(i);v&&(t[0]=h.call(this,i,s.html())),A(s,t,n,r)});if(p&&(s=b(t,e[0].ownerDocument,!1,e,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=ve.map(y(s,"script"),E),l=a.length;u<p;u++)d=s,u!==f&&(d=ve.clone(d,!0,!0),l&&ve.merge(a,y(d,"script"))),n.call(e[u],d,u);if(l)for(c=a[a.length-1].ownerDocument,ve.map(a,$),u=0;u<l;u++)d=a[u],Ve.test(d.type||"")&&!He.access(d,"globalEval")&&ve.contains(c,d)&&(d.src?ve._evalUrl&&ve._evalUrl(d.src):i(d.textContent.replace(st,""),c))}return e}function z(e,t,i){for(var n,r=t?ve.filter(t,e):e,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||ve.cleanData(y(n)),n.parentNode&&(i&&ve.contains(n.ownerDocument,n)&&w(y(n,"script")),n.parentNode.removeChild(n));return e}function D(e,t,i){var n,r,s,o,a=e.style;return i=i||lt(e),i&&(o=i.getPropertyValue(t)||i[t],""!==o||ve.contains(e.ownerDocument,e)||(o=ve.style(e,t)),!fe.pixelMarginRight()&&at.test(o)&&ot.test(t)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function O(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function L(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=ft.length;i--;)if(e=ft[i]+t,e in ht)return e}function I(e){var t=ve.cssProps[e];return t||(t=ve.cssProps[e]=L(e)||e),t}function H(e,t,i){var n=qe.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function N(e,t,i,n,r){var s,o=0;for(s=i===(n?"border":"content")?4:"width"===t?1:0;s<4;s+=2)"margin"===i&&(o+=ve.css(e,i+Be[s],!0,r)),n?("content"===i&&(o-=ve.css(e,"padding"+Be[s],!0,r)),"margin"!==i&&(o-=ve.css(e,"border"+Be[s]+"Width",!0,r))):(o+=ve.css(e,"padding"+Be[s],!0,r),"padding"!==i&&(o+=ve.css(e,"border"+Be[s]+"Width",!0,r)));return o}function j(e,t,i){var n,r=lt(e),s=D(e,t,r),o="border-box"===ve.css(e,"boxSizing",!1,r);return at.test(s)?s:(n=o&&(fe.boxSizingReliable()||s===e.style[t]),"auto"===s&&(s=e["offset"+t[0].toUpperCase()+t.slice(1)]),s=parseFloat(s)||0,s+N(e,t,i||(o?"border":"content"),n,r)+"px")}function _(e,t,i,n,r){return new _.prototype.init(e,t,i,n,r)}function F(){mt&&(ie.hidden===!1&&e.requestAnimationFrame?e.requestAnimationFrame(F):e.setTimeout(F,ve.fx.interval),ve.fx.tick())}function q(){return e.setTimeout(function(){vt=void 0}),vt=ve.now()}function B(e,t){var i,n=0,r={height:e};for(t=t?1:0;n<4;n+=2-t)i=Be[n],r["margin"+i]=r["padding"+i]=e;return t&&(r.opacity=r.width=e),r}function R(e,t,i){for(var n,r=(Y.tweeners[t]||[]).concat(Y.tweeners["*"]),s=0,o=r.length;s<o;s++)if(n=r[s].call(i,t,e))return n}function W(e,t,i){var n,r,s,o,a,l,d,c,u="width"in t||"height"in t,p=this,f={},h=e.style,v=e.nodeType&&Re(e),m=He.get(e,"fxshow");i.queue||(o=ve._queueHooks(e,"fx"),null==o.unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,ve.queue(e,"fx").length||o.empty.fire()})}));for(n in t)if(r=t[n],gt.test(r)){if(delete t[n],s=s||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!m||void 0===m[n])continue;v=!0}f[n]=m&&m[n]||ve.style(e,n)}if(l=!ve.isEmptyObject(t),l||!ve.isEmptyObject(f)){u&&1===e.nodeType&&(i.overflow=[h.overflow,h.overflowX,h.overflowY],d=m&&m.display,null==d&&(d=He.get(e,"display")),c=ve.css(e,"display"),"none"===c&&(d?c=d:(g([e],!0),d=e.style.display||d,c=ve.css(e,"display"),g([e]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===ve.css(e,"float")&&(l||(p.done(function(){h.display=d}),null==d&&(c=h.display,d="none"===c?"":c)),h.display="inline-block")),i.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=i.overflow[0],h.overflowX=i.overflow[1],h.overflowY=i.overflow[2]})),l=!1;for(n in f)l||(m?"hidden"in m&&(v=m.hidden):m=He.access(e,"fxshow",{display:d}),s&&(m.hidden=!v),v&&g([e],!0),p.done(function(){v||g([e]),He.remove(e,"fxshow");for(n in f)ve.style(e,n,f[n])})),l=R(v?m[n]:0,n,p),n in m||(m[n]=l.start,v&&(l.end=l.start,l.start=0))}}function X(e,t){var i,n,r,s,o;for(i in e)if(n=ve.camelCase(i),r=t[n],s=e[i],Array.isArray(s)&&(r=s[1],s=e[i]=s[0]),i!==n&&(e[n]=s,delete e[i]),o=ve.cssHooks[n],o&&"expand"in o){s=o.expand(s),delete e[n];for(i in s)i in e||(e[i]=s[i],t[i]=r)}else t[n]=r}function Y(e,t,i){var n,r,s=0,o=Y.prefilters.length,a=ve.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=vt||q(),i=Math.max(0,d.startTime+d.duration-t),n=i/d.duration||0,s=1-n,o=0,l=d.tweens.length;o<l;o++)d.tweens[o].run(s);return a.notifyWith(e,[d,s,i]),s<1&&l?i:(l||a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d]),!1)},d=a.promise({elem:e,props:ve.extend({},t),opts:ve.extend(!0,{specialEasing:{},easing:ve.easing._default},i),originalProperties:t,originalOptions:i,startTime:vt||q(),duration:i.duration,tweens:[],createTween:function(t,i){var n=ve.Tween(e,d.opts,t,i,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(n),n},stop:function(t){var i=0,n=t?d.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)d.tweens[i].run(1);return t?(a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d,t])):a.rejectWith(e,[d,t]),this}}),c=d.props;for(X(c,d.opts.specialEasing);s<o;s++)if(n=Y.prefilters[s].call(d,e,c,d.opts))return ve.isFunction(n.stop)&&(ve._queueHooks(d.elem,d.opts.queue).stop=ve.proxy(n.stop,n)),n;return ve.map(c,R,d),ve.isFunction(d.opts.start)&&d.opts.start.call(e,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),ve.fx.timer(ve.extend(l,{elem:e,anim:d,queue:d.opts.queue})),d}function G(e){var t=e.match(ze)||[];return t.join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function U(e,t,i,n){var r;if(Array.isArray(t))ve.each(t,function(t,r){i||Mt.test(e)?n(e,r):U(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,i,n)});else if(i||"object"!==ve.type(t))n(e,t);else for(r in t)U(e+"["+r+"]",t[r],i,n)}function K(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,r=0,s=t.toLowerCase().match(ze)||[];if(ve.isFunction(i))for(;n=s[r++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function Q(e,t,i,n){function r(a){var l;return s[a]=!0,ve.each(e[a]||[],function(e,a){var d=a(t,i,n);return"string"!=typeof d||o||s[d]?o?!(l=d):void 0:(t.dataTypes.unshift(d),r(d),!1)}),l}var s={},o=e===Ft;return r(t.dataTypes[0])||!s["*"]&&r("*")}function J(e,t){var i,n,r=ve.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&ve.extend(!0,e,n),e}function Z(e,t,i){for(var n,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)s=l[0];else{for(r in i){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),i[s]}function ee(e,t,i,n){var r,s,o,a,l,d={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)d[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(i[e.responseFields[s]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(o=d[l+" "+s]||d["* "+s],!o)for(r in d)if(a=r.split(" "),a[1]===s&&(o=d[l+" "+a[0]]||d["* "+a[0]])){o===!0?o=d[r]:d[r]!==!0&&(s=a[0],c.unshift(a[1]));break}if(o!==!0)if(o&&e["throws"])t=o(t);else try{t=o(t)}catch(u){return{state:"parsererror",error:o?u:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}var te=[],ie=e.document,ne=Object.getPrototypeOf,re=te.slice,se=te.concat,oe=te.push,ae=te.indexOf,le={},de=le.toString,ce=le.hasOwnProperty,ue=ce.toString,pe=ue.call(Object),fe={},he="3.2.1",ve=function(e,t){return new ve.fn.init(e,t)},me=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,ye=/-([a-z])/g,we=function(e,t){return t.toUpperCase()};ve.fn=ve.prototype={jquery:he,constructor:ve,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ve.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ve.each(this,e)},map:function(e){return this.pushStack(ve.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:te.sort,splice:te.splice},ve.extend=ve.fn.extend=function(){var e,t,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,d=!1;for("boolean"==typeof o&&(d=o,o=arguments[a]||{},a++),"object"==typeof o||ve.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=o[t],n=e[t],o!==n&&(d&&n&&(ve.isPlainObject(n)||(r=Array.isArray(n)))?(r?(r=!1,s=i&&Array.isArray(i)?i:[]):s=i&&ve.isPlainObject(i)?i:{},o[t]=ve.extend(d,s,n)):void 0!==n&&(o[t]=n));return o},ve.extend({expando:"jQuery"+(he+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ve.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ve.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==de.call(e))&&(!(t=ne(e))||(i=ce.call(t,"constructor")&&t.constructor,"function"==typeof i&&ue.call(i)===pe))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[de.call(e)]||"object":typeof e},globalEval:function(e){i(e)},camelCase:function(e){return e.replace(ge,"ms-").replace(ye,we)},each:function(e,t){var i,r=0;if(n(e))for(i=e.length;r<i&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(me,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?ve.merge(i,"string"==typeof e?[e]:e):oe.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:ae.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,r=e.length;n<i;n++)e[r++]=t[n];return e.length=r,e},grep:function(e,t,i){for(var n,r=[],s=0,o=e.length,a=!i;s<o;s++)n=!t(e[s],s),n!==a&&r.push(e[s]);return r},map:function(e,t,i){var r,s,o=0,a=[];if(n(e))for(r=e.length;o<r;o++)s=t(e[o],o,i),null!=s&&a.push(s);else for(o in e)s=t(e[o],o,i),null!=s&&a.push(s);return se.apply([],a)},guid:1,proxy:function(e,t){var i,n,r;if("string"==typeof t&&(i=e[t],t=e,e=i),ve.isFunction(e))return n=re.call(arguments,2),r=function(){return e.apply(t||this,n.concat(re.call(arguments)))},r.guid=e.guid=e.guid||ve.guid++,r},now:Date.now,support:fe}),"function"==typeof Symbol&&(ve.fn[Symbol.iterator]=te[Symbol.iterator]),ve.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,i,n){var r,s,o,a,l,d,c,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!n&&((t?t.ownerDocument||t:q)!==O&&D(t),t=t||O,I)){if(11!==h&&(l=ge.exec(e)))if(r=l[1]){if(9===h){if(!(o=t.getElementById(r)))return i;if(o.id===r)return i.push(o),i}else if(p&&(o=p.getElementById(r))&&_(t,o)&&o.id===r)return i.push(o),i}else{if(l[2])return J.apply(i,t.getElementsByTagName(e)),i;if((r=l[3])&&T.getElementsByClassName&&t.getElementsByClassName)return J.apply(i,t.getElementsByClassName(r)),i}if(T.qsa&&!Y[e+" "]&&(!H||!H.test(e))){if(1!==h)p=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,Te):t.setAttribute("id",a=F),d=E(e),s=d.length;s--;)d[s]="#"+a+" "+f(d[s]);c=d.join(","),p=ye.test(e)&&u(t.parentNode)||t}if(c)try{return J.apply(i,p.querySelectorAll(c)),i}catch(v){}finally{a===F&&t.removeAttribute("id")}}}return M(e.replace(ae,"$1"),t,i,n)}function i(){function e(i,n){return t.push(i+" ")>S.cacheLength&&delete e[t.shift()],e[i+" "]=n}var t=[];return e}function n(e){return e[F]=!0,e}function r(e){var t=O.createElement("fieldset");try{return!!e(t)}catch(i){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function s(e,t){for(var i=e.split("|"),n=i.length;n--;)S.attrHandle[i[n]]=t}function o(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function a(e){return function(t){var i=t.nodeName.toLowerCase();return"input"===i&&t.type===e}}function l(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function d(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function c(e){return n(function(t){return t=+t,n(function(i,n){for(var r,s=e([],i.length,t),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function u(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function f(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function h(e,t,i){var n=t.dir,r=t.next,s=r||n,o=i&&"parentNode"===s,a=R++;return t.first?function(t,i,r){for(;t=t[n];)if(1===t.nodeType||o)return e(t,i,r);return!1}:function(t,i,l){var d,c,u,p=[B,a];if(l){for(;t=t[n];)if((1===t.nodeType||o)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||o)if(u=t[F]||(t[F]={}),c=u[t.uniqueID]||(u[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[n]||t;else{if((d=c[s])&&d[0]===B&&d[1]===a)return p[2]=d[2];if(c[s]=p,p[2]=e(t,i,l))return!0}return!1}}function v(e){return e.length>1?function(t,i,n){for(var r=e.length;r--;)if(!e[r](t,i,n))return!1;return!0}:e[0]}function m(e,i,n){for(var r=0,s=i.length;r<s;r++)t(e,i[r],n);return n}function g(e,t,i,n,r){for(var s,o=[],a=0,l=e.length,d=null!=t;a<l;a++)(s=e[a])&&(i&&!i(s,n,r)||(o.push(s),d&&t.push(a)));return o}function y(e,t,i,r,s,o){return r&&!r[F]&&(r=y(r)),s&&!s[F]&&(s=y(s,o)),n(function(n,o,a,l){var d,c,u,p=[],f=[],h=o.length,v=n||m(t||"*",a.nodeType?[a]:a,[]),y=!e||!n&&t?v:g(v,p,e,a,l),w=i?s||(n?e:h||r)?[]:o:y;if(i&&i(y,w,a,l),r)for(d=g(w,f),r(d,[],a,l),c=d.length;c--;)(u=d[c])&&(w[f[c]]=!(y[f[c]]=u));if(n){if(s||e){if(s){for(d=[],c=w.length;c--;)(u=w[c])&&d.push(y[c]=u);s(null,w=[],d,l)}for(c=w.length;c--;)(u=w[c])&&(d=s?ee(n,u):p[c])>-1&&(n[d]=!(o[d]=u))}}else w=g(w===o?w.splice(h,w.length):w),s?s(null,o,w,l):J.apply(o,w)})}function w(e){for(var t,i,n,r=e.length,s=S.relative[e[0].type],o=s||S.relative[" "],a=s?1:0,l=h(function(e){return e===t},o,!0),d=h(function(e){return ee(t,e)>-1},o,!0),c=[function(e,i,n){var r=!s&&(n||i!==P)||((t=i).nodeType?l(e,i,n):d(e,i,n));return t=null,r}];a<r;a++)if(i=S.relative[e[a].type])c=[h(v(c),i)];else{if(i=S.filter[e[a].type].apply(null,e[a].matches),i[F]){for(n=++a;n<r&&!S.relative[e[n].type];n++);return y(a>1&&v(c),a>1&&f(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),i,a<n&&w(e.slice(a,n)),n<r&&w(e=e.slice(n)),n<r&&f(e))}c.push(i)}return v(c)}function b(e,i){var r=i.length>0,s=e.length>0,o=function(n,o,a,l,d){var c,u,p,f=0,h="0",v=n&&[],m=[],y=P,w=n||s&&S.find.TAG("*",d),b=B+=null==y?1:Math.random()||.1,x=w.length;for(d&&(P=o===O||o||d);h!==x&&null!=(c=w[h]);h++){if(s&&c){for(u=0,o||c.ownerDocument===O||(D(c),a=!I);p=e[u++];)if(p(c,o||O,a)){l.push(c);break}d&&(B=b)}r&&((c=!p&&c)&&f--,n&&v.push(c))}if(f+=h,r&&h!==f){for(u=0;p=i[u++];)p(v,m,o,a);if(n){if(f>0)for(;h--;)v[h]||m[h]||(m[h]=K.call(l));m=g(m)}J.apply(l,m),d&&!n&&m.length>0&&f+i.length>1&&t.uniqueSort(l)}return d&&(B=b,P=y),v};return r?n(o):o}var x,T,S,C,k,E,$,M,P,A,z,D,O,L,I,H,N,j,_,F="sizzle"+1*new Date,q=e.document,B=0,R=0,W=i(),X=i(),Y=i(),G=function(e,t){return e===t&&(z=!0),0},V={}.hasOwnProperty,U=[],K=U.pop,Q=U.push,J=U.push,Z=U.slice,ee=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ie="[\\x20\\t\\r\\n\\f]",ne="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",re="\\["+ie+"*("+ne+")(?:"+ie+"*([*^$|!~]?=)"+ie+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ne+"))|)"+ie+"*\\]",se=":("+ne+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",oe=new RegExp(ie+"+","g"),ae=new RegExp("^"+ie+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ie+"+$","g"),le=new RegExp("^"+ie+"*,"+ie+"*"),de=new RegExp("^"+ie+"*([>+~]|"+ie+")"+ie+"*"),ce=new RegExp("="+ie+"*([^\\]'\"]*?)"+ie+"*\\]","g"),ue=new RegExp(se),pe=new RegExp("^"+ne+"$"),fe={ID:new RegExp("^#("+ne+")"),CLASS:new RegExp("^\\.("+ne+")"),TAG:new RegExp("^("+ne+"|[*])"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+se),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ie+"*(even|odd|(([+-]|)(\\d*)n|)"+ie+"*(?:([+-]|)"+ie+"*(\\d+)|))"+ie+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ie+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ie+"*((?:-\\d)?\\d*)"+ie+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ve=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,we=new RegExp("\\\\([\\da-f]{1,6}"+ie+"?|("+ie+")|.)","ig"),be=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},xe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Se=function(){D()},Ce=h(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(U=Z.call(q.childNodes),q.childNodes),U[q.childNodes.length].nodeType}catch(ke){J={apply:U.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}T=t.support={},k=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:q;return n!==O&&9===n.nodeType&&n.documentElement?(O=n,L=O.documentElement,I=!k(O),q!==O&&(i=O.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",Se,!1):i.attachEvent&&i.attachEvent("onunload",Se)),T.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),T.getElementsByTagName=r(function(e){return e.appendChild(O.createComment("")),!e.getElementsByTagName("*").length}),T.getElementsByClassName=me.test(O.getElementsByClassName),T.getById=r(function(e){return L.appendChild(e).id=F,!O.getElementsByName||!O.getElementsByName(F).length}),T.getById?(S.filter.ID=function(e){var t=e.replace(we,be);return function(e){return e.getAttribute("id")===t}},S.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&I){var i=t.getElementById(e);return i?[i]:[]}}):(S.filter.ID=function(e){var t=e.replace(we,be);return function(e){var i="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},S.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&I){var i,n,r,s=t.getElementById(e);if(s){if(i=s.getAttributeNode("id"),i&&i.value===e)return[s];for(r=t.getElementsByName(e),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===e)return[s]}return[]}}),S.find.TAG=T.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):T.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},S.find.CLASS=T.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&I)return t.getElementsByClassName(e)},N=[],H=[],(T.qsa=me.test(O.querySelectorAll))&&(r(function(e){L.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&H.push("[*^$]="+ie+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||H.push("\\["+ie+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+F+"-]").length||H.push("~="),e.querySelectorAll(":checked").length||H.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||H.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=O.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&H.push("name"+ie+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&H.push(":enabled",":disabled"),L.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&H.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),H.push(",.*:")})),(T.matchesSelector=me.test(j=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(e){T.disconnectedMatch=j.call(e,"*"),j.call(e,"[s!='']:x"),N.push("!=",se)}),H=H.length&&new RegExp(H.join("|")),N=N.length&&new RegExp(N.join("|")),t=me.test(L.compareDocumentPosition),_=t||me.test(L.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return z=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i?i:(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&i||!T.sortDetached&&t.compareDocumentPosition(e)===i?e===O||e.ownerDocument===q&&_(q,e)?-1:t===O||t.ownerDocument===q&&_(q,t)?1:A?ee(A,e)-ee(A,t):0:4&i?-1:1)}:function(e,t){if(e===t)return z=!0,0;var i,n=0,r=e.parentNode,s=t.parentNode,a=[e],l=[t];if(!r||!s)return e===O?-1:t===O?1:r?-1:s?1:A?ee(A,e)-ee(A,t):0;if(r===s)return o(e,t);for(i=e;i=i.parentNode;)a.unshift(i);for(i=t;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?o(a[n],l[n]):a[n]===q?-1:l[n]===q?1:0},O):O},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==O&&D(e),i=i.replace(ce,"='$1']"),T.matchesSelector&&I&&!Y[i+" "]&&(!N||!N.test(i))&&(!H||!H.test(i)))try{var n=j.call(e,i);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return t(i,O,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==O&&D(e),_(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==O&&D(e);var i=S.attrHandle[t.toLowerCase()],n=i&&V.call(S.attrHandle,t.toLowerCase())?i(e,t,!I):void 0;return void 0!==n?n:T.attributes||!I?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(xe,Te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,i=[],n=0,r=0;if(z=!T.detectDuplicates,A=!T.sortStable&&e.slice(0),e.sort(G),z){for(;t=e[r++];)t===e[r]&&(n=i.push(r));for(;n--;)e.splice(i[n],1)}return A=null,e},C=t.getText=function(e){var t,i="",n=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=C(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[n++];)i+=C(t);return i},S=t.selectors={cacheLength:50,createPseudo:n,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,be),e[3]=(e[3]||e[4]||e[5]||"").replace(we,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&ue.test(i)&&(t=E(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ie+")"+e+"("+ie+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(r){var s=t.attr(r,e);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(oe," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,i,n,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===r?function(e){return!!e.parentNode}:function(t,i,l){var d,c,u,p,f,h,v=s!==o?"nextSibling":"previousSibling",m=t.parentNode,g=a&&t.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(m){if(s){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?m.firstChild:m.lastChild],o&&y){for(p=m,u=p[F]||(p[F]={}),c=u[p.uniqueID]||(u[p.uniqueID]={}),d=c[e]||[],f=d[0]===B&&d[1],w=f&&d[2],p=f&&m.childNodes[f];p=++f&&p&&p[v]||(w=f=0)||h.pop();)if(1===p.nodeType&&++w&&p===t){c[e]=[B,f,w];break}}else if(y&&(p=t,u=p[F]||(p[F]={}),c=u[p.uniqueID]||(u[p.uniqueID]={}),d=c[e]||[],f=d[0]===B&&d[1],w=f),w===!1)for(;(p=++f&&p&&p[v]||(w=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++w||(y&&(u=p[F]||(p[F]={}),c=u[p.uniqueID]||(u[p.uniqueID]={}),c[e]=[B,w]),p!==t)););return w-=r,w===n||w%n===0&&w/n>=0}}},PSEUDO:function(e,i){var r,s=S.pseudos[e]||S.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return s[F]?s(i):s.length>1?(r=[e,e,"",i],S.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,r=s(e,i),o=r.length;o--;)n=ee(e,r[o]),e[n]=!(t[n]=r[o])}):function(e){return s(e,0,r)}):s}},pseudos:{not:n(function(e){var t=[],i=[],r=$(e.replace(ae,"$1"));return r[F]?n(function(e,t,i,n){for(var s,o=r(e,null,n,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))}):function(e,n,s){return t[0]=e,r(t,null,s,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return t(e,i).length>0}}),contains:n(function(e){return e=e.replace(we,be),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:n(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,be).toLowerCase(),function(t){var i;do if(i=I?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return i=i.toLowerCase(),i===e||0===i.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1;
}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:d(!1),disabled:d(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!S.pseudos.empty(e)},header:function(e){return ve.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,i){return[i<0?i+t:i]}),even:c(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:c(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:c(function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e}),gt:c(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}},S.pseudos.nth=S.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[x]=a(x);for(x in{submit:!0,reset:!0})S.pseudos[x]=l(x);return p.prototype=S.filters=S.pseudos,S.setFilters=new p,E=t.tokenize=function(e,i){var n,r,s,o,a,l,d,c=X[e+" "];if(c)return i?0:c.slice(0);for(a=e,l=[],d=S.preFilter;a;){n&&!(r=le.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=de.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(ae," ")}),a=a.slice(n.length));for(o in S.filter)!(r=fe[o].exec(a))||d[o]&&!(r=d[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?t.error(e):X(e,l).slice(0)},$=t.compile=function(e,t){var i,n=[],r=[],s=Y[e+" "];if(!s){for(t||(t=E(e)),i=t.length;i--;)s=w(t[i]),s[F]?n.push(s):r.push(s);s=Y(e,b(r,n)),s.selector=e}return s},M=t.select=function(e,t,i,n){var r,s,o,a,l,d="function"==typeof e&&e,c=!n&&E(e=d.selector||e);if(i=i||[],1===c.length){if(s=c[0]=c[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===t.nodeType&&I&&S.relative[s[1].type]){if(t=(S.find.ID(o.matches[0].replace(we,be),t)||[])[0],!t)return i;d&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(r=fe.needsContext.test(e)?0:s.length;r--&&(o=s[r],!S.relative[a=o.type]);)if((l=S.find[a])&&(n=l(o.matches[0].replace(we,be),ye.test(s[0].type)&&u(t.parentNode)||t))){if(s.splice(r,1),e=n.length&&f(s),!e)return J.apply(i,n),i;break}}return(d||$(e,c))(n,t,!I,i,!t||ye.test(e)&&u(t.parentNode)||t),i},T.sortStable=F.split("").sort(G).join("")===F,T.detectDuplicates=!!z,D(),T.sortDetached=r(function(e){return 1&e.compareDocumentPosition(O.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||s("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),T.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||s("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||s(te,function(e,t,i){var n;if(!i)return e[t]===!0?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);ve.find=be,ve.expr=be.selectors,ve.expr[":"]=ve.expr.pseudos,ve.uniqueSort=ve.unique=be.uniqueSort,ve.text=be.getText,ve.isXMLDoc=be.isXML,ve.contains=be.contains,ve.escapeSelector=be.escape;var xe=function(e,t,i){for(var n=[],r=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&ve(e).is(i))break;n.push(e)}return n},Te=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},Se=ve.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ke=/^.[^:#\[\.,]*$/;ve.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?ve.find.matchesSelector(n,e)?[n]:[]:ve.find.matches(e,ve.grep(t,function(e){return 1===e.nodeType}))},ve.fn.extend({find:function(e){var t,i,n=this.length,r=this;if("string"!=typeof e)return this.pushStack(ve(e).filter(function(){for(t=0;t<n;t++)if(ve.contains(r[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)ve.find(e,r[t],i);return n>1?ve.uniqueSort(i):i},filter:function(e){return this.pushStack(s(this,e||[],!1))},not:function(e){return this.pushStack(s(this,e||[],!0))},is:function(e){return!!s(this,"string"==typeof e&&Se.test(e)?ve(e):e||[],!1).length}});var Ee,$e=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Me=ve.fn.init=function(e,t,i){var n,r;if(!e)return this;if(i=i||Ee,"string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:$e.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ve?t[0]:t,ve.merge(this,ve.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:ie,!0)),Ce.test(n[1])&&ve.isPlainObject(t))for(n in t)ve.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return r=ie.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ve.isFunction(e)?void 0!==i.ready?i.ready(e):e(ve):ve.makeArray(e,this)};Me.prototype=ve.fn,Ee=ve(ie);var Pe=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};ve.fn.extend({has:function(e){var t=ve(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(ve.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,r=this.length,s=[],o="string"!=typeof e&&ve(e);if(!Se.test(e))for(;n<r;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&ve.find.matchesSelector(i,e))){s.push(i);break}return this.pushStack(s.length>1?ve.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?ae.call(ve(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ve.uniqueSort(ve.merge(this.get(),ve(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ve.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,i){return xe(e,"parentNode",i)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,i){return xe(e,"nextSibling",i)},prevUntil:function(e,t,i){return xe(e,"previousSibling",i)},siblings:function(e){return Te((e.parentNode||{}).firstChild,e)},children:function(e){return Te(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),ve.merge([],e.childNodes))}},function(e,t){ve.fn[e]=function(i,n){var r=ve.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=ve.filter(n,r)),this.length>1&&(Ae[e]||ve.uniqueSort(r),Pe.test(e)&&r.reverse()),this.pushStack(r)}});var ze=/[^\x20\t\r\n\f]+/g;ve.Callbacks=function(e){e="string"==typeof e?a(e):ve.extend({},e);var t,i,n,r,s=[],o=[],l=-1,d=function(){for(r=r||e.once,n=t=!0;o.length;l=-1)for(i=o.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&e.stopOnFalse&&(l=s.length,i=!1);e.memory||(i=!1),t=!1,r&&(s=i?[]:"")},c={add:function(){return s&&(i&&!t&&(l=s.length-1,o.push(i)),function n(t){ve.each(t,function(t,i){ve.isFunction(i)?e.unique&&c.has(i)||s.push(i):i&&i.length&&"string"!==ve.type(i)&&n(i)})}(arguments),i&&!t&&d()),this},remove:function(){return ve.each(arguments,function(e,t){for(var i;(i=ve.inArray(t,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(e){return e?ve.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||t||(s=i=""),this},locked:function(){return!!r},fireWith:function(e,i){return r||(i=i||[],i=[e,i.slice?i.slice():i],o.push(i),t||d()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},ve.extend({Deferred:function(t){var i=[["notify","progress",ve.Callbacks("memory"),ve.Callbacks("memory"),2],["resolve","done",ve.Callbacks("once memory"),ve.Callbacks("once memory"),0,"resolved"],["reject","fail",ve.Callbacks("once memory"),ve.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return r.then(null,e)},pipe:function(){var e=arguments;return ve.Deferred(function(t){ve.each(i,function(i,n){var r=ve.isFunction(e[n[4]])&&e[n[4]];s[n[1]](function(){var e=r&&r.apply(this,arguments);e&&ve.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,n,r){function s(t,i,n,r){return function(){var a=this,c=arguments,u=function(){var e,u;if(!(t<o)){if(e=n.apply(a,c),e===i.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,ve.isFunction(u)?r?u.call(e,s(o,i,l,r),s(o,i,d,r)):(o++,u.call(e,s(o,i,l,r),s(o,i,d,r),s(o,i,l,i.notifyWith))):(n!==l&&(a=void 0,c=[e]),(r||i.resolveWith)(a,c))}},p=r?u:function(){try{u()}catch(e){ve.Deferred.exceptionHook&&ve.Deferred.exceptionHook(e,p.stackTrace),t+1>=o&&(n!==d&&(a=void 0,c=[e]),i.rejectWith(a,c))}};t?p():(ve.Deferred.getStackHook&&(p.stackTrace=ve.Deferred.getStackHook()),e.setTimeout(p))}}var o=0;return ve.Deferred(function(e){i[0][3].add(s(0,e,ve.isFunction(r)?r:l,e.notifyWith)),i[1][3].add(s(0,e,ve.isFunction(t)?t:l)),i[2][3].add(s(0,e,ve.isFunction(n)?n:d))}).promise()},promise:function(e){return null!=e?ve.extend(e,r):r}},s={};return ve.each(i,function(e,t){var o=t[2],a=t[5];r[t[1]]=o.add,a&&o.add(function(){n=a},i[3-e][2].disable,i[0][2].lock),o.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=o.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(e){var t=arguments.length,i=t,n=Array(i),r=re.call(arguments),s=ve.Deferred(),o=function(e){return function(i){n[e]=this,r[e]=arguments.length>1?re.call(arguments):i,--t||s.resolveWith(n,r)}};if(t<=1&&(c(e,s.done(o(i)).resolve,s.reject,!t),"pending"===s.state()||ve.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)c(r[i],o(i),s.reject);return s.promise()}});var De=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ve.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&De.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},ve.readyException=function(t){e.setTimeout(function(){throw t})};var Oe=ve.Deferred();ve.fn.ready=function(e){return Oe.then(e)["catch"](function(e){ve.readyException(e)}),this},ve.extend({isReady:!1,readyWait:1,ready:function(e){(e===!0?--ve.readyWait:ve.isReady)||(ve.isReady=!0,e!==!0&&--ve.readyWait>0||Oe.resolveWith(ie,[ve]))}}),ve.ready.then=Oe.then,"complete"===ie.readyState||"loading"!==ie.readyState&&!ie.documentElement.doScroll?e.setTimeout(ve.ready):(ie.addEventListener("DOMContentLoaded",u),e.addEventListener("load",u));var Le=function(e,t,i,n,r,s,o){var a=0,l=e.length,d=null==i;if("object"===ve.type(i)){r=!0;for(a in i)Le(e,t,a,i[a],!0,s,o)}else if(void 0!==n&&(r=!0,ve.isFunction(n)||(o=!0),d&&(o?(t.call(e,n),t=null):(d=t,t=function(e,t,i){return d.call(ve(e),i)})),t))for(;a<l;a++)t(e[a],i,o?n:n.call(e[a],a,t(e[a],i)));return r?e:d?t.call(e):l?t(e[0],i):s},Ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};p.uid=1,p.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,r=this.cache(e);if("string"==typeof t)r[ve.camelCase(t)]=i;else for(n in t)r[ve.camelCase(n)]=t[n];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ve.camelCase(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){Array.isArray(t)?t=t.map(ve.camelCase):(t=ve.camelCase(t),t=t in n?[t]:t.match(ze)||[]),i=t.length;for(;i--;)delete n[t[i]]}(void 0===t||ve.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ve.isEmptyObject(t)}};var He=new p,Ne=new p,je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,_e=/[A-Z]/g;ve.extend({hasData:function(e){return Ne.hasData(e)||He.hasData(e)},data:function(e,t,i){return Ne.access(e,t,i)},removeData:function(e,t){Ne.remove(e,t)},_data:function(e,t,i){return He.access(e,t,i)},_removeData:function(e,t){He.remove(e,t)}}),ve.fn.extend({data:function(e,t){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=Ne.get(s),1===s.nodeType&&!He.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=ve.camelCase(n.slice(5)),h(s,n,r[n])));He.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ne.set(this,e)}):Le(this,function(t){var i;if(s&&void 0===t){if(i=Ne.get(s,e),void 0!==i)return i;if(i=h(s,e),void 0!==i)return i}else this.each(function(){Ne.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Ne.remove(this,e)})}}),ve.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=He.get(e,t),i&&(!n||Array.isArray(i)?n=He.access(e,t,ve.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=ve.queue(e,t),n=i.length,r=i.shift(),s=ve._queueHooks(e,t),o=function(){ve.dequeue(e,t)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===t&&i.unshift("inprogress"),delete s.stop,r.call(e,o,s)),!n&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return He.get(e,i)||He.access(e,i,{empty:ve.Callbacks("once memory").add(function(){He.remove(e,[t+"queue",i])})})}}),ve.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?ve.queue(this[0],e):void 0===t?this:this.each(function(){var i=ve.queue(this,e,t);ve._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&ve.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ve.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,r=ve.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)i=He.get(s[o],e+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,qe=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],Re=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&ve.contains(e.ownerDocument,e)&&"none"===ve.css(e,"display")},We=function(e,t,i,n){var r,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];r=i.apply(e,n||[]);for(s in t)e.style[s]=o[s];return r},Xe={};ve.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Re(this)?ve(this).show():ve(this).hide()})}});var Ye=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ve=/^$|\/(?:java|ecma)script/i,Ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ue.optgroup=Ue.option,Ue.tbody=Ue.tfoot=Ue.colgroup=Ue.caption=Ue.thead,Ue.th=Ue.td;var Ke=/<|&#?\w+;/;!function(){var e=ie.createDocumentFragment(),t=e.appendChild(ie.createElement("div")),i=ie.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),t.appendChild(i),fe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Qe=ie.documentElement,Je=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,et=/^([^.]*)(?:\.(.+)|)/;ve.event={global:{},add:function(e,t,i,n,r){var s,o,a,l,d,c,u,p,f,h,v,m=He.get(e);if(m)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&ve.find.matchesSelector(Qe,r),i.guid||(i.guid=ve.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(t){return"undefined"!=typeof ve&&ve.event.triggered!==t.type?ve.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(ze)||[""],d=t.length;d--;)a=et.exec(t[d])||[],f=v=a[1],h=(a[2]||"").split(".").sort(),f&&(u=ve.event.special[f]||{},f=(r?u.delegateType:u.bindType)||f,u=ve.event.special[f]||{},c=ve.extend({type:f,origType:v,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&ve.expr.match.needsContext.test(r),namespace:h.join(".")},s),(p=l[f])||(p=l[f]=[],p.delegateCount=0,u.setup&&u.setup.call(e,n,h,o)!==!1||e.addEventListener&&e.addEventListener(f,o)),u.add&&(u.add.call(e,c),c.handler.guid||(c.handler.guid=i.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),ve.event.global[f]=!0)},remove:function(e,t,i,n,r){var s,o,a,l,d,c,u,p,f,h,v,m=He.hasData(e)&&He.get(e);if(m&&(l=m.events)){for(t=(t||"").match(ze)||[""],d=t.length;d--;)if(a=et.exec(t[d])||[],f=v=a[1],h=(a[2]||"").split(".").sort(),f){for(u=ve.event.special[f]||{},f=(n?u.delegateType:u.bindType)||f,p=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=p.length;s--;)c=p[s],!r&&v!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(p.splice(s,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(e,c));o&&!p.length&&(u.teardown&&u.teardown.call(e,h,m.handle)!==!1||ve.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)ve.event.remove(e,f+t[d],i,n,!0);ve.isEmptyObject(l)&&He.remove(e,"handle events")}},dispatch:function(e){var t,i,n,r,s,o,a=ve.event.fix(e),l=new Array(arguments.length),d=(He.get(this,"events")||{})[a.type]||[],c=ve.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,a)!==!1){for(o=ve.event.handlers.call(this,a,d),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,n=((ve.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,r,s,o,a=[],l=t.delegateCount,d=e.target;if(l&&d.nodeType&&!("click"===e.type&&e.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||d.disabled!==!0)){for(s=[],o={},i=0;i<l;i++)n=t[i],r=n.selector+" ",void 0===o[r]&&(o[r]=n.needsContext?ve(r,this).index(d)>-1:ve.find(r,this,null,[d]).length),o[r]&&s.push(n);s.length&&a.push({elem:d,handlers:s})}return d=this,l<t.length&&a.push({elem:d,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(ve.Event.prototype,e,{enumerable:!0,configurable:!0,get:ve.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ve.expando]?e:new ve.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ve.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},ve.Event=function(e,t){return this instanceof ve.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?x:T,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ve.extend(this,t),this.timeStamp=e&&e.timeStamp||ve.now(),void(this[ve.expando]=!0)):new ve.Event(e,t)},ve.Event.prototype={constructor:ve.Event,isDefaultPrevented:T,isPropagationStopped:T,isImmediatePropagationStopped:T,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ve.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Je.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ve.event.addProp),ve.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ve.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,r=e.relatedTarget,s=e.handleObj;return r&&(r===n||ve.contains(n,r))||(e.type=s.origType,i=s.handler.apply(this,arguments),e.type=t),i}}}),ve.fn.extend({on:function(e,t,i,n){return C(this,e,t,i,n)},one:function(e,t,i,n){return C(this,e,t,i,n,1)},off:function(e,t,i){var n,r;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,ve(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return t!==!1&&"function"!=typeof t||(i=t,t=void 0),i===!1&&(i=T),this.each(function(){ve.event.remove(this,e,i,t)})}});var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,it=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,rt=/^true\/(.*)/,st=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ve.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,i){var n,r,s,o,a=e.cloneNode(!0),l=ve.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ve.isXMLDoc(e)))for(o=y(a),s=y(e),n=0,r=s.length;n<r;n++)P(s[n],o[n]);if(t)if(i)for(s=s||y(e),o=o||y(a),n=0,r=s.length;n<r;n++)M(s[n],o[n]);else M(e,a);return o=y(a,"script"),o.length>0&&w(o,!l&&y(e,"script")),a},cleanData:function(e){for(var t,i,n,r=ve.event.special,s=0;void 0!==(i=e[s]);s++)if(Ie(i)){if(t=i[He.expando]){if(t.events)for(n in t.events)r[n]?ve.event.remove(i,n):ve.removeEvent(i,n,t.handle);i[He.expando]=void 0}i[Ne.expando]&&(i[Ne.expando]=void 0)}}}),ve.fn.extend({detach:function(e){return z(this,e,!0)},remove:function(e){return z(this,e)},text:function(e){return Le(this,function(e){return void 0===e?ve.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ve.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ve.clone(this,e,t)})},html:function(e){return Le(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!Ue[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=ve.htmlPrefilter(e);try{for(;i<n;i++)t=this[i]||{},1===t.nodeType&&(ve.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var i=this.parentNode;ve.inArray(this,e)<0&&(ve.cleanData(y(this)),i&&i.replaceChild(t,this))},e)}}),ve.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ve.fn[e]=function(e){for(var i,n=[],r=ve(e),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),ve(r[o])[t](i),oe.apply(n,i.get());return this.pushStack(n)}});var ot=/^margin/,at=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),lt=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Qe.appendChild(o);var t=e.getComputedStyle(a);i="1%"!==t.top,s="2px"===t.marginLeft,n="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Qe.removeChild(o),a=null}}var i,n,r,s,o=ie.createElement("div"),a=ie.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),ve.extend(fe,{pixelPosition:function(){return t(),i},boxSizingReliable:function(){return t(),n},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),s}}))}();var dt=/^(none|table(?!-c[ea]).+)/,ct=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},pt={letterSpacing:"0",fontWeight:"400"},ft=["Webkit","Moz","ms"],ht=ie.createElement("div").style;ve.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=D(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=ve.camelCase(t),l=ct.test(t),d=e.style;return l||(t=I(a)),o=ve.cssHooks[t]||ve.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(r=o.get(e,!1,n))?r:d[t]:(s=typeof i,"string"===s&&(r=qe.exec(i))&&r[1]&&(i=v(e,t,r),s="number"),null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(ve.cssNumber[a]?"":"px")),fe.clearCloneStyle||""!==i||0!==t.indexOf("background")||(d[t]="inherit"),o&&"set"in o&&void 0===(i=o.set(e,i,n))||(l?d.setProperty(t,i):d[t]=i)),void 0)}},css:function(e,t,i,n){var r,s,o,a=ve.camelCase(t),l=ct.test(t);return l||(t=I(a)),o=ve.cssHooks[t]||ve.cssHooks[a],o&&"get"in o&&(r=o.get(e,!0,i)),void 0===r&&(r=D(e,t,n)),"normal"===r&&t in pt&&(r=pt[t]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),ve.each(["height","width"],function(e,t){ve.cssHooks[t]={get:function(e,i,n){if(i)return!dt.test(ve.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?j(e,t,n):We(e,ut,function(){return j(e,t,n)})},set:function(e,i,n){var r,s=n&&lt(e),o=n&&N(e,t,n,"border-box"===ve.css(e,"boxSizing",!1,s),s);return o&&(r=qe.exec(i))&&"px"!==(r[3]||"px")&&(e.style[t]=i,i=ve.css(e,t)),H(e,i,o)}}}),ve.cssHooks.marginLeft=O(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(D(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ve.each({margin:"",padding:"",border:"Width"},function(e,t){ve.cssHooks[e+t]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[e+Be[n]+t]=s[n]||s[n-2]||s[0];return r}},ot.test(e)||(ve.cssHooks[e+t].set=H)}),ve.fn.extend({css:function(e,t){return Le(this,function(e,t,i){var n,r,s={},o=0;if(Array.isArray(t)){for(n=lt(e),r=t.length;o<r;o++)s[t[o]]=ve.css(e,t[o],!1,n);return s}return void 0!==i?ve.style(e,t,i):ve.css(e,t)},e,t,arguments.length>1)}}),ve.Tween=_,_.prototype={constructor:_,init:function(e,t,i,n,r,s){this.elem=e,this.prop=i,this.easing=r||ve.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=s||(ve.cssNumber[i]?"":"px")},cur:function(){var e=_.propHooks[this.prop];return e&&e.get?e.get(this):_.propHooks._default.get(this)},run:function(e){var t,i=_.propHooks[this.prop];return this.options.duration?this.pos=t=ve.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):_.propHooks._default.set(this),this}},_.prototype.init.prototype=_.prototype,_.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ve.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ve.fx.step[e.prop]?ve.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ve.cssProps[e.prop]]&&!ve.cssHooks[e.prop]?e.elem[e.prop]=e.now:ve.style(e.elem,e.prop,e.now+e.unit)}}},_.propHooks.scrollTop=_.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ve.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ve.fx=_.prototype.init,ve.fx.step={};var vt,mt,gt=/^(?:toggle|show|hide)$/,yt=/queueHooks$/;ve.Animation=ve.extend(Y,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return v(i.elem,e,qe.exec(t),i),i}]},tweener:function(e,t){ve.isFunction(e)?(t=e,e=["*"]):e=e.match(ze);for(var i,n=0,r=e.length;n<r;n++)i=e[n],Y.tweeners[i]=Y.tweeners[i]||[],Y.tweeners[i].unshift(t)},prefilters:[W],prefilter:function(e,t){t?Y.prefilters.unshift(e):Y.prefilters.push(e)}}),ve.speed=function(e,t,i){var n=e&&"object"==typeof e?ve.extend({},e):{complete:i||!i&&t||ve.isFunction(e)&&e,duration:e,easing:i&&t||t&&!ve.isFunction(t)&&t};return ve.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in ve.fx.speeds?n.duration=ve.fx.speeds[n.duration]:n.duration=ve.fx.speeds._default),null!=n.queue&&n.queue!==!0||(n.queue="fx"),n.old=n.complete,n.complete=function(){ve.isFunction(n.old)&&n.old.call(this),n.queue&&ve.dequeue(this,n.queue)},n},ve.fn.extend({fadeTo:function(e,t,i,n){return this.filter(Re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var r=ve.isEmptyObject(e),s=ve.speed(t,i,n),o=function(){var t=Y(this,ve.extend({},e),s);(r||He.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=ve.timers,o=He.get(this);if(r)o[r]&&o[r].stop&&n(o[r]);else for(r in o)o[r]&&o[r].stop&&yt.test(r)&&n(o[r]);
for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(i),t=!1,s.splice(r,1));!t&&i||ve.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,i=He.get(this),n=i[e+"queue"],r=i[e+"queueHooks"],s=ve.timers,o=n?n.length:0;for(i.finish=!0,ve.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish})}}),ve.each(["toggle","show","hide"],function(e,t){var i=ve.fn[t];ve.fn[t]=function(e,n,r){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(B(t,!0),e,n,r)}}),ve.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ve.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}}),ve.timers=[],ve.fx.tick=function(){var e,t=0,i=ve.timers;for(vt=ve.now();t<i.length;t++)e=i[t],e()||i[t]!==e||i.splice(t--,1);i.length||ve.fx.stop(),vt=void 0},ve.fx.timer=function(e){ve.timers.push(e),ve.fx.start()},ve.fx.interval=13,ve.fx.start=function(){mt||(mt=!0,F())},ve.fx.stop=function(){mt=null},ve.fx.speeds={slow:600,fast:200,_default:400},ve.fn.delay=function(t,i){return t=ve.fx?ve.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,n){var r=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(r)}})},function(){var e=ie.createElement("input"),t=ie.createElement("select"),i=t.appendChild(ie.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=i.selected,e=ie.createElement("input"),e.value="t",e.type="radio",fe.radioValue="t"===e.value}();var wt,bt=ve.expr.attrHandle;ve.fn.extend({attr:function(e,t){return Le(this,ve.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ve.removeAttr(this,e)})}}),ve.extend({attr:function(e,t,i){var n,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof e.getAttribute?ve.prop(e,t,i):(1===s&&ve.isXMLDoc(e)||(r=ve.attrHooks[t.toLowerCase()]||(ve.expr.match.bool.test(t)?wt:void 0)),void 0!==i?null===i?void ve.removeAttr(e,t):r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:(e.setAttribute(t,i+""),i):r&&"get"in r&&null!==(n=r.get(e,t))?n:(n=ve.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&r(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,r=t&&t.match(ze);if(r&&1===e.nodeType)for(;i=r[n++];)e.removeAttribute(i)}}),wt={set:function(e,t,i){return t===!1?ve.removeAttr(e,i):e.setAttribute(i,i),i}},ve.each(ve.expr.match.bool.source.match(/\w+/g),function(e,t){var i=bt[t]||ve.find.attr;bt[t]=function(e,t,n){var r,s,o=t.toLowerCase();return n||(s=bt[o],bt[o]=r,r=null!=i(e,t,n)?o:null,bt[o]=s),r}});var xt=/^(?:input|select|textarea|button)$/i,Tt=/^(?:a|area)$/i;ve.fn.extend({prop:function(e,t){return Le(this,ve.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ve.propFix[e]||e]})}}),ve.extend({prop:function(e,t,i){var n,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&ve.isXMLDoc(e)||(t=ve.propFix[t]||t,r=ve.propHooks[t]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(e,i,t))?n:e[t]=i:r&&"get"in r&&null!==(n=r.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=ve.find.attr(e,"tabindex");return t?parseInt(t,10):xt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),fe.optSelected||(ve.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ve.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ve.propFix[this.toLowerCase()]=this}),ve.fn.extend({addClass:function(e){var t,i,n,r,s,o,a,l=0;if(ve.isFunction(e))return this.each(function(t){ve(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(ze)||[];i=this[l++];)if(r=V(i),n=1===i.nodeType&&" "+G(r)+" "){for(o=0;s=t[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");a=G(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,r,s,o,a,l=0;if(ve.isFunction(e))return this.each(function(t){ve(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(ze)||[];i=this[l++];)if(r=V(i),n=1===i.nodeType&&" "+G(r)+" "){for(o=0;s=t[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");a=G(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e;return"boolean"==typeof t&&"string"===i?t?this.addClass(e):this.removeClass(e):ve.isFunction(e)?this.each(function(i){ve(this).toggleClass(e.call(this,i,V(this),t),t)}):this.each(function(){var t,n,r,s;if("string"===i)for(n=0,r=ve(this),s=e.match(ze)||[];t=s[n++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==i||(t=V(this),t&&He.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":He.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+G(V(i))+" ").indexOf(t)>-1)return!0;return!1}});var St=/\r/g;ve.fn.extend({val:function(e){var t,i,n,r=this[0];{if(arguments.length)return n=ve.isFunction(e),this.each(function(i){var r;1===this.nodeType&&(r=n?e.call(this,i,ve(this).val()):e,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=ve.map(r,function(e){return null==e?"":e+""})),t=ve.valHooks[this.type]||ve.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=ve.valHooks[r.type]||ve.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(i=t.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(St,""):null==i?"":i)}}}),ve.extend({valHooks:{option:{get:function(e){var t=ve.find.attr(e,"value");return null!=t?t:G(ve.text(e))}},select:{get:function(e){var t,i,n,s=e.options,o=e.selectedIndex,a="select-one"===e.type,l=a?null:[],d=a?o+1:s.length;for(n=o<0?d:a?o:0;n<d;n++)if(i=s[n],(i.selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!r(i.parentNode,"optgroup"))){if(t=ve(i).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var i,n,r=e.options,s=ve.makeArray(t),o=r.length;o--;)n=r[o],(n.selected=ve.inArray(ve.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(e.selectedIndex=-1),s}}}}),ve.each(["radio","checkbox"],function(){ve.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ve.inArray(ve(e).val(),t)>-1}},fe.checkOn||(ve.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;ve.extend(ve.event,{trigger:function(t,i,n,r){var s,o,a,l,d,c,u,p=[n||ie],f=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(o=a=n=n||ie,3!==n.nodeType&&8!==n.nodeType&&!Ct.test(f+ve.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),d=f.indexOf(":")<0&&"on"+f,t=t[ve.expando]?t:new ve.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:ve.makeArray(i,[t]),u=ve.event.special[f]||{},r||!u.trigger||u.trigger.apply(n,i)!==!1)){if(!r&&!u.noBubble&&!ve.isWindow(n)){for(l=u.delegateType||f,Ct.test(l+f)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||ie)&&p.push(a.defaultView||a.parentWindow||e)}for(s=0;(o=p[s++])&&!t.isPropagationStopped();)t.type=s>1?l:u.bindType||f,c=(He.get(o,"events")||{})[t.type]&&He.get(o,"handle"),c&&c.apply(o,i),c=d&&o[d],c&&c.apply&&Ie(o)&&(t.result=c.apply(o,i),t.result===!1&&t.preventDefault());return t.type=f,r||t.isDefaultPrevented()||u._default&&u._default.apply(p.pop(),i)!==!1||!Ie(n)||d&&ve.isFunction(n[f])&&!ve.isWindow(n)&&(a=n[d],a&&(n[d]=null),ve.event.triggered=f,n[f](),ve.event.triggered=void 0,a&&(n[d]=a)),t.result}},simulate:function(e,t,i){var n=ve.extend(new ve.Event,i,{type:e,isSimulated:!0});ve.event.trigger(n,null,t)}}),ve.fn.extend({trigger:function(e,t){return this.each(function(){ve.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return ve.event.trigger(e,t,i,!0)}}),ve.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ve.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}),ve.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||ve.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){ve.event.simulate(t,e.target,ve.event.fix(e))};ve.event.special[t]={setup:function(){var n=this.ownerDocument||this,r=He.access(n,t);r||n.addEventListener(e,i,!0),He.access(n,t,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=He.access(n,t)-1;r?He.access(n,t,r):(n.removeEventListener(e,i,!0),He.remove(n,t))}}});var kt=e.location,Et=ve.now(),$t=/\?/;ve.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(n){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||ve.error("Invalid XML: "+t),i};var Mt=/\[\]$/,Pt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;ve.param=function(e,t){var i,n=[],r=function(e,t){var i=ve.isFunction(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!ve.isPlainObject(e))ve.each(e,function(){r(this.name,this.value)});else for(i in e)U(i,e[i],t,r);return n.join("&")},ve.fn.extend({serialize:function(){return ve.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ve.prop(this,"elements");return e?ve.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ve(this).is(":disabled")&&zt.test(this.nodeName)&&!At.test(e)&&(this.checked||!Ye.test(e))}).map(function(e,t){var i=ve(this).val();return null==i?null:Array.isArray(i)?ve.map(i,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:i.replace(Pt,"\r\n")}}).get()}});var Dt=/%20/g,Ot=/#.*$/,Lt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Nt=/^(?:GET|HEAD)$/,jt=/^\/\//,_t={},Ft={},qt="*/".concat("*"),Bt=ie.createElement("a");Bt.href=kt.href,ve.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:Ht.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ve.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?J(J(e,ve.ajaxSettings),t):J(ve.ajaxSettings,e)},ajaxPrefilter:K(_t),ajaxTransport:K(Ft),ajax:function(t,i){function n(t,i,n,a){var d,p,f,b,x,T=i;c||(c=!0,l&&e.clearTimeout(l),r=void 0,o=a||"",S.readyState=t>0?4:0,d=t>=200&&t<300||304===t,n&&(b=Z(h,S,n)),b=ee(h,b,S,d),d?(h.ifModified&&(x=S.getResponseHeader("Last-Modified"),x&&(ve.lastModified[s]=x),x=S.getResponseHeader("etag"),x&&(ve.etag[s]=x)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=b.state,p=b.data,f=b.error,d=!f)):(f=T,!t&&T||(T="error",t<0&&(t=0))),S.status=t,S.statusText=(i||T)+"",d?g.resolveWith(v,[p,T,S]):g.rejectWith(v,[S,T,f]),S.statusCode(w),w=void 0,u&&m.trigger(d?"ajaxSuccess":"ajaxError",[S,h,d?p:f]),y.fireWith(v,[S,T]),u&&(m.trigger("ajaxComplete",[S,h]),--ve.active||ve.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=void 0),i=i||{};var r,s,o,a,l,d,c,u,p,f,h=ve.ajaxSetup({},i),v=h.context||h,m=h.context&&(v.nodeType||v.jquery)?ve(v):ve.event,g=ve.Deferred(),y=ve.Callbacks("once memory"),w=h.statusCode||{},b={},x={},T="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=It.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),n(0,t),this}};if(g.promise(S),h.url=((t||h.url||kt.href)+"").replace(jt,kt.protocol+"//"),h.type=i.method||i.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(ze)||[""],null==h.crossDomain){d=ie.createElement("a");try{d.href=h.url,d.href=d.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=d.protocol+"//"+d.host}catch(C){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ve.param(h.data,h.traditional)),Q(_t,h,i,S),c)return S;u=ve.event&&h.global,u&&0===ve.active++&&ve.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),s=h.url.replace(Ot,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Dt,"+")):(f=h.url.slice(s.length),h.data&&(s+=($t.test(s)?"&":"?")+h.data,delete h.data),h.cache===!1&&(s=s.replace(Lt,"$1"),f=($t.test(s)?"&":"?")+"_="+Et++ +f),h.url=s+f),h.ifModified&&(ve.lastModified[s]&&S.setRequestHeader("If-Modified-Since",ve.lastModified[s]),ve.etag[s]&&S.setRequestHeader("If-None-Match",ve.etag[s])),(h.data&&h.hasContent&&h.contentType!==!1||i.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+qt+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)S.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(h.beforeSend.call(v,S,h)===!1||c))return S.abort();if(T="abort",y.add(h.complete),S.done(h.success),S.fail(h.error),r=Q(Ft,h,i,S)){if(S.readyState=1,u&&m.trigger("ajaxSend",[S,h]),c)return S;h.async&&h.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},h.timeout));try{c=!1,r.send(b,n)}catch(C){if(c)throw C;n(-1,C)}}else n(-1,"No Transport");return S},getJSON:function(e,t,i){return ve.get(e,t,i,"json")},getScript:function(e,t){return ve.get(e,void 0,t,"script")}}),ve.each(["get","post"],function(e,t){ve[t]=function(e,i,n,r){return ve.isFunction(i)&&(r=r||n,n=i,i=void 0),ve.ajax(ve.extend({url:e,type:t,dataType:r,data:i,success:n},ve.isPlainObject(e)&&e))}}),ve._evalUrl=function(e){return ve.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},ve.fn.extend({wrapAll:function(e){var t;return this[0]&&(ve.isFunction(e)&&(e=e.call(this[0])),t=ve(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ve.isFunction(e)?this.each(function(t){ve(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ve(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=ve.isFunction(e);return this.each(function(i){ve(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ve(this).replaceWith(this.childNodes)}),this}}),ve.expr.pseudos.hidden=function(e){return!ve.expr.pseudos.visible(e)},ve.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ve.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Rt={0:200,1223:204},Wt=ve.ajaxSettings.xhr();fe.cors=!!Wt&&"withCredentials"in Wt,fe.ajax=Wt=!!Wt,ve.ajaxTransport(function(t){var i,n;if(fe.cors||Wt&&!t.crossDomain)return{send:function(r,s){var o,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)a.setRequestHeader(o,r[o]);i=function(e){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Rt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(t.hasContent&&t.data||null)}catch(l){if(i)throw l}},abort:function(){i&&i()}}}),ve.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ve.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ve.globalEval(e),e}}}),ve.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ve.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(n,r){t=ve("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&r("error"===e.type?404:200,e.type)}),ie.head.appendChild(t[0])},abort:function(){i&&i()}}}});var Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;ve.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||ve.expando+"_"+Et++;return this[e]=!0,e}}),ve.ajaxPrefilter("json jsonp",function(t,i,n){var r,s,o,a=t.jsonp!==!1&&(Yt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=ve.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Yt,"$1"+r):t.jsonp!==!1&&(t.url+=($t.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||ve.error(r+" was not called"),o[0]},t.dataTypes[0]="json",s=e[r],e[r]=function(){o=arguments},n.always(function(){void 0===s?ve(e).removeProp(r):e[r]=s,t[r]&&(t.jsonpCallback=i.jsonpCallback,Xt.push(r)),o&&ve.isFunction(s)&&s(o[0]),o=s=void 0}),"script"}),fe.createHTMLDocument=function(){var e=ie.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ve.parseHTML=function(e,t,i){if("string"!=typeof e)return[];"boolean"==typeof t&&(i=t,t=!1);var n,r,s;return t||(fe.createHTMLDocument?(t=ie.implementation.createHTMLDocument(""),n=t.createElement("base"),n.href=ie.location.href,t.head.appendChild(n)):t=ie),r=Ce.exec(e),s=!i&&[],r?[t.createElement(r[1])]:(r=b([e],t,s),s&&s.length&&ve(s).remove(),ve.merge([],r.childNodes))},ve.fn.load=function(e,t,i){var n,r,s,o=this,a=e.indexOf(" ");return a>-1&&(n=G(e.slice(a)),e=e.slice(0,a)),ve.isFunction(t)?(i=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&ve.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,o.html(n?ve("<div>").append(ve.parseHTML(e)).find(n):e)}).always(i&&function(e,t){o.each(function(){i.apply(this,s||[e.responseText,t,e])})}),this},ve.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ve.fn[t]=function(e){return this.on(t,e)}}),ve.expr.pseudos.animated=function(e){return ve.grep(ve.timers,function(t){return e===t.elem}).length},ve.offset={setOffset:function(e,t,i){var n,r,s,o,a,l,d,c=ve.css(e,"position"),u=ve(e),p={};"static"===c&&(e.style.position="relative"),a=u.offset(),s=ve.css(e,"top"),l=ve.css(e,"left"),d=("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1,d?(n=u.position(),o=n.top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),ve.isFunction(t)&&(t=t.call(e,i,ve.extend({},a))),null!=t.top&&(p.top=t.top-a.top+o),null!=t.left&&(p.left=t.left-a.left+r),"using"in t?t.using.call(e,p):u.css(p)}},ve.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ve.offset.setOffset(this,e,t)});var t,i,n,r,s=this[0];if(s)return s.getClientRects().length?(n=s.getBoundingClientRect(),t=s.ownerDocument,i=t.documentElement,r=t.defaultView,{top:n.top+r.pageYOffset-i.clientTop,left:n.left+r.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,i=this[0],n={top:0,left:0};return"fixed"===ve.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(n=e.offset()),n={top:n.top+ve.css(e[0],"borderTopWidth",!0),left:n.left+ve.css(e[0],"borderLeftWidth",!0)}),{top:t.top-n.top-ve.css(i,"marginTop",!0),left:t.left-n.left-ve.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ve.css(e,"position");)e=e.offsetParent;return e||Qe})}}),ve.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;ve.fn[e]=function(n){return Le(this,function(e,n,r){var s;return ve.isWindow(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r?s?s[t]:e[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):e[n]=r)},e,n,arguments.length)}}),ve.each(["top","left"],function(e,t){ve.cssHooks[t]=O(fe.pixelPosition,function(e,i){if(i)return i=D(e,t),at.test(i)?ve(e).position()[t]+"px":i})}),ve.each({Height:"height",Width:"width"},function(e,t){ve.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){ve.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||s===!0?"margin":"border");return Le(this,function(t,i,r){var s;return ve.isWindow(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?ve.css(t,i,a):ve.style(t,i,r,a)},t,o?r:void 0,o)}})}),ve.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),ve.holdReady=function(e){e?ve.readyWait++:ve.ready(!0)},ve.isArray=Array.isArray,ve.parseJSON=JSON.parse,ve.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ve});var Gt=e.jQuery,Vt=e.$;return ve.noConflict=function(t){return e.$===ve&&(e.$=Vt),t&&e.jQuery===ve&&(e.jQuery=Gt),ve},t||(e.jQuery=e.$=ve),ve}),!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.ProgressBar=e()}}(function(){var e;return function t(e,i,n){function r(o,a){if(!i[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(s)return s(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var c=i[o]={exports:{}};e[o][0].call(c.exports,function(t){var i=e[o][1][t];return r(i?i:t)},c,c.exports,t,e,i,n)}return i[o].exports}for(var s="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,i,n){(function(){var t=this||Function("return this")(),r=function(){"use strict";function r(){}function s(e,t){var i;for(i in e)Object.hasOwnProperty.call(e,i)&&t(i)}function o(e,t){return s(t,function(i){e[i]=t[i]}),e}function a(e,t){s(t,function(i){"undefined"==typeof e[i]&&(e[i]=t[i])})}function l(e,t,i,n,r,s,o){var a,l,c,u=s>e?0:(e-s)/r;for(a in t)t.hasOwnProperty(a)&&(l=o[a],c="function"==typeof l?l:h[l],t[a]=d(i[a],n[a],c,u));return t}function d(e,t,i,n){return e+(t-e)*i(n)}function c(e,t){var i=f.prototype.filter,n=e._filterArgs;s(i,function(r){"undefined"!=typeof i[r][t]&&i[r][t].apply(e,n)})}function u(e,t,i,n,r,s,o,a,d,u,p){x=t+i+n,T=Math.min(p||b(),x),S=T>=x,C=n-(x-T),e.isPlaying()&&(S?(d(o,e._attachment,C),e.stop(!0)):(e._scheduleId=u(e._timeoutHandler,y),c(e,"beforeTween"),t+i>T?l(1,r,s,o,1,1,a):l(T,r,s,o,n,t+i,a),c(e,"afterTween"),d(r,e._attachment,C)))}function p(e,t){var i={},n=typeof t;return"string"===n||"function"===n?s(e,function(e){i[e]=t}):s(e,function(e){i[e]||(i[e]=t[e]||m)}),i}function f(e,t){this._currentState=e||{},this._configured=!1,this._scheduleFunction=v,"undefined"!=typeof t&&this.setConfig(t)}var h,v,m="linear",g=500,y=1e3/60,w=Date.now?Date.now:function(){return+new Date},b="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:w;v="undefined"!=typeof window?window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame||setTimeout:setTimeout;var x,T,S,C;return f.prototype.tween=function(e){return this._isTweening?this:(void 0===e&&this._configured||this.setConfig(e),this._timestamp=b(),this._start(this.get(),this._attachment),this.resume())},f.prototype.setConfig=function(e){e=e||{},this._configured=!0,this._attachment=e.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=e.delay||0,this._start=e.start||r,this._step=e.step||r,this._finish=e.finish||r,this._duration=e.duration||g,this._currentState=o({},e.from)||this.get(),this._originalState=this.get(),this._targetState=o({},e.to)||this.get();var t=this;this._timeoutHandler=function(){u(t,t._timestamp,t._delay,t._duration,t._currentState,t._originalState,t._targetState,t._easing,t._step,t._scheduleFunction)};var i=this._currentState,n=this._targetState;return a(n,i),this._easing=p(i,e.easing||m),this._filterArgs=[i,this._originalState,n,this._easing],c(this,"tweenCreated"),this},f.prototype.get=function(){return o({},this._currentState)},f.prototype.set=function(e){this._currentState=e},f.prototype.pause=function(){return this._pausedAtTime=b(),this._isPaused=!0,this},f.prototype.resume=function(){return this._isPaused&&(this._timestamp+=b()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},f.prototype.seek=function(e){e=Math.max(e,0);var t=b();return this._timestamp+e===0?this:(this._timestamp=t-e,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,u(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,t),this.pause()),this)},f.prototype.stop=function(e){return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=r,(t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.oCancelAnimationFrame||t.msCancelAnimationFrame||t.mozCancelRequestAnimationFrame||t.clearTimeout)(this._scheduleId),e&&(c(this,"beforeTween"),l(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),c(this,"afterTween"),c(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},f.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},f.prototype.setScheduleFunction=function(e){this._scheduleFunction=e},f.prototype.dispose=function(){var e;for(e in this)this.hasOwnProperty(e)&&delete this[e]},f.prototype.filter={},f.prototype.formula={linear:function(e){return e}},h=f.prototype.formula,o(f,{now:b,each:s,tweenProps:l,tweenProp:d,applyFilter:c,shallowCopy:o,defaults:a,composeEasingObject:p}),"function"==typeof SHIFTY_DEBUG_NOW&&(t.timeoutHandler=u),"object"==typeof n?i.exports=f:"function"==typeof e&&e.amd?e(function(){return f}):"undefined"==typeof t.Tweenable&&(t.Tweenable=f),f}();!function(){r.shallowCopy(r.prototype.formula,{easeInQuad:function(e){return Math.pow(e,2)},easeOutQuad:function(e){return-(Math.pow(e-1,2)-1)},easeInOutQuad:function(e){return(e/=.5)<1?.5*Math.pow(e,2):-.5*((e-=2)*e-2)},easeInCubic:function(e){return Math.pow(e,3)},easeOutCubic:function(e){return Math.pow(e-1,3)+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*Math.pow(e,3):.5*(Math.pow(e-2,3)+2)},easeInQuart:function(e){return Math.pow(e,4)},easeOutQuart:function(e){return-(Math.pow(e-1,4)-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeInQuint:function(e){return Math.pow(e,5)},easeOutQuint:function(e){return Math.pow(e-1,5)+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)},easeInSine:function(e){return-Math.cos(e*(Math.PI/2))+1},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:-Math.pow(2,-10*e)+1},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(-Math.pow(2,-10*--e)+2)},easeInCirc:function(e){return-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-Math.pow(e-1,2))},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeOutBounce:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?7.5625*(e-=1.5/2.75)*e+.75:2.5/2.75>e?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},elastic:function(e){return-1*Math.pow(4,-8*e)*Math.sin((6*e-1)*(2*Math.PI)/2)+1},swingFromTo:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},swingFrom:function(e){var t=1.70158;return e*e*((t+1)*e-t)},swingTo:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},bounce:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?7.5625*(e-=1.5/2.75)*e+.75:2.5/2.75>e?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},bouncePast:function(e){return 1/2.75>e?7.5625*e*e:2/2.75>e?2-(7.5625*(e-=1.5/2.75)*e+.75):2.5/2.75>e?2-(7.5625*(e-=2.25/2.75)*e+.9375):2-(7.5625*(e-=2.625/2.75)*e+.984375)},easeFromTo:function(e){return(e/=.5)<1?.5*Math.pow(e,4):-.5*((e-=2)*Math.pow(e,3)-2)},easeFrom:function(e){return Math.pow(e,4)},easeTo:function(e){return Math.pow(e,.25)}})}(),function(){function e(e,t,i,n,r,s){function o(e){return((f*e+h)*e+v)*e}function a(e){return((m*e+g)*e+y)*e}function l(e){return(3*f*e+2*h)*e+v}function d(e){return 1/(200*e)}function c(e,t){return a(p(e,t))}function u(e){return e>=0?e:0-e}function p(e,t){var i,n,r,s,a,d;for(r=e,d=0;8>d;d++){if(s=o(r)-e,u(s)<t)return r;if(a=l(r),u(a)<1e-6)break;r-=s/a}if(i=0,n=1,r=e,i>r)return i;if(r>n)return n;for(;n>i;){if(s=o(r),u(s-e)<t)return r;e>s?i=r:n=r,r=.5*(n-i)+i}return r}var f=0,h=0,v=0,m=0,g=0,y=0;return v=3*t,h=3*(n-t)-v,f=1-v-h,y=3*i,g=3*(r-i)-y,m=1-y-g,c(e,d(s))}function t(t,i,n,r){return function(s){return e(s,t,i,n,r,1)}}r.setBezierFunction=function(e,i,n,s,o){var a=t(i,n,s,o);return a.displayName=e,a.x1=i,a.y1=n,a.x2=s,a.y2=o,r.prototype.formula[e]=a},r.unsetBezierFunction=function(e){delete r.prototype.formula[e]}}(),function(){function e(e,t,i,n,s,o){return r.tweenProps(n,t,e,i,1,o,s)}var t=new r;t._filterArgs=[],r.interpolate=function(i,n,s,o,a){var l=r.shallowCopy({},i),d=a||0,c=r.composeEasingObject(i,o||"linear");t.set({});var u=t._filterArgs;u.length=0,u[0]=l,u[1]=i,u[2]=n,u[3]=c,r.applyFilter(t,"tweenCreated"),r.applyFilter(t,"beforeTween");var p=e(i,l,n,s,c,d);return r.applyFilter(t,"afterTween"),p}}(),function(e){function t(e,t){var i,n=[],r=e.length;for(i=0;r>i;i++)n.push("_"+t+"_"+i);
return n}function i(e){var t=e.match(x);return t?(1===t.length||e[0].match(b))&&t.unshift(""):t=["",""],t.join(E)}function n(t){e.each(t,function(e){var i=t[e];"string"==typeof i&&i.match(k)&&(t[e]=r(i))})}function r(e){return l(k,e,s)}function s(e){var t=o(e);return"rgb("+t[0]+","+t[1]+","+t[2]+")"}function o(e){return e=e.replace(/#/,""),3===e.length&&(e=e.split(""),e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),$[0]=a(e.substr(0,2)),$[1]=a(e.substr(2,2)),$[2]=a(e.substr(4,2)),$}function a(e){return parseInt(e,16)}function l(e,t,i){var n=t.match(e),r=t.replace(e,E);if(n)for(var s,o=n.length,a=0;o>a;a++)s=n.shift(),r=r.replace(E,i(s));return r}function d(e){return l(S,e,c)}function c(e){for(var t=e.match(T),i=t.length,n=e.match(C)[0],r=0;i>r;r++)n+=parseInt(t[r],10)+",";return n=n.slice(0,-1)+")"}function u(n){var r={};return e.each(n,function(e){var s=n[e];if("string"==typeof s){var o=g(s);r[e]={formatString:i(s),chunkNames:t(o,e)}}}),r}function p(t,i){e.each(i,function(e){for(var n=t[e],r=g(n),s=r.length,o=0;s>o;o++)t[i[e].chunkNames[o]]=+r[o];delete t[e]})}function f(t,i){e.each(i,function(e){var n=t[e],r=h(t,i[e].chunkNames),s=v(r,i[e].chunkNames);n=m(i[e].formatString,s),t[e]=d(n)})}function h(e,t){for(var i,n={},r=t.length,s=0;r>s;s++)i=t[s],n[i]=e[i],delete e[i];return n}function v(e,t){M.length=0;for(var i=t.length,n=0;i>n;n++)M.push(e[t[n]]);return M}function m(e,t){for(var i=e,n=t.length,r=0;n>r;r++)i=i.replace(E,+t[r].toFixed(4));return i}function g(e){return e.match(T)}function y(t,i){e.each(i,function(e){var n,r=i[e],s=r.chunkNames,o=s.length,a=t[e];if("string"==typeof a){var l=a.split(" "),d=l[l.length-1];for(n=0;o>n;n++)t[s[n]]=l[n]||d}else for(n=0;o>n;n++)t[s[n]]=a;delete t[e]})}function w(t,i){e.each(i,function(e){var n=i[e],r=n.chunkNames,s=r.length,o=t[r[0]],a=typeof o;if("string"===a){for(var l="",d=0;s>d;d++)l+=" "+t[r[d]],delete t[r[d]];t[e]=l.substr(1)}else t[e]=o})}var b=/(\d|\-|\.)/,x=/([^\-0-9\.]+)/g,T=/[0-9.\-]+/g,S=new RegExp("rgb\\("+T.source+/,\s*/.source+T.source+/,\s*/.source+T.source+"\\)","g"),C=/^.*\(/,k=/#([0-9]|[a-f]){3,6}/gi,E="VAL",$=[],M=[];e.prototype.filter.token={tweenCreated:function(e,t,i,r){n(e),n(t),n(i),this._tokenData=u(e)},beforeTween:function(e,t,i,n){y(n,this._tokenData),p(e,this._tokenData),p(t,this._tokenData),p(i,this._tokenData)},afterTween:function(e,t,i,n){f(e,this._tokenData),f(t,this._tokenData),f(i,this._tokenData),w(n,this._tokenData)}}}(r)}).call(null)},{}],2:[function(e,t,i){var n=e("./shape"),r=e("./utils"),s=function(e,t){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,n.apply(this,arguments)};s.prototype=new n,s.prototype.constructor=s,s.prototype._pathString=function(e){var t=e.strokeWidth;e.trailWidth&&e.trailWidth>e.strokeWidth&&(t=e.trailWidth);var i=50-t/2;return r.render(this._pathTemplate,{radius:i,"2radius":2*i})},s.prototype._trailString=function(e){return this._pathString(e)},t.exports=s},{"./shape":7,"./utils":8}],3:[function(e,t,i){var n=e("./shape"),r=e("./utils"),s=function(e,t){this._pathTemplate="M 0,{center} L 100,{center}",n.apply(this,arguments)};s.prototype=new n,s.prototype.constructor=s,s.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 "+t.strokeWidth),e.setAttribute("preserveAspectRatio","none")},s.prototype._pathString=function(e){return r.render(this._pathTemplate,{center:e.strokeWidth/2})},s.prototype._trailString=function(e){return this._pathString(e)},t.exports=s},{"./shape":7,"./utils":8}],4:[function(e,t,i){t.exports={Line:e("./line"),Circle:e("./circle"),SemiCircle:e("./semicircle"),Path:e("./path"),Shape:e("./shape"),utils:e("./utils")}},{"./circle":2,"./line":3,"./path":5,"./semicircle":6,"./shape":7,"./utils":8}],5:[function(e,t,i){var n=e("shifty"),r=e("./utils"),s={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},o=function a(e,t){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");t=r.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},t);var i;i=r.isString(e)?document.querySelector(e):e,this.path=i,this._opts=t,this._tweenable=null;var n=this.path.getTotalLength();this.path.style.strokeDasharray=n+" "+n,this.set(0)};o.prototype.value=function(){var e=this._getComputedDashOffset(),t=this.path.getTotalLength(),i=1-e/t;return parseFloat(i.toFixed(6),10)},o.prototype.set=function(e){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(e);var t=this._opts.step;if(r.isFunction(t)){var i=this._easing(this._opts.easing),n=this._calculateTo(e,i),s=this._opts.shape||this;t(n,s,this._opts.attachment)}},o.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},o.prototype.animate=function(e,t,i){t=t||{},r.isFunction(t)&&(i=t,t={});var s=r.extend({},t),o=r.extend({},this._opts);t=r.extend(o,t);var a=this._easing(t.easing),l=this._resolveFromAndTo(e,a,s);this.stop(),this.path.getBoundingClientRect();var d=this._getComputedDashOffset(),c=this._progressToOffset(e),u=this;this._tweenable=new n,this._tweenable.tween({from:r.extend({offset:d},l.from),to:r.extend({offset:c},l.to),duration:t.duration,easing:a,step:function(e){u.path.style.strokeDashoffset=e.offset;var i=t.shape||u;t.step(e,i,t.attachment)},finish:function(e){r.isFunction(i)&&i()}})},o.prototype._getComputedDashOffset=function(){var e=window.getComputedStyle(this.path,null);return parseFloat(e.getPropertyValue("stroke-dashoffset"),10)},o.prototype._progressToOffset=function(e){var t=this.path.getTotalLength();return t-e*t},o.prototype._resolveFromAndTo=function(e,t,i){return i.from&&i.to?{from:i.from,to:i.to}:{from:this._calculateFrom(t),to:this._calculateTo(e,t)}},o.prototype._calculateFrom=function(e){return n.interpolate(this._opts.from,this._opts.to,this.value(),e)},o.prototype._calculateTo=function(e,t){return n.interpolate(this._opts.from,this._opts.to,e,t)},o.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},o.prototype._easing=function(e){return s.hasOwnProperty(e)?s[e]:e},t.exports=o},{"./utils":8,shifty:1}],6:[function(e,t,i){var n=e("./shape"),r=e("./circle"),s=e("./utils"),o=function(e,t){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,n.apply(this,arguments)};o.prototype=new n,o.prototype.constructor=o,o.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 50")},o.prototype._initializeTextContainer=function(e,t,i){e.text.style&&(i.style.top="auto",i.style.bottom="0",e.text.alignToBottom?s.setStyle(i,"transform","translate(-50%, 0)"):s.setStyle(i,"transform","translate(-50%, 50%)"))},o.prototype._pathString=r.prototype._pathString,o.prototype._trailString=r.prototype._trailString,t.exports=o},{"./circle":2,"./shape":7,"./utils":8}],7:[function(e,t,i){var n=e("./path"),r=e("./utils"),s="Object is destroyed",o=function a(e,t){if(!(this instanceof a))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=r.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},t,!0),r.isObject(t)&&void 0!==t.svgStyle&&(this._opts.svgStyle=t.svgStyle),r.isObject(t)&&r.isObject(t.text)&&void 0!==t.text.style&&(this._opts.text.style=t.text.style);var i,s=this._createSvgView(this._opts);if(i=r.isString(e)?document.querySelector(e):e,!i)throw new Error("Container does not exist: "+e);this._container=i,this._container.appendChild(s.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&r.setStyles(s.svg,this._opts.svgStyle),this.svg=s.svg,this.path=s.path,this.trail=s.trail,this.text=null;var o=r.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new n(s.path,o),r.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};o.prototype.animate=function(e,t,i){if(null===this._progressPath)throw new Error(s);this._progressPath.animate(e,t,i)},o.prototype.stop=function(){if(null===this._progressPath)throw new Error(s);void 0!==this._progressPath&&this._progressPath.stop()},o.prototype.destroy=function(){if(null===this._progressPath)throw new Error(s);this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},o.prototype.set=function(e){if(null===this._progressPath)throw new Error(s);this._progressPath.set(e)},o.prototype.value=function(){if(null===this._progressPath)throw new Error(s);return void 0===this._progressPath?0:this._progressPath.value()},o.prototype.setText=function(e){if(null===this._progressPath)throw new Error(s);null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),r.isObject(e)?(r.removeChildren(this.text),this.text.appendChild(e)):this.text.innerHTML=e},o.prototype._createSvgView=function(e){var t=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(t,e);var i=null;(e.trailColor||e.trailWidth)&&(i=this._createTrail(e),t.appendChild(i));var n=this._createPath(e);return t.appendChild(n),{svg:t,path:n,trail:i}},o.prototype._initializeSvg=function(e,t){e.setAttribute("viewBox","0 0 100 100")},o.prototype._createPath=function(e){var t=this._pathString(e);return this._createPathElement(t,e)},o.prototype._createTrail=function(e){var t=this._trailString(e),i=r.extend({},e);return i.trailColor||(i.trailColor="#eee"),i.trailWidth||(i.trailWidth=i.strokeWidth),i.color=i.trailColor,i.strokeWidth=i.trailWidth,i.fill=null,this._createPathElement(t,i)},o.prototype._createPathElement=function(e,t){var i=document.createElementNS("http://www.w3.org/2000/svg","path");return i.setAttribute("d",e),i.setAttribute("stroke",t.color),i.setAttribute("stroke-width",t.strokeWidth),t.fill?i.setAttribute("fill",t.fill):i.setAttribute("fill-opacity","0"),i},o.prototype._createTextContainer=function(e,t){var i=document.createElement("div");i.className=e.text.className;var n=e.text.style;return n&&(e.text.autoStyleContainer&&(t.style.position="relative"),r.setStyles(i,n),n.color||(i.style.color=e.color)),this._initializeTextContainer(e,t,i),i},o.prototype._initializeTextContainer=function(e,t,i){},o.prototype._pathString=function(e){throw new Error("Override this function for each progress bar")},o.prototype._trailString=function(e){throw new Error("Override this function for each progress bar")},o.prototype._warnContainerAspectRatio=function(e){if(this.containerAspectRatio){var t=window.getComputedStyle(e,null),i=parseFloat(t.getPropertyValue("width"),10),n=parseFloat(t.getPropertyValue("height"),10);r.floatEquals(this.containerAspectRatio,i/n)||(console.warn("Incorrect aspect ratio of container","#"+e.id,"detected:",t.getPropertyValue("width")+"(width)","/",t.getPropertyValue("height")+"(height)","=",i/n),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=o},{"./path":5,"./utils":8}],8:[function(e,t,i){function n(e,t,i){e=e||{},t=t||{},i=i||!1;for(var r in t)if(t.hasOwnProperty(r)){var s=e[r],o=t[r];i&&u(s)&&u(o)?e[r]=n(s,o,i):e[r]=o}return e}function r(e,t){var i=e;for(var n in t)if(t.hasOwnProperty(n)){var r=t[n],s="\\{"+n+"\\}",o=new RegExp(s,"g");i=i.replace(o,r)}return i}function s(e,t,i){for(var n=e.style,r=0;r<v.length;++r){var s=v[r];n[s+a(t)]=i}n[t]=i}function o(e,t){p(t,function(t,i){null!==t&&void 0!==t&&(u(t)&&t.prefix===!0?s(e,i,t.value):e.style[i]=t)})}function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function l(e){return"string"==typeof e||e instanceof String}function d(e){return"function"==typeof e}function c(e){return"[object Array]"===Object.prototype.toString.call(e)}function u(e){if(c(e))return!1;var t=typeof e;return"object"===t&&!!e}function p(e,t){for(var i in e)if(e.hasOwnProperty(i)){var n=e[i];t(n,i)}}function f(e,t){return Math.abs(e-t)<m}function h(e){for(;e.firstChild;)e.removeChild(e.firstChild)}var v="Webkit Moz O ms".split(" "),m=.001;t.exports={extend:n,render:r,setStyle:s,setStyles:o,capitalize:a,isString:l,isFunction:d,isObject:u,forEachObject:p,floatEquals:f,removeChildren:h}},{}]},{},[4])(4)}),!function(e){e.fn.viewportChecker=function(t){var i={classToAdd:"visible",classToRemove:"invisible",classToAddForFullView:"full-visible",removeClassAfterAnimation:!1,offset:100,repeat:!1,invertBottomOffset:!0,callbackFunction:function(e,t){},scrollHorizontal:!1,scrollBox:window};e.extend(i,t);var n=this,r={height:e(i.scrollBox).height(),width:e(i.scrollBox).width()};return this.checkElements=function(){var t,s;i.scrollHorizontal?(t=Math.max(e("html").scrollLeft(),e("body").scrollLeft(),e(window).scrollLeft()),s=t+r.width):(t=Math.max(e("html").scrollTop(),e("body").scrollTop(),e(window).scrollTop()),s=t+r.height),n.each(function(){var n=e(this),o={},a={};if(n.data("vp-add-class")&&(a.classToAdd=n.data("vp-add-class")),n.data("vp-remove-class")&&(a.classToRemove=n.data("vp-remove-class")),n.data("vp-add-class-full-view")&&(a.classToAddForFullView=n.data("vp-add-class-full-view")),n.data("vp-keep-add-class")&&(a.removeClassAfterAnimation=n.data("vp-remove-after-animation")),n.data("vp-offset")&&(a.offset=n.data("vp-offset")),n.data("vp-repeat")&&(a.repeat=n.data("vp-repeat")),n.data("vp-scrollHorizontal")&&(a.scrollHorizontal=n.data("vp-scrollHorizontal")),n.data("vp-invertBottomOffset")&&(a.scrollHorizontal=n.data("vp-invertBottomOffset")),e.extend(o,i),e.extend(o,a),!n.data("vp-animated")||o.repeat){String(o.offset).indexOf("%")>0&&(o.offset=parseInt(o.offset)/100*r.height);var l=o.scrollHorizontal?n.offset().left:n.offset().top,d=o.scrollHorizontal?l+n.width():l+n.height(),c=Math.round(l)+o.offset,u=o.scrollHorizontal?c+n.width():c+n.height();o.invertBottomOffset&&(u-=2*o.offset),c<s&&u>t?(n.removeClass(o.classToRemove),n.addClass(o.classToAdd),o.callbackFunction(n,"add"),d<=s&&l>=t?n.addClass(o.classToAddForFullView):n.removeClass(o.classToAddForFullView),n.data("vp-animated",!0),o.removeClassAfterAnimation&&n.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){n.removeClass(o.classToAdd)})):n.hasClass(o.classToAdd)&&o.repeat&&(n.removeClass(o.classToAdd+" "+o.classToAddForFullView),o.callbackFunction(n,"remove"),n.data("vp-animated",!1))}})},("ontouchstart"in window||"onmsgesturechange"in window)&&e(document).bind("touchmove MSPointerMove pointermove",this.checkElements),e(i.scrollBox).bind("load scroll",this.checkElements),e(window).resize(function(t){r={height:e(i.scrollBox).height(),width:e(i.scrollBox).width()},n.checkElements()}),this.checkElements(),this}}(jQuery),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var t=window.Slick||{};t=function(){function t(t,n){var r,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,i){return e('<button type="button" />')},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=e(t),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,r=e(t).data("slick")||{},s.options=e.extend({},s.defaults,n,r),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,"undefined"!=typeof document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=e.proxy(s.autoPlay,s),s.autoPlayClear=e.proxy(s.autoPlayClear,s),s.autoPlayIterator=e.proxy(s.autoPlayIterator,s),s.changeSlide=e.proxy(s.changeSlide,s),s.clickHandler=e.proxy(s.clickHandler,s),s.selectHandler=e.proxy(s.selectHandler,s),s.setPosition=e.proxy(s.setPosition,s),s.swipeHandler=e.proxy(s.swipeHandler,s),s.dragHandler=e.proxy(s.dragHandler,s),s.keyHandler=e.proxy(s.keyHandler,s),s.instanceUid=i++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}var i=0;return t}(),t.prototype.activateADA=function(){var e=this;e.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},t.prototype.addSlide=t.prototype.slickAdd=function(t,i,n){var r=this;if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=r.slideCount)return!1;r.unload(),"number"==typeof i?0===i&&0===r.$slides.length?e(t).appendTo(r.$slideTrack):n?e(t).insertBefore(r.$slides.eq(i)):e(t).insertAfter(r.$slides.eq(i)):n===!0?e(t).prependTo(r.$slideTrack):e(t).appendTo(r.$slideTrack),r.$slides=r.$slideTrack.children(this.options.slide),r.$slideTrack.children(this.options.slide).detach(),r.$slideTrack.append(r.$slides),r.$slides.each(function(t,i){e(i).attr("data-slick-index",t)}),r.$slidesCache=r.$slides,r.reinit()},t.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&e.options.adaptiveHeight===!0&&e.options.vertical===!1){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},t.prototype.animateSlide=function(t,i){var n={},r=this;r.animateHeight(),r.options.rtl===!0&&r.options.vertical===!1&&(t=-t),r.transformsEnabled===!1?r.options.vertical===!1?r.$slideTrack.animate({left:t},r.options.speed,r.options.easing,i):r.$slideTrack.animate({top:t},r.options.speed,r.options.easing,i):r.cssTransitions===!1?(r.options.rtl===!0&&(r.currentLeft=-r.currentLeft),e({animStart:r.currentLeft}).animate({animStart:t},{duration:r.options.speed,easing:r.options.easing,step:function(e){e=Math.ceil(e),r.options.vertical===!1?(n[r.animType]="translate("+e+"px, 0px)",r.$slideTrack.css(n)):(n[r.animType]="translate(0px,"+e+"px)",r.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(r.applyTransition(),t=Math.ceil(t),r.options.vertical===!1?n[r.animType]="translate3d("+t+"px, 0px, 0px)":n[r.animType]="translate3d(0px,"+t+"px, 0px)",r.$slideTrack.css(n),i&&setTimeout(function(){r.disableTransition(),i.call()},r.options.speed))},t.prototype.getNavTarget=function(){var t=this,i=t.options.asNavFor;return i&&null!==i&&(i=e(i).not(t.$slider)),i},t.prototype.asNavFor=function(t){var i=this,n=i.getNavTarget();null!==n&&"object"==typeof n&&n.each(function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)})},t.prototype.applyTransition=function(e){var t=this,i={};t.options.fade===!1?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,t.options.fade===!1?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},t.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},t.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(e.options.infinite===!1&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1===0&&(e.direction=1))),e.slideHandler(t))},t.prototype.buildArrows=function(){var t=this;t.options.arrows===!0&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),t.options.infinite!==!0&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},t.prototype.buildDots=function(){var t,i,n=this;if(n.options.dots===!0&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),i=e("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)i.append(e("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=i.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},t.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),t.options.centerMode!==!0&&t.options.swipeToSlide!==!0||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.options.draggable===!0&&t.$list.addClass("draggable")},t.prototype.buildRows=function(){var e,t,i,n,r,s,o,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),a.options.rows>0){for(o=a.options.slidesPerRow*a.options.rows,r=Math.ceil(s.length/o),e=0;e<r;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var d=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var c=e*o+(t*a.options.slidesPerRow+i);s.get(c)&&d.appendChild(s.get(c))}l.appendChild(d)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},t.prototype.checkResponsive=function(t,i){var n,r,s,o=this,a=!1,l=o.$slider.width(),d=window.innerWidth||e(window).width();if("window"===o.respondTo?s=d:"slider"===o.respondTo?s=l:"min"===o.respondTo&&(s=Math.min(d,l)),o.options.responsive&&o.options.responsive.length&&null!==o.options.responsive){r=null;for(n in o.breakpoints)o.breakpoints.hasOwnProperty(n)&&(o.originalSettings.mobileFirst===!1?s<o.breakpoints[n]&&(r=o.breakpoints[n]):s>o.breakpoints[n]&&(r=o.breakpoints[n]));null!==r?null!==o.activeBreakpoint?(r!==o.activeBreakpoint||i)&&(o.activeBreakpoint=r,"unslick"===o.breakpointSettings[r]?o.unslick(r):(o.options=e.extend({},o.originalSettings,o.breakpointSettings[r]),t===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(t)),a=r):(o.activeBreakpoint=r,"unslick"===o.breakpointSettings[r]?o.unslick(r):(o.options=e.extend({},o.originalSettings,o.breakpointSettings[r]),t===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(t)),a=r):null!==o.activeBreakpoint&&(o.activeBreakpoint=null,o.options=o.originalSettings,t===!0&&(o.currentSlide=o.options.initialSlide),o.refresh(t),a=r),t||a===!1||o.$slider.trigger("breakpoint",[o,a])}},t.prototype.changeSlide=function(t,i){var n,r,s,o=this,a=e(t.currentTarget);switch(a.is("a")&&t.preventDefault(),a.is("li")||(a=a.closest("li")),s=o.slideCount%o.options.slidesToScroll!==0,n=s?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":r=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-r,!1,i);break;case"next":r=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+r,!1,i);break;case"index":var l=0===t.data.index?0:t.data.index||a.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(l),!1,i),a.children().trigger("focus");break;default:return}},t.prototype.checkNavigable=function(e){var t,i,n=this;if(t=n.getNavigableIndexes(),i=0,e>t[t.length-1])e=t[t.length-1];else for(var r in t){if(e<t[r]){e=i;break}i=t[r]}return e},t.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),t.options.accessibility===!0&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),t.options.accessibility===!0&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),t.options.accessibility===!0&&t.$list.off("keydown.slick",t.keyHandler),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},t.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&(e=t.$slides.children().children(),e.removeAttr("style"),t.$slider.empty().append(e))},t.prototype.clickHandler=function(e){var t=this;t.shouldClick===!1&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},t.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},t.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",t.options.fade===!1?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},t.prototype.fadeSlide=function(e,t){var i=this;i.cssTransitions===!1?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},t.prototype.fadeSlideOut=function(e){var t=this;t.cssTransitions===!1?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},t.prototype.filterSlides=t.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},t.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var n=e(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=n.is(":focus"),t.autoPlay())},0)})},t.prototype.getCurrent=t.prototype.slickCurrentSlide=function(){var e=this;return e.currentSlide},t.prototype.getDotCount=function(){var e=this,t=0,i=0,n=0;if(e.options.infinite===!0)if(e.slideCount<=e.options.slidesToShow)++n;else for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(e.options.centerMode===!0)n=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++n,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else n=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return n-1},t.prototype.getLeft=function(e){var t,i,n,r,s=this,o=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),s.options.infinite===!0?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,r=-1,s.options.vertical===!0&&s.options.centerMode===!0&&(2===s.options.slidesToShow?r=-1.5:1===s.options.slidesToShow&&(r=-2)),o=i*s.options.slidesToShow*r),s.slideCount%s.options.slidesToScroll!==0&&e+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(e>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(e-s.slideCount))*s.slideWidth*-1,o=(s.options.slidesToShow-(e-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,o=s.slideCount%s.options.slidesToScroll*i*-1))):e+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(e+s.options.slidesToShow-s.slideCount)*s.slideWidth,o=(e+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,o=0),s.options.centerMode===!0&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:s.options.centerMode===!0&&s.options.infinite===!0?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:s.options.centerMode===!0&&(s.slideOffset=0,
s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),t=s.options.vertical===!1?e*s.slideWidth*-1+s.slideOffset:e*i*-1+o,s.options.variableWidth===!0&&(n=s.slideCount<=s.options.slidesToShow||s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow),t=s.options.rtl===!0?n[0]?(s.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,s.options.centerMode===!0&&(n=s.slideCount<=s.options.slidesToShow||s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(e):s.$slideTrack.children(".slick-slide").eq(e+s.options.slidesToShow+1),t=s.options.rtl===!0?n[0]?(s.$slideTrack.width()-n[0].offsetLeft-n.width())*-1:0:n[0]?n[0].offsetLeft*-1:0,t+=(s.$list.width()-n.outerWidth())/2)),t},t.prototype.getOption=t.prototype.slickGetOption=function(e){var t=this;return t.options[e]},t.prototype.getNavigableIndexes=function(){var e,t=this,i=0,n=0,r=[];for(t.options.infinite===!1?e=t.slideCount:(i=t.options.slidesToScroll*-1,n=t.options.slidesToScroll*-1,e=2*t.slideCount);i<e;)r.push(i),i=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return r},t.prototype.getSlick=function(){return this},t.prototype.getSlideCount=function(){var t,i,n,r=this;return n=r.options.centerMode===!0?r.slideWidth*Math.floor(r.options.slidesToShow/2):0,r.options.swipeToSlide===!0?(r.$slideTrack.find(".slick-slide").each(function(t,s){if(s.offsetLeft-n+e(s).outerWidth()/2>r.swipeLeft*-1)return i=s,!1}),t=Math.abs(e(i).attr("data-slick-index")-r.currentSlide)||1):r.options.slidesToScroll},t.prototype.goTo=t.prototype.slickGoTo=function(e,t){var i=this;i.changeSlide({data:{message:"index",index:parseInt(e)}},t)},t.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),i.options.accessibility===!0&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},t.prototype.initADA=function(){var t=this,i=Math.ceil(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter(function(e){return e>=0&&e<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(i){var r=n.indexOf(i);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+i,tabindex:-1}),r!==-1){var s="slick-slide-control"+t.instanceUid+r;e("#"+s).length&&e(this).attr({"aria-describedby":s})}}),t.$dots.attr("role","tablist").find("li").each(function(r){var s=n[r];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+r,"aria-controls":"slick-slide"+t.instanceUid+s,"aria-label":r+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var r=t.currentSlide,s=r+t.options.slidesToShow;r<s;r++)t.options.focusOnChange?t.$slides.eq(r).attr({tabindex:"0"}):t.$slides.eq(r).removeAttr("tabindex");t.activateADA()},t.prototype.initArrowEvents=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),e.options.accessibility===!0&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},t.prototype.initDotEvents=function(){var t=this;t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),t.options.accessibility===!0&&t.$dots.on("keydown.slick",t.keyHandler)),t.options.dots===!0&&t.options.pauseOnDotsHover===!0&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},t.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},t.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),t.options.accessibility===!0&&t.$list.on("keydown.slick",t.keyHandler),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},t.prototype.initUI=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},t.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&t.options.accessibility===!0?t.changeSlide({data:{message:t.options.rtl===!0?"next":"previous"}}):39===e.keyCode&&t.options.accessibility===!0&&t.changeSlide({data:{message:t.options.rtl===!0?"previous":"next"}}))},t.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),r=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),r&&t.attr("sizes",r)),t.attr("src",i).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,t,i])})},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,i])},s.src=i})}var i,n,r,s,o=this;if(o.options.centerMode===!0?o.options.infinite===!0?(r=o.currentSlide+(o.options.slidesToShow/2+1),s=r+o.options.slidesToShow+2):(r=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),s=2+(o.options.slidesToShow/2+1)+o.currentSlide):(r=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,s=Math.ceil(r+o.options.slidesToShow),o.options.fade===!0&&(r>0&&r--,s<=o.slideCount&&s++)),i=o.$slider.find(".slick-slide").slice(r,s),"anticipated"===o.options.lazyLoad)for(var a=r-1,l=s,d=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)a<0&&(a=o.slideCount-1),i=i.add(d.eq(a)),i=i.add(d.eq(l)),a--,l++;t(i),o.slideCount<=o.options.slidesToShow?(n=o.$slider.find(".slick-slide"),t(n)):o.currentSlide>=o.slideCount-o.options.slidesToShow?(n=o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow),t(n)):0===o.currentSlide&&(n=o.$slider.find(".slick-cloned").slice(o.options.slidesToShow*-1),t(n))},t.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},t.prototype.next=t.prototype.slickNext=function(){var e=this;e.changeSlide({data:{message:"next"}})},t.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},t.prototype.pause=t.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},t.prototype.play=t.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},t.prototype.postSlide=function(t){var i=this;if(!i.unslicked&&(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),i.options.accessibility===!0&&(i.initADA(),i.options.focusOnChange))){var n=e(i.$slides.get(i.currentSlide));n.attr("tabindex",0).focus()}},t.prototype.prev=t.prototype.slickPrev=function(){var e=this;e.changeSlide({data:{message:"previous"}})},t.prototype.preventDefault=function(e){e.preventDefault()},t.prototype.progressiveLazyLoad=function(t){t=t||1;var i,n,r,s,o,a=this,l=e("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),r=i.attr("data-srcset"),s=i.attr("data-sizes")||a.$slider.attr("data-sizes"),o=document.createElement("img"),o.onload=function(){r&&(i.attr("srcset",r),s&&i.attr("sizes",s)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),a.options.adaptiveHeight===!0&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},o.onerror=function(){t<3?setTimeout(function(){a.progressiveLazyLoad(t+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},o.src=n):a.$slider.trigger("allImagesLoaded",[a])},t.prototype.refresh=function(t){var i,n,r=this;n=r.slideCount-r.options.slidesToShow,!r.options.infinite&&r.currentSlide>n&&(r.currentSlide=n),r.slideCount<=r.options.slidesToShow&&(r.currentSlide=0),i=r.currentSlide,r.destroy(!0),e.extend(r,r.initials,{currentSlide:i}),r.init(),t||r.changeSlide({data:{message:"index",index:i}},!1)},t.prototype.registerBreakpoints=function(){var t,i,n,r=this,s=r.options.responsive||null;if("array"===e.type(s)&&s.length){r.respondTo=r.options.respondTo||"window";for(t in s)if(n=r.breakpoints.length-1,s.hasOwnProperty(t)){for(i=s[t].breakpoint;n>=0;)r.breakpoints[n]&&r.breakpoints[n]===i&&r.breakpoints.splice(n,1),n--;r.breakpoints.push(i),r.breakpointSettings[i]=s[t].settings}r.breakpoints.sort(function(e,t){return r.options.mobileFirst?e-t:t-e})}},t.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),t.options.focusOnSelect===!0&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},t.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},t.prototype.removeSlide=t.prototype.slickRemove=function(e,t,i){var n=this;return"boolean"==typeof e?(t=e,e=t===!0?0:n.slideCount-1):e=t===!0?--e:e,!(n.slideCount<1||e<0||e>n.slideCount-1)&&(n.unload(),i===!0?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(e).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,void n.reinit())},t.prototype.setCSS=function(e){var t,i,n=this,r={};n.options.rtl===!0&&(e=-e),t="left"==n.positionProp?Math.ceil(e)+"px":"0px",i="top"==n.positionProp?Math.ceil(e)+"px":"0px",r[n.positionProp]=e,n.transformsEnabled===!1?n.$slideTrack.css(r):(r={},n.cssTransitions===!1?(r[n.animType]="translate("+t+", "+i+")",n.$slideTrack.css(r)):(r[n.animType]="translate3d("+t+", "+i+", 0px)",n.$slideTrack.css(r)))},t.prototype.setDimensions=function(){var e=this;e.options.vertical===!1?e.options.centerMode===!0&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),e.options.centerMode===!0&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),e.options.vertical===!1&&e.options.variableWidth===!1?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):e.options.variableWidth===!0?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();e.options.variableWidth===!1&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},t.prototype.setFade=function(){var t,i=this;i.$slides.each(function(n,r){t=i.slideWidth*n*-1,i.options.rtl===!0?e(r).css({position:"relative",right:t,top:0,zIndex:i.options.zIndex-2,opacity:0}):e(r).css({position:"relative",left:t,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},t.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&e.options.adaptiveHeight===!0&&e.options.vertical===!1){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},t.prototype.setOption=t.prototype.slickSetOption=function(){var t,i,n,r,s,o=this,a=!1;if("object"===e.type(arguments[0])?(n=arguments[0],a=arguments[1],s="multiple"):"string"===e.type(arguments[0])&&(n=arguments[0],r=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?s="responsive":"undefined"!=typeof arguments[1]&&(s="single")),"single"===s)o.options[n]=r;else if("multiple"===s)e.each(n,function(e,t){o.options[e]=t});else if("responsive"===s)for(i in r)if("array"!==e.type(o.options.responsive))o.options.responsive=[r[i]];else{for(t=o.options.responsive.length-1;t>=0;)o.options.responsive[t].breakpoint===r[i].breakpoint&&o.options.responsive.splice(t,1),t--;o.options.responsive.push(r[i])}a&&(o.unload(),o.reinit())},t.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),e.options.fade===!1?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},t.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=e.options.vertical===!0?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||e.options.useCSS===!0&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&e.animType!==!1&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&e.animType!==!1},t.prototype.setSlideClasses=function(e){var t,i,n,r,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(e).addClass("slick-current"),s.options.centerMode===!0){var o=s.options.slidesToShow%2===0?1:0;t=Math.floor(s.options.slidesToShow/2),s.options.infinite===!0&&(e>=t&&e<=s.slideCount-1-t?s.$slides.slice(e-t+o,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+e,i.slice(n-t+1+o,n+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):e===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=s.slideCount-s.options.slidesToShow?s.$slides.slice(e,e+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(r=s.slideCount%s.options.slidesToShow,n=s.options.infinite===!0?s.options.slidesToShow+e:e,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-e<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-r),n+r).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},t.prototype.setupInfinite=function(){var t,i,n,r=this;if(r.options.fade===!0&&(r.options.centerMode=!1),r.options.infinite===!0&&r.options.fade===!1&&(i=null,r.slideCount>r.options.slidesToShow)){for(n=r.options.centerMode===!0?r.options.slidesToShow+1:r.options.slidesToShow,t=r.slideCount;t>r.slideCount-n;t-=1)i=t-1,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-r.slideCount).prependTo(r.$slideTrack).addClass("slick-cloned");for(t=0;t<n+r.slideCount;t+=1)i=t,e(r.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+r.slideCount).appendTo(r.$slideTrack).addClass("slick-cloned");r.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},t.prototype.interrupt=function(e){var t=this;e||t.autoPlay(),t.interrupted=e},t.prototype.selectHandler=function(t){var i=this,n=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),r=parseInt(n.attr("data-slick-index"));return r||(r=0),i.slideCount<=i.options.slidesToShow?void i.slideHandler(r,!1,!0):void i.slideHandler(r)},t.prototype.slideHandler=function(e,t,i){var n,r,s,o,a,l=null,d=this;if(t=t||!1,!(d.animating===!0&&d.options.waitForAnimate===!0||d.options.fade===!0&&d.currentSlide===e))return t===!1&&d.asNavFor(e),n=e,l=d.getLeft(n),o=d.getLeft(d.currentSlide),d.currentLeft=null===d.swipeLeft?o:d.swipeLeft,d.options.infinite===!1&&d.options.centerMode===!1&&(e<0||e>d.getDotCount()*d.options.slidesToScroll)?void(d.options.fade===!1&&(n=d.currentSlide,i!==!0&&d.slideCount>d.options.slidesToShow?d.animateSlide(o,function(){d.postSlide(n)}):d.postSlide(n))):d.options.infinite===!1&&d.options.centerMode===!0&&(e<0||e>d.slideCount-d.options.slidesToScroll)?void(d.options.fade===!1&&(n=d.currentSlide,i!==!0&&d.slideCount>d.options.slidesToShow?d.animateSlide(o,function(){d.postSlide(n)}):d.postSlide(n))):(d.options.autoplay&&clearInterval(d.autoPlayTimer),r=n<0?d.slideCount%d.options.slidesToScroll!==0?d.slideCount-d.slideCount%d.options.slidesToScroll:d.slideCount+n:n>=d.slideCount?d.slideCount%d.options.slidesToScroll!==0?0:n-d.slideCount:n,d.animating=!0,d.$slider.trigger("beforeChange",[d,d.currentSlide,r]),s=d.currentSlide,d.currentSlide=r,d.setSlideClasses(d.currentSlide),d.options.asNavFor&&(a=d.getNavTarget(),a=a.slick("getSlick"),a.slideCount<=a.options.slidesToShow&&a.setSlideClasses(d.currentSlide)),d.updateDots(),d.updateArrows(),d.options.fade===!0?(i!==!0?(d.fadeSlideOut(s),d.fadeSlide(r,function(){d.postSlide(r)})):d.postSlide(r),void d.animateHeight()):void(i!==!0&&d.slideCount>d.options.slidesToShow?d.animateSlide(l,function(){d.postSlide(r)}):d.postSlide(r)))},t.prototype.startLoad=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},t.prototype.swipeDirection=function(){var e,t,i,n,r=this;return e=r.touchObject.startX-r.touchObject.curX,t=r.touchObject.startY-r.touchObject.curY,i=Math.atan2(t,e),n=Math.round(180*i/Math.PI),n<0&&(n=360-Math.abs(n)),n<=45&&n>=0?r.options.rtl===!1?"left":"right":n<=360&&n>=315?r.options.rtl===!1?"left":"right":n>=135&&n<=225?r.options.rtl===!1?"right":"left":r.options.verticalSwiping===!0?n>=35&&n<=135?"down":"up":"vertical"},t.prototype.swipeEnd=function(e){var t,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1,!1;if(n.interrupted=!1,n.shouldClick=!(n.touchObject.swipeLength>10),void 0===n.touchObject.curX)return!1;if(n.touchObject.edgeHit===!0&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":t=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(t),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},t.prototype.swipeHandler=function(e){var t=this;if(!(t.options.swipe===!1||"ontouchend"in document&&t.options.swipe===!1||t.options.draggable===!1&&e.type.indexOf("mouse")!==-1))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,t.options.verticalSwiping===!0&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},t.prototype.swipeMove=function(e){var t,i,n,r,s,o,a=this;return s=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:e.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),o=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&o>4?(a.scrolling=!0,!1):(a.options.verticalSwiping===!0&&(a.touchObject.swipeLength=o),i=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),r=(a.options.rtl===!1?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),a.options.verticalSwiping===!0&&(r=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,a.options.infinite===!1&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),a.options.vertical===!1?a.swipeLeft=t+n*r:a.swipeLeft=t+n*(a.$list.height()/a.listWidth)*r,a.options.verticalSwiping===!0&&(a.swipeLeft=t+n*r),a.options.fade!==!0&&a.options.touchMove!==!1&&(a.animating===!0?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},t.prototype.swipeStart=function(e){var t,i=this;return i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow?(i.touchObject={},!1):(void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,void(i.dragging=!0))},t.prototype.unfilterSlides=t.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},t.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},t.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},t.prototype.updateArrows=function(){var e,t=this;e=Math.floor(t.options.slidesToShow/2),t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-t.options.slidesToShow&&t.options.centerMode===!1?(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-1&&t.options.centerMode===!0&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},t.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},t.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,i,n=this,r=arguments[0],s=Array.prototype.slice.call(arguments,1),o=n.length;for(e=0;e<o;e++)if("object"==typeof r||"undefined"==typeof r?n[e].slick=new t(n[e],r):i=n[e].slick[r].apply(n[e].slick,s),"undefined"!=typeof i)return i;return n}}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Swiper=t()}(this,function(){"use strict";function e(e,t){var i=[],n=0;if(e&&!t&&e instanceof W)return e;if(e)if("string"==typeof e){var r,s,o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var a="div";for(0===o.indexOf("<li")&&(a="ul"),0===o.indexOf("<tr")&&(a="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(a="tr"),0===o.indexOf("<tbody")&&(a="table"),0===o.indexOf("<option")&&(a="select"),s=document.createElement(a),s.innerHTML=o,n=0;n<s.childNodes.length;n+=1)i.push(s.childNodes[n])}else for(r=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||document).querySelectorAll(e.trim()):[document.getElementById(e.trim().split("#")[1])],n=0;n<r.length;n+=1)r[n]&&i.push(r[n])}else if(e.nodeType||e===window||e===document)i.push(e);else if(e.length>0&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new W(i)}function t(e){for(var t=[],i=0;i<e.length;i+=1)t.indexOf(e[i])===-1&&t.push(e[i]);return t}function i(e){var t=this;if("undefined"==typeof e)return this;for(var i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.add(i[n]);return this}function n(e){for(var t=this,i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.remove(i[n]);return this}function r(e){return!!this[0]&&this[0].classList.contains(e)}function s(e){for(var t=this,i=e.split(" "),n=0;n<i.length;n+=1)for(var r=0;r<this.length;r+=1)"undefined"!=typeof t[r].classList&&t[r].classList.toggle(i[n]);return this}function o(e,t){var i=arguments,n=this;if(1!==arguments.length||"string"!=typeof e){for(var r=0;r<this.length;r+=1)if(2===i.length)n[r].setAttribute(e,t);else for(var s in e)n[r][s]=e[s],n[r].setAttribute(s,e[s]);return this}if(this[0])return this[0].getAttribute(e)}function a(e){for(var t=this,i=0;i<this.length;i+=1)t[i].removeAttribute(e);return this}function l(e,t){var i,n=this;if("undefined"!=typeof t){for(var r=0;r<this.length;r+=1)i=n[r],i.dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0]){if(i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage)return i.dom7ElementDataStorage[e];var s=i.getAttribute("data-"+e);if(s)return s}else;}function d(e){for(var t=this,i=0;i<this.length;i+=1){var n=t[i].style;n.webkitTransform=e,n.transform=e}return this}function c(e){var t=this;"string"!=typeof e&&(e+="ms");for(var i=0;i<this.length;i+=1){var n=t[i].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this}function u(){function t(t){var i=t.target;if(i){var n=t.target.dom7EventData||[];if(n.unshift(t),e(i).is(a))l.apply(i,n);else for(var r=e(i).parents(),s=0;s<r.length;s+=1)e(r[s]).is(a)&&l.apply(r[s],n)}}function i(e){var t=e&&e.target?e.target.dom7EventData||[]:[];t.unshift(e),l.apply(this,t)}for(var n=this,r=[],s=arguments.length;s--;)r[s]=arguments[s];var o=r[0],a=r[1],l=r[2],d=r[3];if("function"==typeof r[1]){var c;c=r,o=c[0],l=c[1],d=c[2],a=void 0}d||(d=!1);for(var u,p=o.split(" "),f=0;f<this.length;f+=1){var h=n[f];if(a)for(u=0;u<p.length;u+=1)h.dom7LiveListeners||(h.dom7LiveListeners=[]),h.dom7LiveListeners.push({type:o,listener:l,proxyListener:t}),h.addEventListener(p[u],t,d);else for(u=0;u<p.length;u+=1)h.dom7Listeners||(h.dom7Listeners=[]),h.dom7Listeners.push({type:o,listener:l,proxyListener:i}),h.addEventListener(p[u],i,d)}return this}function p(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];var n=t[0],r=t[1],s=t[2],o=t[3];if("function"==typeof t[1]){var a;a=t,n=a[0],s=a[1],o=a[2],r=void 0}o||(o=!1);for(var l=n.split(" "),d=0;d<l.length;d+=1)for(var c=0;c<this.length;c+=1){var u=e[c];if(r){if(u.dom7LiveListeners)for(var p=0;p<u.dom7LiveListeners.length;p+=1)s?u.dom7LiveListeners[p].listener===s&&u.removeEventListener(l[d],u.dom7LiveListeners[p].proxyListener,o):u.dom7LiveListeners[p].type===l[d]&&u.removeEventListener(l[d],u.dom7LiveListeners[p].proxyListener,o)}else if(u.dom7Listeners)for(var f=0;f<u.dom7Listeners.length;f+=1)s?u.dom7Listeners[f].listener===s&&u.removeEventListener(l[d],u.dom7Listeners[f].proxyListener,o):u.dom7Listeners[f].type===l[d]&&u.removeEventListener(l[d],u.dom7Listeners[f].proxyListener,o)}return this}function f(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=t[0].split(" "),r=t[1],s=0;s<n.length;s+=1)for(var o=0;o<this.length;o+=1){var a=void 0;try{a=new window.CustomEvent(n[s],{detail:r,bubbles:!0,cancelable:!0})}catch(l){a=document.createEvent("Event"),a.initEvent(n[s],!0,!0),a.detail=r}e[o].dom7EventData=t.filter(function(e,t){return t>0}),e[o].dispatchEvent(a),e[o].dom7EventData=[],delete e[o].dom7EventData}return this}function h(e){function t(s){if(s.target===this)for(e.call(this,s),i=0;i<n.length;i+=1)r.off(n[i],t)}var i,n=["webkitTransitionEnd","transitionend"],r=this;if(e)for(i=0;i<n.length;i+=1)r.on(n[i],t);return this}function v(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null}function m(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null}function g(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),i=document.body,n=e.clientTop||i.clientTop||0,r=e.clientLeft||i.clientLeft||0,s=e===window?window.scrollY:e.scrollTop,o=e===window?window.scrollX:e.scrollLeft;return{top:t.top+s-n,
left:t.left+o-r}}return null}function y(){return this[0]?window.getComputedStyle(this[0],null):{}}function w(e,t){var i,n=this;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var r in e)n[i].style[r]=e[r];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)n[i].style[e]=t;return this}return this}function b(e){var t=this;if(!e)return this;for(var i=0;i<this.length;i+=1)if(e.call(t[i],i,t[i])===!1)return t;return this}function x(e){var t=this;if("undefined"==typeof e)return this[0]?this[0].innerHTML:void 0;for(var i=0;i<this.length;i+=1)t[i].innerHTML=e;return this}function T(e){var t=this;if("undefined"==typeof e)return this[0]?this[0].textContent.trim():null;for(var i=0;i<this.length;i+=1)t[i].textContent=e;return this}function S(t){var i,n,r=this[0];if(!r||"undefined"==typeof t)return!1;if("string"==typeof t){if(r.matches)return r.matches(t);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(t);if(r.msMatchesSelector)return r.msMatchesSelector(t);for(i=e(t),n=0;n<i.length;n+=1)if(i[n]===r)return!0;return!1}if(t===document)return r===document;if(t===window)return r===window;if(t.nodeType||t instanceof W){for(i=t.nodeType?[t]:t,n=0;n<i.length;n+=1)if(i[n]===r)return!0;return!1}return!1}function C(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}}function k(e){if("undefined"==typeof e)return this;var t,i=this.length;return e>i-1?new W([]):e<0?(t=i+e,new W(t<0?[]:[this[t]])):new W([this[e]])}function E(){for(var e=this,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n,r=0;r<t.length;r+=1){n=t[r];for(var s=0;s<this.length;s+=1)if("string"==typeof n){var o=document.createElement("div");for(o.innerHTML=n;o.firstChild;)e[s].appendChild(o.firstChild)}else if(n instanceof W)for(var a=0;a<n.length;a+=1)e[s].appendChild(n[a]);else e[s].appendChild(n)}return this}function $(e){var t,i,n=this;for(t=0;t<this.length;t+=1)if("string"==typeof e){var r=document.createElement("div");for(r.innerHTML=e,i=r.childNodes.length-1;i>=0;i-=1)n[t].insertBefore(r.childNodes[i],n[t].childNodes[0])}else if(e instanceof W)for(i=0;i<e.length;i+=1)n[t].insertBefore(e[i],n[t].childNodes[0]);else n[t].insertBefore(e,n[t].childNodes[0]);return this}function M(t){return new W(this.length>0?t?this[0].nextElementSibling&&e(this[0].nextElementSibling).is(t)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])}function P(t){var i=[],n=this[0];if(!n)return new W([]);for(;n.nextElementSibling;){var r=n.nextElementSibling;t?e(r).is(t)&&i.push(r):i.push(r),n=r}return new W(i)}function A(t){if(this.length>0){var i=this[0];return new W(t?i.previousElementSibling&&e(i.previousElementSibling).is(t)?[i.previousElementSibling]:[]:i.previousElementSibling?[i.previousElementSibling]:[])}return new W([])}function z(t){var i=[],n=this[0];if(!n)return new W([]);for(;n.previousElementSibling;){var r=n.previousElementSibling;t?e(r).is(t)&&i.push(r):i.push(r),n=r}return new W(i)}function D(i){for(var n=this,r=[],s=0;s<this.length;s+=1)null!==n[s].parentNode&&(i?e(n[s].parentNode).is(i)&&r.push(n[s].parentNode):r.push(n[s].parentNode));return e(t(r))}function O(i){for(var n=this,r=[],s=0;s<this.length;s+=1)for(var o=n[s].parentNode;o;)i?e(o).is(i)&&r.push(o):r.push(o),o=o.parentNode;return e(t(r))}function L(e){var t=this;return"undefined"==typeof e?new W([]):(t.is(e)||(t=t.parents(e).eq(0)),t)}function I(e){for(var t=this,i=[],n=0;n<this.length;n+=1)for(var r=t[n].querySelectorAll(e),s=0;s<r.length;s+=1)i.push(r[s]);return new W(i)}function H(i){for(var n=this,r=[],s=0;s<this.length;s+=1)for(var o=n[s].childNodes,a=0;a<o.length;a+=1)i?1===o[a].nodeType&&e(o[a]).is(i)&&r.push(o[a]):1===o[a].nodeType&&r.push(o[a]);return new W(t(r))}function N(){for(var e=this,t=0;t<this.length;t+=1)e[t].parentNode&&e[t].parentNode.removeChild(e[t]);return this}function j(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];var n,r,s=this;for(n=0;n<t.length;n+=1){var o=e(t[n]);for(r=0;r<o.length;r+=1)s[s.length]=o[r],s.length+=1}return s}function _(){var e=this,t=e.params,i=e.touchEvents,n=e.el,r=e.wrapperEl;e.onTouchStart=Ne.bind(e),e.onTouchMove=je.bind(e),e.onTouchEnd=_e.bind(e),e.onClick=qe.bind(e);var s="container"===t.touchEventsTarget?n:r,o=!!t.nested;if(ge.ie)s.addEventListener(i.start,e.onTouchStart,!1),(U.touch?s:V).addEventListener(i.move,e.onTouchMove,o),(U.touch?s:V).addEventListener(i.end,e.onTouchEnd,!1);else{if(U.touch){var a=!("touchstart"!==i.start||!U.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.addEventListener(i.start,e.onTouchStart,a),s.addEventListener(i.move,e.onTouchMove,U.passiveListener?{passive:!1,capture:o}:o),s.addEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!He.ios&&!He.android||t.simulateTouch&&!U.touch&&He.ios)&&(s.addEventListener("mousedown",e.onTouchStart,!1),V.addEventListener("mousemove",e.onTouchMove,o),V.addEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.addEventListener("click",e.onClick,!0),e.on("resize observerUpdate",Fe)}function F(){var e=this,t=e.params,i=e.touchEvents,n=e.el,r=e.wrapperEl,s="container"===t.touchEventsTarget?n:r,o=!!t.nested;if(ge.ie)s.removeEventListener(i.start,e.onTouchStart,!1),(U.touch?s:V).removeEventListener(i.move,e.onTouchMove,o),(U.touch?s:V).removeEventListener(i.end,e.onTouchEnd,!1);else{if(U.touch){var a=!("onTouchStart"!==i.start||!U.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};s.removeEventListener(i.start,e.onTouchStart,a),s.removeEventListener(i.move,e.onTouchMove,o),s.removeEventListener(i.end,e.onTouchEnd,a)}(t.simulateTouch&&!He.ios&&!He.android||t.simulateTouch&&!U.touch&&He.ios)&&(s.removeEventListener("mousedown",e.onTouchStart,!1),V.removeEventListener("mousemove",e.onTouchMove,o),V.removeEventListener("mouseup",e.onTouchEnd,!1))}(t.preventClicks||t.preventClicksPropagation)&&s.removeEventListener("click",e.onClick,!0),e.off("resize observerUpdate",Fe)}function q(){var e="onwheel",t=e in V;if(!t){var i=V.createElement("div");i.setAttribute(e,"return;"),t="function"==typeof i[e]}return!t&&V.implementation&&V.implementation.hasFeature&&V.implementation.hasFeature("","")!==!0&&(t=V.implementation.hasFeature("Events.wheel","3.0")),t}var B;B="undefined"==typeof window?{navigator:{userAgent:""},location:{},history:{},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{}},Image:function(){},Date:function(){},screen:{}}:window;var R=B,W=function(e){for(var t=this,i=0;i<e.length;i+=1)t[i]=e[i];return t.length=e.length,this};e.fn=W.prototype,e.Class=W,e.Dom7=W;var X=("resize scroll".split(" "),{addClass:i,removeClass:n,hasClass:r,toggleClass:s,attr:o,removeAttr:a,data:l,transform:d,transition:c,on:u,off:p,trigger:f,transitionEnd:h,outerWidth:v,outerHeight:m,offset:g,css:w,each:b,html:x,text:T,is:S,index:C,eq:k,append:E,prepend:$,next:M,nextAll:P,prev:A,prevAll:z,parent:D,parents:O,closest:L,find:I,children:H,remove:N,add:j,styles:y});Object.keys(X).forEach(function(t){e.fn[t]=X[t]});var Y,G={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(i){}try{delete t[e]}catch(i){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){void 0===t&&(t="x");var i,n,r,s=R.getComputedStyle(e,null);return R.WebKitCSSMatrix?(n=s.transform||s.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),r=new R.WebKitCSSMatrix("none"===n?"":n)):(r=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=r.toString().split(",")),"x"===t&&(n=R.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=R.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,r,s={},o=e||R.location.href;if("string"==typeof o&&o.length)for(o=o.indexOf("?")>-1?o.replace(/\S*\?/,""):"",i=o.split("&").filter(function(e){return""!==e}),r=i.length,t=0;t<r;t+=1)n=i[t].replace(/#\S+/g,"").split("="),s[decodeURIComponent(n[0])]="undefined"==typeof n[1]?void 0:decodeURIComponent(n[1])||"";return s},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var r=e[n];if(void 0!==r&&null!==r)for(var s=Object.keys(Object(r)),o=0,a=s.length;o<a;o+=1){var l=s[o],d=Object.getOwnPropertyDescriptor(r,l);void 0!==d&&d.enumerable&&(G.isObject(i[l])&&G.isObject(r[l])?G.extend(i[l],r[l]):!G.isObject(i[l])&&G.isObject(r[l])?(i[l]={},G.extend(i[l],r[l])):i[l]=r[l])}}return i}};Y="undefined"==typeof document?{addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return{}},querySelectorAll:function(){return[]},createElement:function(){return{style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document;var V=Y,U=function(){return{touch:R.Modernizr&&R.Modernizr.touch===!0||function(){return!!("ontouchstart"in R||R.DocumentTouch&&V instanceof R.DocumentTouch)}(),transforms3d:R.Modernizr&&R.Modernizr.csstransforms3d===!0||function(){var e=V.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=V.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),i=0;i<t.length;i+=1)if(t[i]in e)return!0;return!1}(),observer:function(){return"MutationObserver"in R||"WebkitMutationObserver"in R}(),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});R.addEventListener("testPassiveListener",null,t)}catch(i){}return e}(),gestures:function(){return"ongesturestart"in R}()}}(),K=function(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})},Q={components:{}};K.prototype.on=function(e,t){var i=this;return"function"!=typeof t?i:(e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e].push(t)}),i)},K.prototype.once=function(e,t){function i(){for(var r=[],s=arguments.length;s--;)r[s]=arguments[s];t.apply(n,r),n.off(e,i)}var n=this;return"function"!=typeof t?n:n.on(e,i)},K.prototype.off=function(e,t){var i=this;return e.split(" ").forEach(function(e){"undefined"==typeof t?i.eventsListeners[e]=[]:i.eventsListeners[e].forEach(function(n,r){n===t&&i.eventsListeners[e].splice(r,1)})}),i},K.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=this;if(!i.eventsListeners)return i;var n,r,s;"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],r=e.slice(1,e.length),s=i):(n=e[0].events,r=e[0].data,s=e[0].context||i);var o=Array.isArray(n)?n:n.split(" ");return o.forEach(function(e){if(i.eventsListeners[e]){var t=[];i.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,r)})}}),i},K.prototype.useModulesParams=function(e){var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var n=t.modules[i];n.params&&G.extend(e,n.params)})},K.prototype.useModules=function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach(function(i){var n=t.modules[i],r=e[i]||{};n.instance&&Object.keys(n.instance).forEach(function(e){var i=n.instance[e];"function"==typeof i?t[e]=i.bind(t):t[e]=i}),n.on&&t.on&&Object.keys(n.on).forEach(function(e){t.on(e,n.on[e])}),n.create&&n.create.bind(t)(r)})},Q.components.set=function(e){var t=this;t.use&&t.use(e)},K.installModule=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var r=e.name||Object.keys(n.prototype.modules).length+"_"+G.now();return n.prototype.modules[r]=e,e.proto&&Object.keys(e.proto).forEach(function(t){n.prototype[t]=e.proto[t]}),e["static"]&&Object.keys(e["static"]).forEach(function(t){n[t]=e["static"][t]}),e.install&&e.install.apply(n,t),n},K.use=function(e){for(var t=[],i=arguments.length-1;i-- >0;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(K,Q);var J=function(){var e,t,i=this,n=i.$el;e="undefined"!=typeof i.params.width?i.params.width:n[0].clientWidth,t="undefined"!=typeof i.params.height?i.params.height:n[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(n.css("padding-left"),10)-parseInt(n.css("padding-right"),10),t=t-parseInt(n.css("padding-top"),10)-parseInt(n.css("padding-bottom"),10),G.extend(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},Z=function(){var e=this,t=e.params,i=e.$wrapperEl,n=e.size,r=e.rtl,s=e.wrongRTL,o=i.children("."+e.params.slideClass),a=e.virtual&&t.virtual.enabled,l=a?e.virtual.slides.length:o.length,d=[],c=[],u=[],p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(e));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(e));var h=l,v=e.snapGrid.length,m=e.snapGrid.length,g=t.spaceBetween,y=-p,w=0,b=0;if("undefined"!=typeof n){"string"==typeof g&&g.indexOf("%")>=0&&(g=parseFloat(g.replace("%",""))/100*n),e.virtualSize=-g,r?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""});var x;t.slidesPerColumn>1&&(x=Math.floor(l/t.slidesPerColumn)===l/e.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));for(var T,S=t.slidesPerColumn,C=x/S,k=C-(t.slidesPerColumn*C-l),E=0;E<l;E+=1){T=0;var $=o.eq(E);if(t.slidesPerColumn>1){var M=void 0,P=void 0,A=void 0;"column"===t.slidesPerColumnFill?(P=Math.floor(E/S),A=E-P*S,(P>k||P===k&&A===S-1)&&(A+=1,A>=S&&(A=0,P+=1)),M=P+A*x/S,$.css({"-webkit-box-ordinal-group":M,"-moz-box-ordinal-group":M,"-ms-flex-order":M,"-webkit-order":M,order:M})):(A=Math.floor(E/C),P=E-A*C),$.css("margin-"+(e.isHorizontal()?"top":"left"),0!==A&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",P).attr("data-swiper-row",A)}"none"!==$.css("display")&&("auto"===t.slidesPerView?(T=e.isHorizontal()?$.outerWidth(!0):$.outerHeight(!0),t.roundLengths&&(T=Math.floor(T))):(T=(n-(t.slidesPerView-1)*g)/t.slidesPerView,t.roundLengths&&(T=Math.floor(T)),o[E]&&(e.isHorizontal()?o[E].style.width=T+"px":o[E].style.height=T+"px")),o[E]&&(o[E].swiperSlideSize=T),u.push(T),t.centeredSlides?(y=y+T/2+w/2+g,0===w&&0!==E&&(y=y-n/2-g),0===E&&(y=y-n/2-g),Math.abs(y)<.001&&(y=0),b%t.slidesPerGroup===0&&d.push(y),c.push(y)):(b%t.slidesPerGroup===0&&d.push(y),c.push(y),y=y+T+g),e.virtualSize+=T+g,w=T,b+=1)}e.virtualSize=Math.max(e.virtualSize,n)+f;var z;if(r&&s&&("slide"===t.effect||"coverflow"===t.effect)&&i.css({width:e.virtualSize+t.spaceBetween+"px"}),U.flexbox&&!t.setWrapperSize||(e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"})),t.slidesPerColumn>1&&(e.virtualSize=(T+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+t.spaceBetween+"px"}):i.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){z=[];for(var D=0;D<d.length;D+=1)d[D]<e.virtualSize+d[0]&&z.push(d[D]);d=z}if(!t.centeredSlides){z=[];for(var O=0;O<d.length;O+=1)d[O]<=e.virtualSize-n&&z.push(d[O]);d=z,Math.floor(e.virtualSize-n)-Math.floor(d[d.length-1])>1&&d.push(e.virtualSize-n)}0===d.length&&(d=[0]),0!==t.spaceBetween&&(e.isHorizontal()?r?o.css({marginLeft:g+"px"}):o.css({marginRight:g+"px"}):o.css({marginBottom:g+"px"})),G.extend(e,{slides:o,snapGrid:d,slidesGrid:c,slidesSizesGrid:u}),l!==h&&e.emit("slidesLengthChange"),d.length!==v&&e.emit("snapGridLengthChange"),c.length!==m&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},ee=function(){var e,t=this,i=[],n=0;if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)for(e=0;e<Math.ceil(t.params.slidesPerView);e+=1){var r=t.activeIndex+e;if(r>t.slides.length)break;i.push(t.slides.eq(r)[0])}else i.push(t.slides.eq(t.activeIndex)[0]);for(e=0;e<i.length;e+=1)if("undefined"!=typeof i[e]){var s=i[e].offsetHeight;n=s>n?s:n}n&&t.$wrapperEl.css("height",n+"px")},te=function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1)t[i].swiperSlideOffset=e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop},ie=function(e){void 0===e&&(e=this.translate||0);var t=this,i=t.params,n=t.slides,r=t.rtl;if(0!==n.length){"undefined"==typeof n[0].swiperSlideOffset&&t.updateSlidesOffset();var s=-e;r&&(s=e),n.removeClass(i.slideVisibleClass);for(var o=0;o<n.length;o+=1){var a=n[o],l=(s+(i.centeredSlides?t.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility){var d=-(s-a.swiperSlideOffset),c=d+t.slidesSizesGrid[o],u=d>=0&&d<t.size||c>0&&c<=t.size||d<=0&&c>=t.size;u&&n.eq(o).addClass(i.slideVisibleClass)}a.progress=r?-l:l}}},ne=function(e){void 0===e&&(e=this.translate||0);var t=this,i=t.params,n=t.maxTranslate()-t.minTranslate(),r=t.progress,s=t.isBeginning,o=t.isEnd,a=s,l=o;0===n?(r=0,s=!0,o=!0):(r=(e-t.minTranslate())/n,s=r<=0,o=r>=1),G.extend(t,{progress:r,isBeginning:s,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility)&&t.updateSlidesProgress(e),s&&!a&&t.emit("reachBeginning toEdge"),o&&!l&&t.emit("reachEnd toEdge"),(a&&!s||l&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},re=function(){var e=this,t=e.slides,i=e.params,n=e.$wrapperEl,r=e.activeIndex,s=e.realIndex,o=e.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass);var a;a=o?e.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):t.eq(r),a.addClass(i.slideActiveClass),i.loop&&(a.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass));var l=a.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=t.eq(0),l.addClass(i.slideNextClass));var d=a.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=t.eq(-1),d.addClass(i.slidePrevClass)),i.loop&&(l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},se=function(e){var t,i=this,n=i.rtl?i.translate:-i.translate,r=i.slidesGrid,s=i.snapGrid,o=i.params,a=i.activeIndex,l=i.realIndex,d=i.snapIndex,c=e;if("undefined"==typeof c){for(var u=0;u<r.length;u+=1)"undefined"!=typeof r[u+1]?n>=r[u]&&n<r[u+1]-(r[u+1]-r[u])/2?c=u:n>=r[u]&&n<r[u+1]&&(c=u+1):n>=r[u]&&(c=u);o.normalizeSlideIndex&&(c<0||"undefined"==typeof c)&&(c=0)}if(t=s.indexOf(n)>=0?s.indexOf(n):Math.floor(c/o.slidesPerGroup),t>=s.length&&(t=s.length-1),c===a)return void(t!==d&&(i.snapIndex=t,i.emit("snapIndexChange")));var p=parseInt(i.slides.eq(c).attr("data-swiper-slide-index")||c,10);G.extend(i,{snapIndex:t,realIndex:p,previousIndex:a,activeIndex:c}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),i.emit("slideChange")},oe=function(t){var i=this,n=i.params,r=e(t.target).closest("."+n.slideClass)[0],s=!1;if(r)for(var o=0;o<i.slides.length;o+=1)i.slides[o]===r&&(s=!0);return r&&s?(i.clickedSlide=r,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(e(r).attr("data-swiper-slide-index"),10):i.clickedIndex=e(r).index(),void(n.slideToClickedSlide&&void 0!==i.clickedIndex&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide())):(i.clickedSlide=void 0,void(i.clickedIndex=void 0))},ae={updateSize:J,updateSlides:Z,updateAutoHeight:ee,updateSlidesOffset:te,updateSlidesProgress:ie,updateProgress:ne,updateSlidesClasses:re,updateActiveIndex:se,updateClickedSlide:oe},le=function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,i=t.params,n=t.rtl,r=t.translate,s=t.$wrapperEl;if(i.virtualTranslate)return n?-r:r;var o=G.getTranslate(s[0],e);return n&&(o=-o),o||0},de=function(e,t){var i=this,n=i.rtl,r=i.params,s=i.$wrapperEl,o=i.progress,a=0,l=0,d=0;i.isHorizontal()?a=n?-e:e:l=e,r.roundLengths&&(a=Math.floor(a),l=Math.floor(l)),r.virtualTranslate||(U.transforms3d?s.transform("translate3d("+a+"px, "+l+"px, "+d+"px)"):s.transform("translate("+a+"px, "+l+"px)")),i.translate=i.isHorizontal()?a:l;var c,u=i.maxTranslate()-i.minTranslate();c=0===u?0:(e-i.minTranslate())/u,c!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},ce=function(){return-this.snapGrid[0]},ue=function(){return-this.snapGrid[this.snapGrid.length-1]},pe={getTranslate:le,setTranslate:de,minTranslate:ce,maxTranslate:ue},fe=function(e,t){var i=this;i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},he=function(e){void 0===e&&(e=!0);var t=this,i=t.activeIndex,n=t.params,r=t.previousIndex;n.autoHeight&&t.updateAutoHeight(),t.emit("transitionStart"),e&&i!==r&&(t.emit("slideChangeTransitionStart"),i>r?t.emit("slideNextTransitionStart"):t.emit("slidePrevTransitionStart"))},ve=function(e){void 0===e&&(e=!0);var t=this,i=t.activeIndex,n=t.previousIndex;t.animating=!1,t.setTransition(0),t.emit("transitionEnd"),e&&i!==n&&(t.emit("slideChangeTransitionEnd"),i>n?t.emit("slideNextTransitionEnd"):t.emit("slidePrevTransitionEnd"))},me={setTransition:fe,transitionStart:he,transitionEnd:ve},ge=function(){function e(){var e=V.createElement("div");return e.innerHTML="<!--[if lte IE 9]><i></i><![endif]-->",1===e.getElementsByTagName("i").length}function t(){var e=R.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}return{isSafari:t(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(R.navigator.userAgent),ie:R.navigator.pointerEnabled||R.navigator.msPointerEnabled,ieTouch:R.navigator.msPointerEnabled&&R.navigator.msMaxTouchPoints>1||R.navigator.pointerEnabled&&R.navigator.maxTouchPoints>1,lteIE9:e()}}(),ye=function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=this,s=e;s<0&&(s=0);var o=r.params,a=r.snapGrid,l=r.slidesGrid,d=r.previousIndex,c=r.activeIndex,u=r.rtl,p=r.$wrapperEl,f=Math.floor(s/o.slidesPerGroup);f>=a.length&&(f=a.length-1),(c||o.initialSlide||0)===(d||0)&&i&&r.emit("beforeSlideChangeStart");var h=-a[f];if(r.updateProgress(h),o.normalizeSlideIndex)for(var v=0;v<l.length;v+=1)-Math.floor(100*h)>=Math.floor(100*l[v])&&(s=v);return!(!r.allowSlideNext&&h<r.translate&&h<r.minTranslate())&&(!(!r.allowSlidePrev&&h>r.translate&&h>r.maxTranslate()&&(c||0)!==s)&&(u&&-h===r.translate||!u&&h===r.translate?(r.updateActiveIndex(s),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(h),!1):(0===t||ge.lteIE9?(r.setTransition(0),r.setTranslate(h),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(i),r.transitionEnd(i)):(r.setTransition(t),r.setTranslate(h),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(i),r.animating||(r.animating=!0,p.transitionEnd(function(){r&&!r.destroyed&&r.transitionEnd(i)}))),!0)))},we=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,s=n.animating;return r.loop?!s&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex+r.slidesPerGroup,e,t,i)):n.slideTo(n.activeIndex+r.slidesPerGroup,e,t,i)},be=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,s=n.animating;return r.loop?!s&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,n.slideTo(n.activeIndex-1,e,t,i)):n.slideTo(n.activeIndex-1,e,t,i)},xe=function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this;return n.slideTo(n.activeIndex,e,t,i)},Te=function(){var t,i=this,n=i.params,r=i.$wrapperEl,s="auto"===n.slidesPerView?i.slidesPerViewDynamic():n.slidesPerView,o=i.clickedIndex;if(n.loop){if(i.animating)return;t=parseInt(e(i.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?o<i.loopedSlides-s/2||o>i.slides.length-i.loopedSlides+s/2?(i.loopFix(),o=r.children("."+n.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),G.nextTick(function(){i.slideTo(o)})):i.slideTo(o):o>i.slides.length-s?(i.loopFix(),o=r.children("."+n.slideClass+'[data-swiper-slide-index="'+t+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),G.nextTick(function(){i.slideTo(o)})):i.slideTo(o)}else i.slideTo(o)},Se={slideTo:ye,slideNext:we,slidePrev:be,slideReset:xe,slideToClickedSlide:Te},Ce=function(){var t=this,i=t.params,n=t.$wrapperEl;n.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var r=n.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var s=i.slidesPerGroup-r.length%i.slidesPerGroup;if(s!==i.slidesPerGroup){for(var o=0;o<s;o+=1){var a=e(V.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);n.append(a)}r=n.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),t.loopedSlides=parseInt(i.loopedSlides||i.slidesPerView,10),t.loopedSlides+=i.loopAdditionalSlides,t.loopedSlides>r.length&&(t.loopedSlides=r.length);var l=[],d=[];r.each(function(i,n){var s=e(n);i<t.loopedSlides&&d.push(n),i<r.length&&i>=r.length-t.loopedSlides&&l.push(n),s.attr("data-swiper-slide-index",i)});for(var c=0;c<d.length;c+=1)n.append(e(d[c].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var u=l.length-1;u>=0;u-=1)n.prepend(e(l[u].cloneNode(!0)).addClass(i.slideDuplicateClass))},ke=function(){var e,t=this,i=t.params,n=t.activeIndex,r=t.slides,s=t.loopedSlides,o=t.allowSlidePrev,a=t.allowSlideNext;t.allowSlidePrev=!0,t.allowSlideNext=!0,n<s?(e=r.length-3*s+n,e+=s,t.slideTo(e,0,!1,!0)):("auto"===i.slidesPerView&&n>=2*s||n>r.length-2*i.slidesPerView)&&(e=-r.length+n+s,e+=s,t.slideTo(e,0,!1,!0)),t.allowSlidePrev=o,t.allowSlideNext=a},Ee=function(){var e=this,t=e.$wrapperEl,i=e.params,n=e.slides;t.children("."+i.slideClass+"."+i.slideDuplicateClass).remove(),n.removeAttr("data-swiper-slide-index")},$e={loopCreate:Ce,loopFix:ke,loopDestroy:Ee},Me=function(e){var t=this;if(!U.touch&&t.params.simulateTouch){var i=t.el;i.style.cursor="move",i.style.cursor=e?"-webkit-grabbing":"-webkit-grab",i.style.cursor=e?"-moz-grabbin":"-moz-grab",i.style.cursor=e?"grabbing":"grab"}},Pe=function(){var e=this;U.touch||(e.el.style.cursor="")},Ae={setGrabCursor:Me,unsetGrabCursor:Pe},ze=function(e){var t=this,i=t.$wrapperEl,n=t.params;if(n.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var r=0;r<e.length;r+=1)e[r]&&i.append(e[r]);else i.append(e);n.loop&&t.loopCreate(),n.observer&&U.observer||t.update()},De=function(e){var t=this,i=t.params,n=t.$wrapperEl,r=t.activeIndex;i.loop&&t.loopDestroy();var s=r+1;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)e[o]&&n.prepend(e[o]);s=r+e.length}else n.prepend(e);i.loop&&t.loopCreate(),i.observer&&U.observer||t.update(),t.slideTo(s,0,!1)},Oe=function(e){var t=this,i=t.params,n=t.$wrapperEl,r=t.activeIndex;i.loop&&(t.loopDestroy(),t.slides=n.children("."+i.slideClass));var s,o=r;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)s=e[a],t.slides[s]&&t.slides.eq(s).remove(),s<o&&(o-=1);o=Math.max(o,0)}else s=e,t.slides[s]&&t.slides.eq(s).remove(),s<o&&(o-=1),o=Math.max(o,0);i.loop&&t.loopCreate(),i.observer&&U.observer||t.update(),i.loop?t.slideTo(o+t.loopedSlides,0,!1):t.slideTo(o,0,!1)},Le=function(){for(var e=this,t=[],i=0;i<e.slides.length;i+=1)t.push(i);e.removeSlide(t)},Ie={appendSlide:ze,prependSlide:De,removeSlide:Oe,removeAllSlides:Le},He=function(){var e=R.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:R.cordova||R.phonegap,phonegap:R.cordova||R.phonegap},i=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),n=e.match(/(Android);?[\s\/]+([\d.]+)?/),r=e.match(/(iPad).*OS\s([\d_]+)/),s=e.match(/(iPod)(.*OS\s([\d_]+))?/),o=!r&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(i&&(t.os="windows",t.osVersion=i[2],t.windows=!0),n&&!i&&(t.os="android",t.osVersion=n[2],t.android=!0,t.androidChrome=e.toLowerCase().indexOf("chrome")>=0),(r||o||s)&&(t.os="ios",t.ios=!0),o&&!s&&(t.osVersion=o[2].replace(/_/g,"."),t.iphone=!0),r&&(t.osVersion=r[2].replace(/_/g,"."),t.ipad=!0),s&&(t.osVersion=s[3]?s[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&e.indexOf("Version/")>=0&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(o||r||s)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){var a=t.osVersion.split("."),l=V.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(s||o)&&(1*a[0]===7?1*a[1]>=1:1*a[0]>7)&&l&&l.getAttribute("content").indexOf("minimal-ui")>=0}return t.pixelRatio=R.devicePixelRatio||1,t}(),Ne=function(t){var i=this,n=i.touchEventsData,r=i.params,s=i.touches,o=t;if(o.originalEvent&&(o=o.originalEvent),n.isTouchEvent="touchstart"===o.type,(n.isTouchEvent||!("which"in o)||3!==o.which)&&(!n.isTouched||!n.isMoved)){if(r.noSwiping&&e(o.target).closest("."+r.noSwipingClass)[0])return void(i.allowClick=!0);if(!r.swipeHandler||e(o).closest(r.swipeHandler)[0]){s.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,s.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;var a=s.currentX,l=s.currentY;if(!(He.ios&&!He.cordova&&r.iOSEdgeSwipeDetection&&a<=r.iOSEdgeSwipeThreshold&&a>=window.screen.width-r.iOSEdgeSwipeThreshold)){if(G.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=a,s.startY=l,n.touchStartTime=G.now(),i.allowClick=!0,i.updateSize(),i.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==o.type){var d=!0;e(o.target).is(n.formElements)&&(d=!1),V.activeElement&&e(V.activeElement).is(n.formElements)&&V.activeElement.blur(),d&&i.allowTouchMove&&o.preventDefault()}i.emit("touchStart",o)}}}},je=function(t){var i=this,n=i.touchEventsData,r=i.params,s=i.touches,o=i.rtl,a=t;if(a.originalEvent&&(a=a.originalEvent),!n.isTouchEvent||"mousemove"!==a.type){var l="touchmove"===a.type?a.targetTouches[0].pageX:a.pageX,d="touchmove"===a.type?a.targetTouches[0].pageY:a.pageY;if(a.preventedByNestedSwiper)return s.startX=l,void(s.startY=d);if(!i.allowTouchMove)return i.allowClick=!1,void(n.isTouched&&(G.extend(s,{startX:l,startY:d,currentX:l,currentY:d}),n.touchStartTime=G.now()));if(n.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(d<s.startY&&i.translate<=i.maxTranslate()||d>s.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(l<s.startX&&i.translate<=i.maxTranslate()||l>s.startX&&i.translate>=i.minTranslate())return;
if(n.isTouchEvent&&V.activeElement&&a.target===V.activeElement&&e(a.target).is(n.formElements))return n.isMoved=!0,void(i.allowClick=!1);if(n.allowTouchCallbacks&&i.emit("touchMove",a),!(a.targetTouches&&a.targetTouches.length>1)){s.currentX=l,s.currentY=d;var c=s.currentX-s.startX,u=s.currentY-s.startY;if("undefined"==typeof n.isScrolling){var p;i.isHorizontal()&&s.currentY===s.startY||i.isVertical()&&s.currentX===s.startX?n.isScrolling=!1:c*c+u*u>=25&&(p=180*Math.atan2(Math.abs(u),Math.abs(c))/Math.PI,n.isScrolling=i.isHorizontal()?p>r.touchAngle:90-p>r.touchAngle)}if(n.isScrolling&&i.emit("touchMoveOpposite",a),"undefined"==typeof startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(n.startMoving=!0)),n.isTouched){if(n.isScrolling)return void(n.isTouched=!1);if(n.startMoving){i.allowClick=!1,a.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&a.stopPropagation(),n.isMoved||(r.loop&&i.loopFix(),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!r.grabCursor||i.allowSlideNext!==!0&&i.allowSlidePrev!==!0||i.setGrabCursor(!0),i.emit("sliderFirstMove",a)),i.emit("sliderMove",a),n.isMoved=!0;var f=i.isHorizontal()?c:u;s.diff=f,f*=r.touchRatio,o&&(f=-f),i.swipeDirection=f>0?"prev":"next",n.currentTranslate=f+n.startTranslate;var h=!0,v=r.resistanceRatio;if(r.touchReleaseOnEdges&&(v=0),f>0&&n.currentTranslate>i.minTranslate()?(h=!1,r.resistance&&(n.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+n.startTranslate+f,v))):f<0&&n.currentTranslate<i.maxTranslate()&&(h=!1,r.resistance&&(n.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-n.startTranslate-f,v))),h&&(a.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.threshold>0){if(!(Math.abs(f)>r.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,n.currentTranslate=n.startTranslate,void(s.diff=i.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}r.followFinger&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&(0===n.velocities.length&&n.velocities.push({position:s[i.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:s[i.isHorizontal()?"currentX":"currentY"],time:G.now()})),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}}}}},_e=function(e){var t=this,i=t.touchEventsData,n=t.params,r=t.touches,s=t.rtl,o=t.$wrapperEl,a=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,i.isTouched){n.grabCursor&&i.isMoved&&i.isTouched&&(t.allowSlideNext===!0||t.allowSlidePrev===!0)&&t.setGrabCursor(!1);var c=G.now(),u=c-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),u<300&&c-i.lastClickTime>300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),i.clickTimeout=G.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),u<300&&c-i.lastClickTime<300&&(i.clickTimeout&&clearTimeout(i.clickTimeout),t.emit("doubleTap",d))),i.lastClickTime=G.now(),G.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var p;if(p=n.followFinger?s?t.translate:-t.translate:-i.currentTranslate,n.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(i.velocities.length>1){var f=i.velocities.pop(),h=i.velocities.pop(),v=f.position-h.position,m=f.time-h.time;t.velocity=v/m,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(m>150||G.now()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,y=t.velocity*g,w=t.translate+y;s&&(w=-w);var b,x=!1,T=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(w<t.maxTranslate())n.freeModeMomentumBounce?(w+t.maxTranslate()<-T&&(w=t.maxTranslate()-T),b=t.maxTranslate(),x=!0,i.allowMomentumBounce=!0):w=t.maxTranslate();else if(w>t.minTranslate())n.freeModeMomentumBounce?(w-t.minTranslate()>T&&(w=t.minTranslate()+T),b=t.minTranslate(),x=!0,i.allowMomentumBounce=!0):w=t.minTranslate();else if(n.freeModeSticky){for(var S,C=0;C<l.length;C+=1)if(l[C]>-w){S=C;break}w=Math.abs(l[S]-w)<Math.abs(l[S-1]-w)||"next"===t.swipeDirection?l[S]:l[S-1],w=-w}if(0!==t.velocity)g=s?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity);else if(n.freeModeSticky)return void t.slideReset();n.freeModeMomentumBounce&&x?(t.updateProgress(b),t.setTransition(g),t.setTranslate(w),t.transitionStart(),t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),t.setTranslate(b),o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(),t.animating||(t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(w),t.updateActiveIndex(),t.updateSlidesClasses()}return void((!n.freeModeMomentum||u>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}for(var k=0,E=t.slidesSizesGrid[0],$=0;$<a.length;$+=n.slidesPerGroup)"undefined"!=typeof a[$+n.slidesPerGroup]?p>=a[$]&&p<a[$+n.slidesPerGroup]&&(k=$,E=a[$+n.slidesPerGroup]-a[$]):p>=a[$]&&(k=$,E=a[a.length-1]-a[a.length-2]);var M=(p-a[k])/E;if(u>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(M>=n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k)),"prev"===t.swipeDirection&&(M>1-n.longSwipesRatio?t.slideTo(k+n.slidesPerGroup):t.slideTo(k))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(k+n.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(k)}}},Fe=function(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,r=e.allowSlidePrev;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){var s=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=r,e.allowSlideNext=n}},qe=function(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))},Be={attachEvents:_,detachEvents:F},Re=function(){var e=this,t=e.activeIndex,i=e.loopedSlides;void 0===i&&(i=0);var n=e.params,r=n.breakpoints;if(r&&(!r||0!==Object.keys(r).length)){var s=e.getBreakpoint(r);if(s&&e.currentBreakpoint!==s){var o=s in r?r[s]:e.originalParams,a=n.loop&&o.slidesPerView!==n.slidesPerView;G.extend(e.params,o),G.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",o)}}},We=function(e){if(e){var t=!1,i=[];Object.keys(e).forEach(function(e){i.push(e)}),i.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var n=0;n<i.length;n+=1){var r=i[n];r>=R.innerWidth&&!t&&(t=r)}return t||"max"}},Xe={setBreakpoint:Re,getBreakpoint:We},Ye=function(){var e=this,t=e.classNames,i=e.params,n=e.rtl,r=e.$el,s=[];s.push(i.direction),i.freeMode&&s.push("free-mode"),U.flexbox||s.push("no-flexbox"),i.autoHeight&&s.push("autoheight"),n&&s.push("rtl"),i.slidesPerColumn>1&&s.push("multirow"),He.android&&s.push("android"),He.ios&&s.push("ios"),(R.navigator.pointerEnabled||R.navigator.msPointerEnabled)&&s.push("wp8-"+i.direction),s.forEach(function(e){t.push(i.containerModifierClass+e)}),r.addClass(t.join(" "))},Ge=function(){var e=this,t=e.$el,i=e.classNames;t.removeClass(i.join(" "))},Ve={addClasses:Ye,removeClasses:Ge},Ue=function(e,t,i,n,r,s){function o(){s&&s()}var a;e.complete&&r?o():t?(a=new R.Image,a.onload=o,a.onerror=o,n&&(a.sizes=n),i&&(a.srcset=i),t&&(a.src=t)):o()},Ke=function(){function e(){"undefined"!=typeof t&&null!==t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}var t=this;t.imagesToLoad=t.$el.find("img");for(var i=0;i<t.imagesToLoad.length;i+=1){var n=t.imagesToLoad[i];t.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,e)}},Qe={loadImage:Ue,preloadImages:Ke},Je={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,iOSEdgeSwipeDetection:!1,iOSEdgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},Ze={update:ae,translate:pe,transition:me,slide:Se,loop:$e,grabCursor:Ae,manipulation:Ie,events:Be,breakpoints:Xe,classes:Ve,images:Qe},et={},tt=function(t){function i(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var s,o;if(1===n.length&&n[0].constructor&&n[0].constructor===Object)o=n[0];else{var a;a=n,s=a[0],o=a[1]}o||(o={}),o=G.extend({},o),s&&!o.el&&(o.el=s),t.call(this,o),Object.keys(Ze).forEach(function(e){Object.keys(Ze[e]).forEach(function(t){i.prototype[t]||(i.prototype[t]=Ze[e][t])})});var l=this;"undefined"==typeof l.modules&&(l.modules={}),Object.keys(l.modules).forEach(function(e){var t=l.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n)return;if(!(i in o&&"enabled"in n))return;o[i]===!0&&(o[i]={enabled:!0}),"object"!=typeof o[i]||"enabled"in o[i]||(o[i].enabled=!0),o[i]||(o[i]={enabled:!1})}});var d=G.extend({},Je);l.useModulesParams(d),l.params=G.extend({},d,et,o),l.originalParams=G.extend({},l.params),l.passedParams=G.extend({},o);var c=e(l.params.el);if(s=c[0]){if(c.length>1){var u=[];return c.each(function(e,t){var n=G.extend({},o,{el:t});u.push(new i(n))}),u}s.swiper=l,c.data("swiper",l);var p=c.children("."+l.params.wrapperClass);return G.extend(l,{$el:c,el:s,$wrapperEl:p,wrapperEl:p[0],classNames:[],slides:e(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===l.params.direction},isVertical:function(){return"vertical"===l.params.direction},rtl:"horizontal"===l.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===p.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,progress:0,velocity:0,animating:!1,allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEvents:function(){var e=["touchstart","touchmove","touchend"],t=["mousedown","mousemove","mouseup"];return R.navigator.pointerEnabled?t=["pointerdown","pointermove","pointerup"]:R.navigator.msPointerEnabled&&(t=["MSPointerDown","MsPointerMove","MsPointerUp"]),{start:U.touch||!l.params.simulateTouch?e[0]:t[0],move:U.touch||!l.params.simulateTouch?e[1]:t[1],end:U.touch||!l.params.simulateTouch?e[2]:t[2]}}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:G.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.useModules(),l.params.init&&l.init(),l}}t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i;var n={extendedDefaults:{},defaults:{},Class:{},$:{}};return i.prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,n=e.slidesGrid,r=e.size,s=e.activeIndex,o=1;if(t.centeredSlides){for(var a,l=i[s].swiperSlideSize,d=s+1;d<i.length;d+=1)i[d]&&!a&&(l+=i[d].swiperSlideSize,o+=1,l>r&&(a=!0));for(var c=s-1;c>=0;c-=1)i[c]&&!a&&(l+=i[c].swiperSlideSize,o+=1,l>r&&(a=!0))}else for(var u=s+1;u<i.length;u+=1)n[u]-n[s]<r&&(o+=1);return o},i.prototype.update=function(){function e(){i=Math.min(Math.max(t.translate,t.maxTranslate()),t.minTranslate()),t.setTranslate(i),t.updateActiveIndex(),t.updateSlidesClasses()}var t=this;if(t&&!t.destroyed){t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses();var i,n;t.params.freeMode?(e(),t.params.autoHeight&&t.updateAutoHeight()):(n=("auto"===t.params.slidesPerView||t.params.slidesPerView>1)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),n||e()),t.emit("update")}},i.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},i.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,r=i.$el,s=i.$wrapperEl,o=i.slides;i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),e!==!1&&(i.$el[0].swiper=null,i.$el.data("swiper",null),G.deleteProps(i)),i.destroyed=!0},i.extendDefaults=function(e){G.extend(et,e)},n.extendedDefaults.get=function(){return et},n.defaults.get=function(){return Je},n.Class.get=function(){return t},n.$.get=function(){return e},Object.defineProperties(i,n),i}(K),it={name:"device",proto:{device:He},"static":{device:He}},nt={name:"support",proto:{support:U},"static":{support:U}},rt={name:"browser",proto:{browser:ge},"static":{browser:ge}},st={name:"resize",create:function(){var e=this;G.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){var e=this;R.addEventListener("resize",e.resize.resizeHandler),R.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(){var e=this;R.removeEventListener("resize",e.resize.resizeHandler),R.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},ot={func:R.MutationObserver||R.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=ot.func,r=new n(function(e){e.forEach(function(e){i.emit("observerUpdate",e)})});r.observe(e,{attributes:"undefined"==typeof t.attributes||t.attributes,childList:"undefined"==typeof t.childList||t.childList,characterData:"undefined"==typeof t.characterData||t.characterData}),i.observer.observers.push(r)},init:function(){var e=this;if(U.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:!1}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){var e=this;e.observer.observers.forEach(function(e){e.disconnect()}),e.observer.observers=[]}},at={name:"observer",params:{observer:!1,observeParents:!1},create:function(){var e=this;G.extend(e,{observer:{init:ot.init.bind(e),attach:ot.attach.bind(e),destroy:ot.destroy.bind(e),observers:[]}})},on:{init:function(){var e=this;e.observer.init()},destroy:function(){var e=this;e.observer.destroy()}}},lt={update:function(e){function t(){i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.lazy&&i.params.lazy.enabled&&i.lazy.load()}var i=this,n=i.params,r=n.slidesPerView,s=n.slidesPerGroup,o=n.centeredSlides,a=i.virtual,l=a.from,d=a.to,c=a.slides,u=a.slidesGrid,p=a.renderSlide,f=a.offset;i.updateActiveIndex();var h,v=i.activeIndex||0;h=i.rtl&&i.isHorizontal()?"right":i.isHorizontal()?"left":"top";var m,g;o?(m=Math.floor(r/2)+s,g=Math.floor(r/2)+s):(m=r+(s-1),g=s);var y=Math.max((v||0)-g,0),w=Math.min((v||0)+m,c.length-1),b=(i.slidesGrid[y]||0)-(i.slidesGrid[0]||0);if(G.extend(i.virtual,{from:y,to:w,offset:b,slidesGrid:i.slidesGrid}),l===y&&d===w&&!e)return i.slidesGrid!==u&&b!==f&&i.slides.css(h,b+"px"),void i.updateProgress();if(i.params.virtual.renderExternal)return i.params.virtual.renderExternal.call(i,{offset:b,from:y,to:w,slides:function(){for(var e=[],t=y;t<=w;t+=1)e.push(c[t]);return e}()}),void t();var x=[],T=[];if(e)i.$wrapperEl.find("."+i.params.slideClass).remove();else for(var S=l;S<=d;S+=1)(S<y||S>w)&&i.$wrapperEl.find("."+i.params.slideClass+'[data-swiper-slide-index="'+S+'"]').remove();for(var C=0;C<c.length;C+=1)C>=y&&C<=w&&("undefined"==typeof d||e?T.push(C):(C>d&&T.push(C),C<l&&x.push(C)));T.forEach(function(e){i.$wrapperEl.append(p(c[e],e))}),x.sort(function(e,t){return e<t}).forEach(function(e){i.$wrapperEl.prepend(p(c[e],e))}),i.$wrapperEl.children(".swiper-slide").css(h,b+"px"),t()},renderSlide:function(t,i){var n=this,r=n.params.virtual;if(r.cache&&n.virtual.cache[i])return n.virtual.cache[i];var s=e(r.renderSlide?r.renderSlide.call(n,t,i):'<div class="'+n.params.slideClass+'" data-swiper-slide-index="'+i+'">'+t+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",i),r.cache&&(n.virtual.cache[i]=s),s},appendSlide:function(e){var t=this;t.virtual.slides.push(e),t.virtual.update(!0)},prependSlide:function(e){var t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){var i=t.virtual.cache,n={};Object.keys(i).forEach(function(e){n[e+1]=i[e]}),t.virtual.cache=n}t.virtual.update(!0),t.slideNext(0)}},dt={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create:function(){var e=this;G.extend(e,{virtual:{update:lt.update.bind(e),appendSlide:lt.appendSlide.bind(e),prependSlide:lt.prependSlide.bind(e),renderSlide:lt.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e=this;if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};G.extend(e.params,t),G.extend(e.originalParams,t),e.virtual.update()}},setTranslate:function(){var e=this;e.params.virtual.enabled&&e.virtual.update()}}},ct={handle:function(e){var t=this,i=e;i.originalEvent&&(i=i.originalEvent);var n=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===n||t.isVertical()&&40===n))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===n||t.isVertical()&&38===n))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||V.activeElement&&V.activeElement.nodeName&&("input"===V.activeElement.nodeName.toLowerCase()||"textarea"===V.activeElement.nodeName.toLowerCase()))){if(37===n||39===n||38===n||40===n){var r=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var s={left:R.pageXOffset,top:R.pageYOffset},o=R.innerWidth,a=R.innerHeight,l=t.$el.offset();t.rtl&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],c=0;c<d.length;c+=1){var u=d[c];u[0]>=s.left&&u[0]<=s.left+o&&u[1]>=s.top&&u[1]<=s.top+a&&(r=!0)}if(!r)return}t.isHorizontal()?(37!==n&&39!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),(39===n&&!t.rtl||37===n&&t.rtl)&&t.slideNext(),(37===n&&!t.rtl||39===n&&t.rtl)&&t.slidePrev()):(38!==n&&40!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),40===n&&t.slideNext(),38===n&&t.slidePrev()),t.emit("keyPress",n)}},enable:function(){var t=this;t.keyboard.enabled||(e(V).on("keydown",t.keyboard.handle),t.keyboard.enabled=!0)},disable:function(){var t=this;t.keyboard.enabled&&(e(V).off("keydown",t.keyboard.handle),t.keyboard.enabled=!1)}},ut={name:"keyboard",params:{keyboard:{enabled:!1}},create:function(){var e=this;G.extend(e,{keyboard:{enabled:!1,enable:ct.enable.bind(e),disable:ct.disable.bind(e),handle:ct.handle.bind(e)}})},on:{init:function(){var e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(){var e=this;e.keyboard.enabled&&e.keyboard.disable()}}},pt={lastScrollTime:G.now(),event:function(){return R.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":q()?"wheel":"mousewheel"}(),normalize:function(e){var t=10,i=40,n=800,r=0,s=0,o=0,a=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(r=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(r=s,s=0),o=r*t,a=s*t,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(o=e.deltaX),(o||a)&&e.deltaMode&&(1===e.deltaMode?(o*=i,a*=i):(o*=n,a*=n)),o&&!r&&(r=o<1?-1:1),a&&!s&&(s=a<1?-1:1),{spinX:r,spinY:s,pixelX:o,pixelY:a}},handle:function(e){var t=e,i=this,n=i.params.mousewheel;t.originalEvent&&(t=t.originalEvent);var r=0,s=i.rtl?-1:1,o=pt.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===r)return!0;if(n.invert&&(r=-r),i.params.freeMode){var a=i.getTranslate()+r*n.sensitivity,l=i.isBeginning,d=i.isEnd;if(a>=i.minTranslate()&&(a=i.minTranslate()),a<=i.maxTranslate()&&(a=i.maxTranslate()),i.setTransition(0),i.setTranslate(a),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!l&&i.isBeginning||!d&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=G.nextTick(function(){i.slideReset()},300)),i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.stopAutoplay(),0===a||a===i.maxTranslate())return!0}else{if(G.now()-i.mousewheel.lastScrollTime>60)if(r<0)if(i.isEnd&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slideNext(),i.emit("scroll",t);else if(i.isBeginning&&!i.params.loop||i.animating){if(n.releaseOnEdges)return!0}else i.slidePrev(),i.emit("scroll",t);i.mousewheel.lastScrollTime=(new R.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var t=this;if(!pt.event)return!1;if(t.mousewheel.enabled)return!1;var i=t.$el;return"container"!==t.params.mousewheel.eventsTarged&&(i=e(t.params.mousewheel.eventsTarged)),i.on(pt.event,t.mousewheel.handle),t.mousewheel.enabled=!0,!0},disable:function(){var t=this;if(!pt.event)return!1;if(!t.mousewheel.enabled)return!1;var i=t.$el;return"container"!==t.params.mousewheel.eventsTarged&&(i=e(t.params.mousewheel.eventsTarged)),i.off(pt.event,t.mousewheel.handle),t.mousewheel.enabled=!1,!0}},ft={name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;G.extend(e,{mousewheel:{enabled:!1,enable:pt.enable.bind(e),disable:pt.disable.bind(e),handle:pt.handle.bind(e),lastScrollTime:G.now()}})},on:{init:function(){var e=this;e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(){var e=this;e.mousewheel.enabled&&e.mousewheel.disable()}}},ht={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,n=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass))}},init:function(){var t=this,i=t.params.navigation;if(i.nextEl||i.prevEl){var n,r;i.nextEl&&(n=e(i.nextEl),t.params.uniqueNavElements&&"string"==typeof i.nextEl&&n.length>1&&1===t.$el.find(i.nextEl).length&&(n=t.$el.find(i.nextEl))),i.prevEl&&(r=e(i.prevEl),t.params.uniqueNavElements&&"string"==typeof i.prevEl&&r.length>1&&1===t.$el.find(i.prevEl).length&&(r=t.$el.find(i.prevEl))),n&&n.length>0&&n.on("click",function(e){e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()}),r&&r.length>0&&r.on("click",function(e){e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()}),G.extend(t.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:r,prevEl:r&&r[0]})}},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,n=t.$prevEl;i&&i.length&&(i.off("click"),i.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click"),n.removeClass(e.params.navigation.disabledClass))}},vt={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden"}},create:function(){var e=this;G.extend(e,{navigation:{init:ht.init.bind(e),update:ht.update.bind(e),destroy:ht.destroy.bind(e)}})},on:{init:function(){var e=this;e.navigation.init(),e.navigation.update()},toEdge:function(){var e=this;e.navigation.update()},fromEdge:function(){var e=this;e.navigation.update()},destroy:function(){var e=this;e.navigation.destroy()},click:function(t){var i=this,n=i.navigation,r=n.$nextEl,s=n.$prevEl;!i.params.navigation.hideOnClick||e(t.target).is(s)||e(t.target).is(r)||(r&&r.toggleClass(i.params.navigation.hiddenClass),s&&s.toggleClass(i.params.navigation.hiddenClass))}}},mt={update:function(){var t=this,i=t.rtl,n=t.params.pagination;if(n.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length){var r,s=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,o=t.pagination.$el,a=t.params.loop?Math.ceil((s-2*t.loopedSlides)/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(r=Math.ceil((t.activeIndex-t.loopedSlides)/t.params.slidesPerGroup),r>s-1-2*t.loopedSlides&&(r-=s-2*t.loopedSlides),r>a-1&&(r-=a),r<0&&"bullets"!==t.params.paginationType&&(r=a+r)):r="undefined"!=typeof t.snapIndex?t.snapIndex:t.activeIndex||0,"bullets"===n.type&&t.pagination.bullets&&t.pagination.bullets.length>0){var l=t.pagination.bullets;if(n.dynamicBullets&&(t.pagination.bulletSize=l.eq(0)[t.isHorizontal()?"outerWidth":"outerHeight"](!0),o.css(t.isHorizontal()?"width":"height",5*t.pagination.bulletSize+"px")),l.removeClass(n.bulletActiveClass+" "+n.bulletActiveClass+"-next "+n.bulletActiveClass+"-next-next "+n.bulletActiveClass+"-prev "+n.bulletActiveClass+"-prev-prev"),o.length>1)l.each(function(t,i){var s=e(i);s.index()===r&&(s.addClass(n.bulletActiveClass),n.dynamicBullets&&(s.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),s.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next")))});else{var d=l.eq(r);d.addClass(n.bulletActiveClass),n.dynamicBullets&&(d.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),d.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next"))}if(n.dynamicBullets){var c=Math.min(l.length,5),u=(t.pagination.bulletSize*c-t.pagination.bulletSize)/2-r*t.pagination.bulletSize,p=i?"right":"left";l.css(t.isHorizontal()?p:"top",u+"px")}}if("fraction"===n.type&&(o.find("."+n.currentClass).text(r+1),o.find("."+n.totalClass).text(a)),"progressbar"===n.type){var f=(r+1)/a,h=f,v=1;t.isHorizontal()||(v=f,h=1),o.find("."+n.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+h+") scaleY("+v+")").transition(t.params.speed)}"custom"===n.type&&n.renderCustom?(o.html(n.renderCustom(t,r+1,a)),t.emit("paginationRender",t,o[0])):t.emit("paginationUpdate",t,o[0])}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,r="";if("bullets"===t.type){for(var s=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,o=0;o<s;o+=1)r+=t.renderBullet?t.renderBullet.call(e,o,t.bulletClass):"<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(r),e.pagination.bullets=n.find("."+t.bulletClass)}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var t=this,i=t.params.pagination;if(i.el){var n=e(i.el);0!==n.length&&(t.params.uniqueNavElements&&"string"==typeof i.el&&n.length>1&&1===t.$el.find(i.el).length&&(n=t.$el.find(i.el)),"bullets"===i.type&&i.clickable&&n.addClass(i.clickableClass),n.addClass(i.modifierClass+i.type),"bullets"===i.type&&i.dynamicBullets&&n.addClass(""+i.modifierClass+i.type+"-dynamic"),i.clickable&&n.on("click","."+i.bulletClass,function(i){i.preventDefault();var n=e(this).index()*t.params.slidesPerGroup;t.params.loop&&(n+=t.loopedSlides),t.slideTo(n)}),G.extend(t.pagination,{$el:n,el:n[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass)}}},gt={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,
renderFraction:null,renderCustom:null,type:"bullets",dynamicBullets:!1,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",clickableClass:"swiper-pagination-clickable"}},create:function(){var e=this;G.extend(e,{pagination:{init:mt.init.bind(e),render:mt.render.bind(e),update:mt.update.bind(e),destroy:mt.destroy.bind(e)}})},on:{init:function(){var e=this;e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(){var e=this;e.params.loop?e.pagination.update():"undefined"==typeof e.snapIndex&&e.pagination.update()},snapIndexChange:function(){var e=this;e.params.loop||e.pagination.update()},slidesLengthChange:function(){var e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(){var e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(){var e=this;e.pagination.destroy()},click:function(t){var i=this;i.params.pagination.el&&i.params.pagination.hideOnClick&&i.pagination.$el.length>0&&!e(t.target).hasClass(i.params.pagination.bulletClass)&&i.pagination.$el.toggleClass(i.params.pagination.hiddenClass)}}},yt={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=e.rtl,n=e.progress,r=t.dragSize,s=t.trackSize,o=t.$dragEl,a=t.$el,l=e.params.scrollbar,d=r,c=(s-r)*n;i&&e.isHorizontal()?(c=-c,c>0?(d=r-c,c=0):-c+r>s&&(d=s+c)):c<0?(d=r+c,c=0):c+r>s&&(d=s-c),e.isHorizontal()?(U.transforms3d?o.transform("translate3d("+c+"px, 0, 0)"):o.transform("translateX("+c+"px)"),o[0].style.width=d+"px"):(U.transforms3d?o.transform("translate3d(0px, "+c+"px, 0)"):o.transform("translateY("+c+"px)"),o[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),a[0].style.opacity=1,e.scrollbar.timeout=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=t.$dragEl,n=t.$el;i[0].style.width="",i[0].style.height="";var r,s=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,o=e.size/e.virtualSize,a=o*(s/e.size);r="auto"===e.params.scrollbar.dragSize?s*o:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=r+"px":i[0].style.height=r+"px",o>=1?n[0].style.display="none":n[0].style.display="",e.params.scrollbarHide&&(n[0].style.opacity=0),G.extend(t,{trackSize:s,divider:o,moveDivider:a,dragSize:r})}},setDragPosition:function(e){var t,i=this,n=i.scrollbar,r=n.$el,s=n.dragSize,o=n.trackSize;t=i.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY;var a;a=(t-r.offset()[i.isHorizontal()?"left":"top"]-s/2)/(o-s),a=Math.max(Math.min(a,1),0),i.rtl&&(a=1-a);var l=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*a;i.updateProgress(l),i.setTranslate(l),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=t.$wrapperEl,s=n.$el,o=n.$dragEl;t.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),r.transition(100),o.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),s.transition(0),i.hide&&s.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,i=t.scrollbar,n=t.$wrapperEl,r=i.$el,s=i.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,i.setDragPosition(e),n.transition(0),r.transition(0),s.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=n.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=G.nextTick(function(){r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideReset())},enableDraggable:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=i.$el,r=U.touch?n[0]:document;n.on(t.scrollbar.dragEvents.start,t.scrollbar.onDragStart),e(r).on(t.scrollbar.dragEvents.move,t.scrollbar.onDragMove),e(r).on(t.scrollbar.dragEvents.end,t.scrollbar.onDragEnd)}},disableDraggable:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=i.$el,r=U.touch?n[0]:document;n.off(t.scrollbar.dragEvents.start),e(r).off(t.scrollbar.dragEvents.move),e(r).off(t.scrollbar.dragEvents.end)}},init:function(){var t=this;if(t.params.scrollbar.el){var i=t.scrollbar,n=t.$el,r=t.touchEvents,s=t.params.scrollbar,o=e(s.el);t.params.uniqueNavElements&&"string"==typeof s.el&&o.length>1&&1===n.find(s.el).length&&(o=n.find(s.el));var a=o.find(".swiper-scrollbar-drag");0===a.length&&(a=e('<div class="swiper-scrollbar-drag"></div>'),o.append(a)),t.scrollbar.dragEvents=function(){return t.params.simulateTouch!==!1||U.touch?r:{start:"mousedown",move:"mousemove",end:"mouseup"}}(),G.extend(i,{$el:o,el:o[0],$dragEl:a,dragEl:a[0]}),s.draggable&&i.enableDraggable()}},destroy:function(){var e=this;e.scrollbar.disableDraggable()}},wt={name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0}},create:function(){var e=this;G.extend(e,{scrollbar:{init:yt.init.bind(e),destroy:yt.destroy.bind(e),updateSize:yt.updateSize.bind(e),setTranslate:yt.setTranslate.bind(e),setTransition:yt.setTransition.bind(e),enableDraggable:yt.enableDraggable.bind(e),disableDraggable:yt.disableDraggable.bind(e),setDragPosition:yt.setDragPosition.bind(e),onDragStart:yt.onDragStart.bind(e),onDragMove:yt.onDragMove.bind(e),onDragEnd:yt.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){var e=this;e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(){var e=this;e.scrollbar.updateSize()},resize:function(){var e=this;e.scrollbar.updateSize()},observerUpdate:function(){var e=this;e.scrollbar.updateSize()},setTranslate:function(){var e=this;e.scrollbar.setTranslate()},setTransition:function(e){var t=this;t.scrollbar.setTransition(e)},destroy:function(){var e=this;e.scrollbar.destroy()}}},bt={setTransform:function(t,i){var n=this,r=n.rtl,s=e(t),o=r?-1:1,a=s.attr("data-swiper-parallax")||"0",l=s.attr("data-swiper-parallax-x"),d=s.attr("data-swiper-parallax-y"),c=s.attr("data-swiper-parallax-scale"),u=s.attr("data-swiper-parallax-opacity");if(l||d?(l=l||"0",d=d||"0"):n.isHorizontal()?(l=a,d="0"):(d=a,l="0"),l=l.indexOf("%")>=0?parseInt(l,10)*i*o+"%":l*i*o+"px",d=d.indexOf("%")>=0?parseInt(d,10)*i+"%":d*i+"px","undefined"!=typeof u&&null!==u){var p=u-(u-1)*(1-Math.abs(i));s[0].style.opacity=p}if("undefined"==typeof c||null===c)s.transform("translate3d("+l+", "+d+", 0px)");else{var f=c-(c-1)*(1-Math.abs(i));s.transform("translate3d("+l+", "+d+", 0px) scale("+f+")")}},setTranslate:function(){var t=this,i=t.$el,n=t.slides,r=t.progress,s=t.snapGrid;i.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,r)}),n.each(function(i,n){var o=n.progress;t.params.slidesPerGroup>1&&"auto"!==t.params.slidesPerView&&(o+=Math.ceil(i/2)-r*(s.length-1)),o=Math.min(Math.max(o,-1),1),e(n).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,i){t.parallax.setTransform(i,o)})})},setTransition:function(t){void 0===t&&(t=this.params.speed);var i=this,n=i.$el;n.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(i,n){var r=e(n),s=parseInt(r.attr("data-swiper-parallax-duration"),10)||t;0===t&&(s=0),r.transition(s)})}},xt={name:"parallax",params:{parallax:{enabled:!1}},create:function(){var e=this;G.extend(e,{parallax:{setTransform:bt.setTransform.bind(e),setTranslate:bt.setTranslate.bind(e),setTransition:bt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;e.params.watchSlidesProgress=!0},init:function(){var e=this;e.params.parallax&&e.parallax.setTranslate()},setTranslate:function(){var e=this;e.params.parallax&&e.parallax.setTranslate()},setTransition:function(e){var t=this;t.params.parallax&&t.parallax.setTransition(e)}}},Tt={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY,s=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-i,2));return s},onGestureStart:function(t){var i=this,n=i.params.zoom,r=i.zoom,s=r.gesture;if(r.fakeGestureTouched=!1,r.fakeGestureMoved=!1,!U.gestures){if("touchstart"!==t.type||"touchstart"===t.type&&t.targetTouches.length<2)return;r.fakeGestureTouched=!0,s.scaleStart=Tt.getDistanceBetweenTouches(t)}return s.$slideEl&&s.$slideEl.length||(s.$slideEl=e(this),0===s.$slideEl.length&&(s.$slideEl=i.slides.eq(i.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+n.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),void(i.zoom.isScaling=!0)):void(s.$imageEl=void 0)},onGestureChange:function(e){var t=this,i=t.params.zoom,n=t.zoom,r=n.gesture;if(!U.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n.fakeGestureMoved=!0,r.scaleMove=Tt.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length&&(U.gestures?t.zoom.scale=e.scale*n.currentScale:n.scale=r.scaleMove/r.scaleStart*n.currentScale,n.scale>r.maxRatio&&(n.scale=r.maxRatio-1+Math.pow(n.scale-r.maxRatio+1,.5)),n.scale<i.minRatio&&(n.scale=i.minRatio+1-Math.pow(i.minRatio-n.scale+1,.5)),r.$imageEl.transform("translate3d(0,0,0) scale("+n.scale+")"))},onGestureEnd:function(e){var t=this,i=t.params.zoom,n=t.zoom,r=n.gesture;if(!U.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!He.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}r.$imageEl&&0!==r.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,r.maxRatio),i.minRatio),r.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale("+n.scale+")"),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(r.$slideEl=void 0))},onTouchStart:function(e){var t=this,i=t.zoom,n=i.gesture,r=i.image;n.$imageEl&&0!==n.$imageEl.length&&(r.isTouched||(He.android&&e.preventDefault(),r.isTouched=!0,r.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,i=t.zoom,n=i.gesture,r=i.image,s=i.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,r.isTouched&&n.$slideEl)){r.isMoved||(r.width=n.$imageEl[0].offsetWidth,r.height=n.$imageEl[0].offsetHeight,r.startX=G.getTranslate(n.$imageWrapEl[0],"x")||0,r.startY=G.getTranslate(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX),t.rtl&&(r.startY=-r.startY));var o=r.width*i.scale,a=r.height*i.scale;if(!(o<n.slideWidth&&a<n.slideHeight)){if(r.minX=Math.min(n.slideWidth/2-o/2,0),r.maxX=-r.minX,r.minY=Math.min(n.slideHeight/2-a/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-Math.pow(r.minX-r.currentX+1,.8)),r.currentX>r.maxX&&(r.currentX=r.maxX-1+Math.pow(r.currentX-r.maxX+1,.8)),r.currentY<r.minY&&(r.currentY=r.minY+1-Math.pow(r.minY-r.currentY+1,.8)),r.currentY>r.maxY&&(r.currentY=r.maxY-1+Math.pow(r.currentY-r.maxY+1,.8)),s.prevPositionX||(s.prevPositionX=r.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=r.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(r.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(r.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(r.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(r.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=r.touchesCurrent.x,s.prevPositionY=r.touchesCurrent.y,s.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+r.currentX+"px, "+r.currentY+"px,0)")}}},onTouchEnd:function(){var e=this,t=e.zoom,i=t.gesture,n=t.image,r=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var s=300,o=300,a=r.x*s,l=n.currentX+a,d=r.y*o,c=n.currentY+d;0!==r.x&&(s=Math.abs((l-n.currentX)/r.x)),0!==r.y&&(o=Math.abs((c-n.currentY)/r.y));var u=Math.max(s,o);n.currentX=l,n.currentY=c;var p=n.width*t.scale,f=n.height*t.scale;n.minX=Math.min(i.slideWidth/2-p/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-f/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),i.$imageWrapEl.transition(u).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this,t=e.zoom,i=t.gesture;i.$slideEl&&e.previousIndex!==e.activeIndex&&(i.$imageEl.transform("translate3d(0,0,0) scale(1)"),i.$imageWrapEl.transform("translate3d(0,0,0)"),i.$slideEl=void 0,i.$imageEl=void 0,i.$imageWrapEl=void 0,t.scale=1,t.currentScale=1)},toggle:function(e){var t=this,i=t.zoom;i.scale&&1!==i.scale?i.out():i["in"](e)},"in":function(t){var i=this,n=i.zoom,r=i.params.zoom,s=n.gesture,o=n.image;if(s.$slideEl||(s.$slideEl=i.clickedSlide?e(i.clickedSlide):i.slides.eq(i.activeIndex),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+r.containerClass)),s.$imageEl&&0!==s.$imageEl.length){s.$slideEl.addClass(""+r.zoomedSlideClass);var a,l,d,c,u,p,f,h,v,m,g,y,w,b,x,T,S,C;"undefined"==typeof o.touchesStart.x&&t?(a="touchend"===t.type?t.changedTouches[0].pageX:t.pageX,l="touchend"===t.type?t.changedTouches[0].pageY:t.pageY):(a=o.touchesStart.x,l=o.touchesStart.y),n.scale=s.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,n.currentScale=s.$imageWrapEl.attr("data-swiper-zoom")||r.maxRatio,t?(S=s.$slideEl[0].offsetWidth,C=s.$slideEl[0].offsetHeight,d=s.$slideEl.offset().left,c=s.$slideEl.offset().top,u=d+S/2-a,p=c+C/2-l,v=s.$imageEl[0].offsetWidth,m=s.$imageEl[0].offsetHeight,g=v*n.scale,y=m*n.scale,w=Math.min(S/2-g/2,0),b=Math.min(C/2-y/2,0),x=-w,T=-b,f=u*n.scale,h=p*n.scale,f<w&&(f=w),f>x&&(f=x),h<b&&(h=b),h>T&&(h=T)):(f=0,h=0),s.$imageWrapEl.transition(300).transform("translate3d("+f+"px, "+h+"px,0)"),s.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")")}},out:function(){var t=this,i=t.zoom,n=t.params.zoom,r=i.gesture;r.$slideEl||(r.$slideEl=t.clickedSlide?e(t.clickedSlide):t.slides.eq(t.activeIndex),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent("."+n.containerClass)),r.$imageEl&&0!==r.$imageEl.length&&(i.scale=1,i.currentScale=1,r.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),r.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),r.$slideEl.removeClass(""+n.zoomedSlideClass),r.$slideEl=void 0)},enable:function(){var t=this,i=t.zoom;if(!i.enabled){i.enabled=!0;var n=t.slides,r=!("touchstart"!==t.touchEvents.start||!U.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};U.gestures?(n.on("gesturestart",i.onGestureStart,r),n.on("gesturechange",i.onGestureChange,r),n.on("gestureend",i.onGestureEnd,r)):"touchstart"===t.touchEvents.start&&(n.on(t.touchEvents.start,i.onGestureStart,r),n.on(t.touchEvents.move,i.onGestureChange,r),n.on(t.touchEvents.end,i.onGestureEnd,r)),t.slides.each(function(n,r){var s=e(r);s.find("."+t.params.zoom.containerClass).length>0&&s.on(t.touchEvents.move,i.onTouchMove)})}},disable:function(){var t=this,i=t.zoom;if(i.enabled){t.zoom.enabled=!1;var n=t.slides,r=!("touchstart"!==t.touchEvents.start||!U.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1};U.gestures?(n.off("gesturestart",i.onGestureStart,r),n.off("gesturechange",i.onGestureChange,r),n.off("gestureend",i.onGestureEnd,r)):"touchstart"===t.touchEvents.start&&(n.off(t.touchEvents.start,i.onGestureStart,r),n.off(t.touchEvents.move,i.onGestureChange,r),n.off(t.touchEvents.end,i.onGestureEnd,r)),t.slides.each(function(n,r){var s=e(r);s.find("."+t.params.zoom.containerClass).length>0&&s.off(t.touchEvents.move,i.onTouchMove)})}}},St={name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(i){t[i]=Tt[i].bind(e)}),G.extend(e,{zoom:t})},on:{init:function(){var e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy:function(){var e=this;e.zoom.disable()},touchStart:function(e){var t=this;t.zoom.enabled&&t.zoom.onTouchStart(e)},touchEnd:function(e){var t=this;t.zoom.enabled&&t.zoom.onTouchEnd(e)},doubleTap:function(e){var t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd:function(){var e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()}}},Ct={loadInSlide:function(t,i){void 0===i&&(i=!0);var n=this,r=n.params.lazy;if("undefined"!=typeof t&&0!==n.slides.length){var s=n.virtual&&n.params.virtual.enabled,o=s?n.$wrapperEl.children("."+n.params.slideClass+'[data-swiper-slide-index="'+t+'"]'):n.slides.eq(t),a=o.find("."+r.elementClass+":not(."+r.loadedClass+"):not(."+r.loadingClass+")");!o.hasClass(r.elementClass)||o.hasClass(r.loadedClass)||o.hasClass(r.loadingClass)||(a=a.add(o[0])),0!==a.length&&a.each(function(t,s){var a=e(s);a.addClass(r.loadingClass);var l=a.attr("data-background"),d=a.attr("data-src"),c=a.attr("data-srcset"),u=a.attr("data-sizes");n.loadImage(a[0],d||l,c,u,!1,function(){if("undefined"!=typeof n&&null!==n&&n&&(!n||n.params)&&!n.destroyed){if(l?(a.css("background-image",'url("'+l+'")'),a.removeAttr("data-background")):(c&&(a.attr("srcset",c),a.removeAttr("data-srcset")),u&&(a.attr("sizes",u),a.removeAttr("data-sizes")),d&&(a.attr("src",d),a.removeAttr("data-src"))),a.addClass(r.loadedClass).removeClass(r.loadingClass),o.find("."+r.preloaderClass).remove(),n.params.loop&&i){var e=o.attr("data-swiper-slide-index");if(o.hasClass(n.params.slideDuplicateClass)){var t=n.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+n.params.slideDuplicateClass+")");n.lazy.loadInSlide(t.index(),!1)}else{var s=n.$wrapperEl.children("."+n.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');n.lazy.loadInSlide(s.index(),!1)}}n.emit("lazyImageReady",o[0],a[0])}}),n.emit("lazyImageLoad",o[0],a[0])})}},load:function(){function t(e){if(l){if(r.children("."+s.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(o[e])return!0;return!1}function i(t){return l?e(t).attr("data-swiper-slide-index"):e(t).index()}var n=this,r=n.$wrapperEl,s=n.params,o=n.slides,a=n.activeIndex,l=n.virtual&&s.virtual.enabled,d=s.lazy,c=s.slidesPerView;if("auto"===c&&(c=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)r.children("."+s.slideVisibleClass).each(function(t,i){var r=l?e(i).attr("data-swiper-slide-index"):e(i).index();n.lazy.loadInSlide(r)});else if(c>1)for(var u=a;u<a+c;u+=1)t(u)&&n.lazy.loadInSlide(u);else n.lazy.loadInSlide(a);if(d.loadPrevNext)if(c>1||d.loadPrevNextAmount&&d.loadPrevNextAmount>1){for(var p=d.loadPrevNextAmount,f=c,h=Math.min(a+f+Math.max(p,f),o.length),v=Math.max(a-Math.max(f,p),0),m=a+c;m<h;m+=1)t(m)&&n.lazy.loadInSlide(m);for(var g=v;g<a;g+=1)t(g)&&n.lazy.loadInSlide(g)}else{var y=r.children("."+s.slideNextClass);y.length>0&&n.lazy.loadInSlide(i(y));var w=r.children("."+s.slidePrevClass);w.length>0&&n.lazy.loadInSlide(i(w))}}},kt={name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){var e=this;G.extend(e,{lazy:{initialImageLoaded:!1,load:Ct.load.bind(e),loadInSlide:Ct.loadInSlide.bind(e)}})},on:{beforeInit:function(){var e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(){var e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll:function(){var e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(){var e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(){var e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(){var e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()}}},Et={LinearSpline:function(e,t){var i=function(){var e,t,i;return function(n,r){for(t=-1,e=n.length;e-t>1;)i=e+t>>1,n[i]<=r?t=i:e=i;return e}}();this.x=e,this.y=t,this.lastIndex=e.length-1;var n,r;return this.interpolate=function(e){return e?(r=i(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new Et.LinearSpline(t.slidesGrid,e.slidesGrid):new Et.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){function i(e){var t=e.rtl&&"horizontal"===e.params.direction?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),r=-s.controller.spline.interpolate(-t)),r&&"container"!==s.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),r=(t-s.minTranslate())*n+e.minTranslate()),s.params.controller.inverse&&(r=e.maxTranslate()-r),e.updateProgress(r),e.setTranslate(r,s),e.updateActiveIndex(),e.updateSlidesClasses()}var n,r,s=this,o=s.controller.control;if(Array.isArray(o))for(var a=0;a<o.length;a+=1)o[a]!==t&&o[a]instanceof tt&&i(o[a]);else o instanceof tt&&t!==o&&i(o)},setTransition:function(e,t){function i(t){t.setTransition(e,r),0!==e&&(t.transitionStart(),t.$wrapperEl.transitionEnd(function(){s&&(t.params.loop&&"slide"===r.params.controller.by&&t.loopFix(),t.transitionEnd())}))}var n,r=this,s=r.controller.control;if(Array.isArray(s))for(n=0;n<s.length;n+=1)s[n]!==t&&s[n]instanceof tt&&i(s[n]);else s instanceof tt&&t!==s&&i(s)}},$t={name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;G.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:Et.getInterpolateFunction.bind(e),setTranslate:Et.setTranslate.bind(e),setTransition:Et.setTransition.bind(e)}})},on:{update:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(){var e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t){var i=this;i.controller.control&&i.controller.setTranslate(e,t)},setTransition:function(e,t){var i=this;i.controller.control&&i.controller.setTransition(e,t)}}},Mt={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(t){var i=this,n=i.params.a11y;if(13===t.keyCode){var r=e(t.target);i.navigation&&i.navigation.$nextEl&&r.is(i.navigation.$nextEl)&&(i.isEnd&&!i.params.loop||i.slideNext(),i.isEnd?i.a11y.notify(n.lastSlideMessage):i.a11y.notify(n.nextSlideMessage)),i.navigation&&i.navigation.$prevEl&&r.is(i.navigation.$prevEl)&&(i.isBeginning&&!i.params.loop||i.slidePrev(),i.isBeginning?i.a11y.notify(n.firstSlideMessage):i.a11y.notify(n.prevSlideMessage)),i.pagination&&r.is("."+i.params.pagination.bulletClass)&&r[0].click()}},notify:function(e){var t=this,i=t.a11y.liveRegion;0!==i.length&&(i.html(""),i.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop){var t=e.navigation,i=t.$nextEl,n=t.$prevEl;n&&n.length>0&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),i&&i.length>0&&(e.isEnd?e.a11y.disableEl(i):e.a11y.enableEl(i))}},updatePagination:function(){var t=this,i=t.params.a11y;t.pagination&&t.params.pagination.clickable&&t.pagination.bullets&&t.pagination.bullets.length&&t.pagination.bullets.each(function(n,r){var s=e(r);t.a11y.makeElFocusable(s),t.a11y.addElRole(s,"button"),t.a11y.addElLabel(s,i.paginationBulletMessage.replace(/{{index}}/,s.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,i,n=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,n.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,n.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e=this;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove();var t,i;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),i&&i.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}},Pt={name:"a11y",params:{a11y:{enabled:!1,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;G.extend(t,{a11y:{liveRegion:e('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(Mt).forEach(function(e){t.a11y[e]=Mt[e].bind(t)})},on:{init:function(){var e=this;e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(){var e=this;e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(){var e=this;e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(){var e=this;e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(){var e=this;e.params.a11y.enabled&&e.a11y.destroy()}}},At={init:function(){var e=this;if(e.params.history){if(!R.history||!R.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=At.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||R.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){var e=this;e.params.history.replaceState||R.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=At.getPathValues(),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(){var e=R.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length,i=e[t-2],n=e[t-1];return{key:i,value:n}},setHistory:function(e,t){var i=this;if(i.history.initialized&&i.params.history.enabled){var n=i.slides.eq(t),r=At.slugify(n.attr("data-history"));R.location.pathname.includes(e)||(r=e+"/"+r);var s=R.history.state;s&&s.value===r||(i.params.history.replaceState?R.history.replaceState({value:r},null,r):R.history.pushState({value:r},null,r))}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var n=this;if(t)for(var r=0,s=n.slides.length;r<s;r+=1){var o=n.slides.eq(r),a=At.slugify(o.attr("data-history"));if(a===t&&!o.hasClass(n.params.slideDuplicateClass)){var l=o.index();n.slideTo(l,e,i)}}else n.slideTo(0,e,i)}},zt={name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;G.extend(e,{history:{init:At.init.bind(e),setHistory:At.setHistory.bind(e),setHistoryPopState:At.setHistoryPopState.bind(e),scrollToSlide:At.scrollToSlide.bind(e),destroy:At.destroy.bind(e)}})},on:{init:function(){var e=this;e.params.history.enabled&&e.history.init()},destroy:function(){var e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd:function(){var e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},Dt={onHashCange:function(){var e=this,t=V.location.hash.replace("#",""),i=e.slides.eq(e.activeIndex).attr("data-hash");t!==i&&e.slideTo(e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index())},setHash:function(){var e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&R.history&&R.history.replaceState)R.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||"");else{var t=e.slides.eq(e.activeIndex),i=t.attr("data-hash")||t.attr("data-history");V.location.hash=i||""}},init:function(){var t=this;if(!(!t.params.hashNavigation.enabled||t.params.history&&t.params.history.enabled)){t.hashNavigation.initialized=!0;var i=V.location.hash.replace("#","");if(i)for(var n=0,r=0,s=t.slides.length;r<s;r+=1){var o=t.slides.eq(r),a=o.attr("data-hash")||o.attr("data-history");if(a===i&&!o.hasClass(t.params.slideDuplicateClass)){var l=o.index();t.slideTo(l,n,t.params.runCallbacksOnInit,!0)}}t.params.hashNavigation.watchState&&e(R).on("hashchange",t.hashNavigation.onHashCange)}},destroy:function(){var t=this;t.params.hashNavigation.watchState&&e(R).off("hashchange",t.hashNavigation.onHashCange)}},Ot={name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;G.extend(e,{hashNavigation:{initialized:!1,init:Dt.init.bind(e),destroy:Dt.destroy.bind(e),setHash:Dt.setHash.bind(e),onHashCange:Dt.onHashCange.bind(e)}})},on:{init:function(){var e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init();
},destroy:function(){var e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(){var e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()}}},Lt={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=G.nextTick(function(){e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},i)},start:function(){var e=this;return"undefined"==typeof e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&("undefined"!=typeof e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0===e?(t.autoplay.paused=!1,t.autoplay.run()):t.$wrapperEl.transitionEnd(function(){t&&!t.destroyed&&(t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())})))}},It={name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,disableOnInteraction:!0,stopOnLastSlide:!1}},create:function(){var e=this;G.extend(e,{autoplay:{running:!1,paused:!1,run:Lt.run.bind(e),start:Lt.start.bind(e),stop:Lt.stop.bind(e),pause:Lt.pause.bind(e)}})},on:{init:function(){var e=this;e.params.autoplay.enabled&&e.autoplay.start()},beforeTransitionStart:function(e,t){var i=this;i.autoplay.running&&(t||!i.params.autoplay.disableOnInteraction?i.autoplay.pause(e):i.autoplay.stop())},sliderFirstMove:function(){var e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},destroy:function(){var e=this;e.autoplay.running&&e.autoplay.stop()}}},Ht={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var n=e.slides.eq(i),r=n[0].swiperSlideOffset,s=-r;e.params.virtualTranslate||(s-=e.translate);var o=0;e.isHorizontal()||(o=s,s=0);var a=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:a}).transform("translate3d("+s+"px, "+o+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,n=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var r=!1;i.transitionEnd(function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)n.trigger(e[i])}})}}},Nt={name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){var e=this;G.extend(e,{fadeEffect:{setTranslate:Ht.setTranslate.bind(e),setTransition:Ht.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};G.extend(e.params,t),G.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e){var t=this;"fade"===t.params.effect&&t.fadeEffect.setTransition(e)}}},jt={setTranslate:function(){var t,i=this,n=i.$el,r=i.$wrapperEl,s=i.slides,o=i.width,a=i.height,l=i.rtl,d=i.size,c=i.params.cubeEffect,u=i.isHorizontal(),p=i.virtual&&i.params.virtual.enabled,f=0;c.shadow&&(u?(t=r.find(".swiper-cube-shadow"),0===t.length&&(t=e('<div class="swiper-cube-shadow"></div>'),r.append(t)),t.css({height:o+"px"})):(t=n.find(".swiper-cube-shadow"),0===t.length&&(t=e('<div class="swiper-cube-shadow"></div>'),n.append(t))));for(var h=0;h<s.length;h+=1){var v=s.eq(h),m=h;p&&(m=parseInt(v.attr("data-swiper-slide-index"),10));var g=90*m,y=Math.floor(g/360);l&&(g=-g,y=Math.floor(-g/360));var w=Math.max(Math.min(v[0].progress,1),-1),b=0,x=0,T=0;m%4===0?(b=4*-y*d,T=0):(m-1)%4===0?(b=0,T=4*-y*d):(m-2)%4===0?(b=d+4*y*d,T=d):(m-3)%4===0&&(b=-d,T=3*d+4*d*y),l&&(b=-b),u||(x=b,b=0);var S="rotateX("+(u?0:-g)+"deg) rotateY("+(u?g:0)+"deg) translate3d("+b+"px, "+x+"px, "+T+"px)";if(w<=1&&w>-1&&(f=90*m+90*w,l&&(f=90*-m-90*w)),v.transform(S),c.slideShadows){var C=u?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),k=u?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===C.length&&(C=e('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),v.append(C)),0===k.length&&(k=e('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),v.append(k)),C.length&&(C[0].style.opacity=Math.max(-w,0)),k.length&&(k[0].style.opacity=Math.max(w,0))}}if(r.css({"-webkit-transform-origin":"50% 50% -"+d/2+"px","-moz-transform-origin":"50% 50% -"+d/2+"px","-ms-transform-origin":"50% 50% -"+d/2+"px","transform-origin":"50% 50% -"+d/2+"px"}),c.shadow)if(u)t.transform("translate3d(0px, "+(o/2+c.shadowOffset)+"px, "+-o/2+"px) rotateX(90deg) rotateZ(0deg) scale("+c.shadowScale+")");else{var E=Math.abs(f)-90*Math.floor(Math.abs(f)/90),$=1.5-(Math.sin(2*E*Math.PI/360)/2+Math.cos(2*E*Math.PI/360)/2),M=c.shadowScale,P=c.shadowScale/$,A=c.shadowOffset;t.transform("scale3d("+M+", 1, "+P+") translate3d(0px, "+(a/2+A)+"px, "+-a/2/P+"px) rotateX(-90deg)")}var z=ge.isSafari||ge.isUiWebView?-d/2:0;r.transform("translate3d(0px,0,"+z+"px) rotateX("+(i.isHorizontal()?0:f)+"deg) rotateY("+(i.isHorizontal()?-f:0)+"deg)")},setTransition:function(e){var t=this,i=t.$el,n=t.slides;n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&i.find(".swiper-cube-shadow").transition(e)}},_t={name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){var e=this;G.extend(e,{cubeEffect:{setTranslate:jt.setTranslate.bind(e),setTransition:jt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};G.extend(e.params,t),G.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e){var t=this;"cube"===t.params.effect&&t.cubeEffect.setTransition(e)}}},Ft={setTranslate:function(){for(var t=this,i=t.slides,n=0;n<i.length;n+=1){var r=i.eq(n),s=r[0].progress;t.params.flipEffect.limitRotation&&(s=Math.max(Math.min(r[0].progress,1),-1));var o=r[0].swiperSlideOffset,a=-180*s,l=a,d=0,c=-o,u=0;if(t.isHorizontal()?t.rtl&&(l=-l):(u=c,c=0,d=-l,l=0),r[0].style.zIndex=-Math.abs(Math.round(s))+i.length,t.params.flipEffect.slideShadows){var p=t.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),f=t.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===p.length&&(p=e('<div class="swiper-slide-shadow-'+(t.isHorizontal()?"left":"top")+'"></div>'),r.append(p)),0===f.length&&(f=e('<div class="swiper-slide-shadow-'+(t.isHorizontal()?"right":"bottom")+'"></div>'),r.append(f)),p.length&&(p[0].style.opacity=Math.max(-s,0)),f.length&&(f[0].style.opacity=Math.max(s,0))}r.transform("translate3d("+c+"px, "+u+"px, 0px) rotateX("+d+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var t=this,i=t.slides,n=t.activeIndex,r=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var s=!1;i.eq(n).transitionEnd(function(){if(!s&&t&&!t.destroyed){s=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)r.trigger(e[i])}})}}},qt={name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){var e=this;G.extend(e,{flipEffect:{setTranslate:Ft.setTranslate.bind(e),setTransition:Ft.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};G.extend(e.params,t),G.extend(e.originalParams,t)}},setTranslate:function(){var e=this;"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e){var t=this;"flip"===t.params.effect&&t.flipEffect.setTransition(e)}}},Bt={setTranslate:function(){for(var t=this,i=t.width,n=t.height,r=t.slides,s=t.$wrapperEl,o=t.slidesSizesGrid,a=t.params.coverflowEffect,l=t.isHorizontal(),d=t.translate,c=l?-d+i/2:-d+n/2,u=l?a.rotate:-a.rotate,p=a.depth,f=0,h=r.length;f<h;f+=1){var v=r.eq(f),m=o[f],g=v[0].swiperSlideOffset,y=(c-g-m/2)/m*a.modifier,w=l?u*y:0,b=l?0:u*y,x=-p*Math.abs(y),T=l?0:a.stretch*y,S=l?a.stretch*y:0;Math.abs(S)<.001&&(S=0),Math.abs(T)<.001&&(T=0),Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(b)<.001&&(b=0);var C="translate3d("+S+"px,"+T+"px,"+x+"px)  rotateX("+b+"deg) rotateY("+w+"deg)";if(v.transform(C),v[0].style.zIndex=-Math.abs(Math.round(y))+1,a.slideShadows){var k=l?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),E=l?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===k.length&&(k=e('<div class="swiper-slide-shadow-'+(l?"left":"top")+'"></div>'),v.append(k)),0===E.length&&(E=e('<div class="swiper-slide-shadow-'+(l?"right":"bottom")+'"></div>'),v.append(E)),k.length&&(k[0].style.opacity=y>0?y:0),E.length&&(E[0].style.opacity=-y>0?-y:0)}}if(ge.ie){var $=s[0].style;$.perspectiveOrigin=c+"px 50%"}},setTransition:function(e){var t=this;t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},Rt={name:"effect-coverflow",params:{coverflowEffect:{rotate:1,stretch:0,depth:500,modifier:1,slideShadows:!1}},create:function(){var e=this;G.extend(e,{coverflowEffect:{setTranslate:Bt.setTranslate.bind(e),setTransition:Bt.setTransition.bind(e)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){var e=this;"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e){var t=this;"coverflow"===t.params.effect&&t.coverflowEffect.setTransition(e)}}};return tt.use([it,nt,rt,st,at,dt,ut,ft,vt,gt,wt,xt,St,kt,$t,Pt,zt,Ot,It,Nt,_t,qt,Rt]),tt}),$(document).ready(function(){$(".nav-icon").click(function(){$(this).toggleClass("open"),$("#menu").fadeToggle("opened-menu")}),$(".slider").slick({arrows:!1,dots:!0,mobileFirst:!0});new Swiper(".swiper-container",{pagination:".swiper-pagination",effect:"coverflow",grabCursor:!0,centeredSlides:!0,slidesPerView:"auto",loop:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:!0}});$(".education-wrapper").viewportChecker({callbackFunction:function(e,t){var i=new ProgressBar.Circle("#read",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});i.animate(.1);var n=new ProgressBar.Circle("#seen",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});n.animate(.3);var r=new ProgressBar.Circle("#feel",{strokeWidth:6,color:"#fff",duration:1400,trailWidth:6,trailColor:"#1b6a9e",from:{color:"#fff",width:6},to:{color:"#fff",width:6},step:function(e,t){t.path.setAttribute("stroke",e.color),t.path.setAttribute("stroke-width",e.width);var i=Math.round(100*t.value());0===i?t.setText(""):t.setText(i)},text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"}});r.animate(.9)}});$(".descr");$(".read-more").on("click",function(){$(".read-more").slideDown()});var e=$(".item"),t=3,i=1,n=0;$(".load-more").on("click",function(){n=t*i++,e.slice(0,n).show(),$(this)[n>=e.length?"hide":"show"]()}).click()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
